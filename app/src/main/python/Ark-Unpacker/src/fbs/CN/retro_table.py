# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_StageDropType(object):
    NONE = 0
    ONCE = 1
    NORMAL = 2
    SPECIAL = 3
    ADDITIONAL = 4
    APRETURN = 5
    DIAMOND_MATERIAL = 6
    FUNITURE_DROP = 7
    COMPLETE = 8
    CHARM_DROP = 9
    OVERRIDE_DROP = 10
    ITEM_RETURN = 11


class enum__Torappu_OccPer(object):
    ALWAYS = 0
    ALMOST = 1
    USUAL = 2
    OFTEN = 3
    SOMETIMES = 4
    NEVER = 5
    DEFINITELY_BUFF = 6


class enum__Torappu_RetroType(object):
    SIDESTORY = 0
    BRANCHLINE = 1


class enum__Torappu_ActivityType(object):
    DEFAULT = 0
    MISSION_ONLY = 1
    CHECKIN_ONLY = 2
    CHECKIN_ALL_PLAYER = 3
    TYPE_ACT3D0 = 4
    TYPE_ACT4D0 = 5
    TYPE_ACT5D0 = 6
    TYPE_ACT5D1 = 7
    COLLECTION = 8
    AVG_ONLY = 9
    TYPE_ACT9D0 = 10
    TYPE_ACT12SIDE = 11
    TYPE_ACT13SIDE = 12
    TYPE_ACT17SIDE = 13
    LOGIN_ONLY = 14
    MINISTORY = 15
    ROGUELIKE = 16
    PRAY_ONLY = 17
    MULTIPLAY = 18
    MULTIPLAY_VERIFY2 = 19
    TYPE_ACT17D7 = 20
    GRID_GACHA = 21
    GRID_GACHA_V2 = 22
    INTERLOCK = 23
    APRIL_FOOL = 24
    BOSS_RUSH = 25
    TYPE_ACT20SIDE = 26
    FLOAT_PARADE = 27
    TYPE_ACT21SIDE = 28
    MAIN_BUFF = 29
    TYPE_ACT24SIDE = 30
    FLIP_ONLY = 31
    TYPE_ACT25SIDE = 32
    CHECKIN_VS = 33
    SWITCH_ONLY = 34
    TYPE_ACT27SIDE = 35
    UNIQUE_ONLY = 36
    MAINLINE_BP = 37
    TYPE_ACT42D0 = 38
    TYPE_ACT29SIDE = 39
    BLESS_ONLY = 40
    CHECKIN_ACCESS = 41
    YEAR_5_GENERAL = 42
    TYPE_ACT35SIDE = 43
    VEC_BREAK = 44
    TYPE_ACT36SIDE = 45
    ENUM = 46


class enum__Torappu_StageType(object):
    MAIN = 0
    DAILY = 1
    TRAINING = 2
    ACTIVITY = 3
    GUIDE = 4
    SUB = 5
    CAMPAIGN = 6
    SPECIAL_STORY = 7
    HANDBOOK_BATTLE = 8
    CLIMB_TOWER = 9
    ENUM = 10


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class enum__Torappu_StageData_PerformanceStageFlag(object):
    NORMAL_STAGE = 0
    PERFORMANCE_STAGE = 1


class enum__Torappu_StageDiffGroup(object):
    NONE = 0
    EASY = 1
    NORMAL = 2
    TOUGH = 4
    ALL = 7


class enum__Torappu_PlayerBattleRank(object):
    ERR_ZERO = 0
    FAIL = 1
    PASS = 2
    COMPLETE = 3


class enum__Torappu_AppearanceStyle(object):
    MAIN_NORMAL = 0
    MAIN_PREDEFINED = 1
    SUB = 2
    TRAINING = 3
    HIGH_DIFFICULTY = 4
    MIST_OPS = 5
    SPECIAL_STORY = 6


class enum__Torappu_StageData_SpecialStageUnlockProgressType(object):
    ONCE = 0
    PROGRESS = 1


class enum__Torappu_Act17sideData_NodeType(object):
    LANDMARK = 0
    STORY = 1
    BATTLE = 2
    ENDING = 3
    TREASURE = 4
    EVENT = 5
    TECH = 6
    CHOICE = 7


class enum__Torappu_Act17sideData_TrackPointType(object):
    NONE = 0
    MAIN = 1
    SUB = 2


class enum__Torappu_Act17sideData_TreasureType(object):
    SMALL = 0
    SPECIAL = 1


class enum__Torappu_ActArchiveType(object):
    NONE = 0
    TIMELINE = 1
    MUSIC = 2
    PIC = 3
    AVG = 4
    STORY = 5
    NEWS = 6
    BUFF = 7
    RELIC = 8
    CAPSULE = 9
    TRAP = 10
    CHAT = 11
    LANDMARK = 12
    LOG = 13
    ACTIVITY_ENTRY = 14
    DYNAMIC_MUSIC = 15
    DYNAMIC_PIC = 16
    ENDBOOK = 17
    DYNAMIC_STORY = 18
    TOTEM = 19
    CHAOS = 20
    CHALLENGE_BOOK = 21
    ACHIEVEMENT = 22
    QUEST = 23
    FRAGMENT = 24
    DISASTER = 25


class enum__Torappu_Act17sideData_ArchiveItemUnlockCondition(object):
    NONE = 0
    STAGE = 1
    NODE = 2


class enum__Torappu_Act17sideData_ArchiveItemStageUnlockParam(object):
    NONE = 0
    PLAYED = 1
    PASS = 2
    COMPLETE = 3


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 1
    SIDE_B = 2
    NONE = 3


class enum__Torappu_Act17sideData_ChapterIconType(object):
    NORMAL = 0
    EX = 1
    HARD = 2


class enum__Torappu_Act25SideData_Act25sideTechType(object):
    TECH_1 = 0
    TECH_2 = 1
    TECH_3 = 2
    TECH_4 = 3
    TECH_NUM = 4


class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageValidInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageValidInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageValidInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageValidInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageValidInfo
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageValidInfo
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageValidInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_StageValidInfoAddStartTs(builder, startTs):
    builder.PrependInt64Slot(0, startTs, 0)

def clz_Torappu_StageValidInfoAddEndTs(builder, endTs):
    builder.PrependInt64Slot(1, endTs, 0)

def clz_Torappu_StageValidInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_StageValidInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_StageValidInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_StageValidInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_StageValidInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_StageValidInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_StageValidInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageValidInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_StageValidInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_StageValidInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_StageValidInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_StageValidInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_WeightItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_WeightItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(5)

def clz_Torappu_WeightItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_WeightItemBundleAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_WeightItemBundleAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_WeightItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_WeightItemBundleAddWeight(builder, weight):
    builder.PrependInt32Slot(4, weight, 0)

def clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class list_clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_clz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_clz_Torappu_WeightItemBundle
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # list_clz_Torappu_WeightItemBundle
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_clz_Torappu_WeightItemBundle
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(1)

def list_clz_Torappu_WeightItemBundleAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_clz_Torappu_WeightItemBundleStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_StageData_DisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_StageData_DisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_StageData_DisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayDetailRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayDetailRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayDetailRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayDetailRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayDetailRewards
    def OccPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayDetailRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayDetailRewardsStart(builder):
    builder.StartObject(4)

def clz_Torappu_StageData_DisplayDetailRewardsAddOccPercent(builder, occPercent):
    builder.PrependInt32Slot(0, occPercent, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(3, dropType, 0)

def clz_Torappu_StageData_DisplayDetailRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_StageDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_StageDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_StageDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_StageDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def PassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def PassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def PassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_StageData_StageDropInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_StageData_StageDropInfoAddFirstPassRewards(builder, firstPassRewards):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firstPassRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartFirstPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddFirstCompleteRewards(builder, firstCompleteRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstCompleteRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartFirstCompleteRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddPassRewards(builder, passRewards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(passRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddCompleteRewards(builder, completeRewards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(completeRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartCompleteRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddDisplayRewards(builder, displayRewards):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(displayRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartDisplayRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddDisplayDetailRewards(builder, displayDetailRewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(displayDetailRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartDisplayDetailRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroStageOverrideInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroStageOverrideInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroStageOverrideInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroStageOverrideInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroStageOverrideInfo
    def DropInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageData_StageDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageOverrideInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroStageOverrideInfo
    def ApCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def ApFailReturn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def ExpGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def GoldGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def PassFavor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def CompleteFavor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageOverrideInfo
    def CanContinuousBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RetroStageOverrideInfoStart(builder):
    builder.StartObject(9)

def clz_Torappu_RetroStageOverrideInfoAddDropInfo(builder, dropInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dropInfo), 0)

def clz_Torappu_RetroStageOverrideInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_RetroStageOverrideInfoAddApCost(builder, apCost):
    builder.PrependInt32Slot(2, apCost, 0)

def clz_Torappu_RetroStageOverrideInfoAddApFailReturn(builder, apFailReturn):
    builder.PrependInt32Slot(3, apFailReturn, 0)

def clz_Torappu_RetroStageOverrideInfoAddExpGain(builder, expGain):
    builder.PrependInt32Slot(4, expGain, 0)

def clz_Torappu_RetroStageOverrideInfoAddGoldGain(builder, goldGain):
    builder.PrependInt32Slot(5, goldGain, 0)

def clz_Torappu_RetroStageOverrideInfoAddPassFavor(builder, passFavor):
    builder.PrependInt32Slot(6, passFavor, 0)

def clz_Torappu_RetroStageOverrideInfoAddCompleteFavor(builder, completeFavor):
    builder.PrependInt32Slot(7, completeFavor, 0)

def clz_Torappu_RetroStageOverrideInfoAddCanContinuousBattle(builder, canContinuousBattle):
    builder.PrependBoolSlot(8, canContinuousBattle, 0)

def clz_Torappu_RetroStageOverrideInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RetroStageOverrideInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RetroStageOverrideInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RetroStageOverrideInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RetroStageOverrideInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RetroStageOverrideInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RetroStageOverrideInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RetroStageOverrideInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RetroStageOverrideInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RetroStageOverrideInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RetroStageOverrideInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RetroStageOverrideInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroActData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroActData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroActData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroActData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroActData
    def RetroId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroActData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroActData
    def LinkedActId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RetroActData
    def LinkedActIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroActData
    def LinkedActIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RetroActData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroActData
    def TrailStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroActData
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroActData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroActData
    def Detail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroActData
    def HaveTrail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RetroActData
    def CustomActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroActData
    def CustomActType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroActData
    def IsRecommend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RetroActData
    def RecommendTagRemoveStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RetroActDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_RetroActDataAddRetroId(builder, retroId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(retroId), 0)

def clz_Torappu_RetroActDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_RetroActDataAddLinkedActId(builder, linkedActId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkedActId), 0)

def clz_Torappu_RetroActDataStartLinkedActIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroActDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(3, startTime, 0)

def clz_Torappu_RetroActDataAddTrailStartTime(builder, trailStartTime):
    builder.PrependInt64Slot(4, trailStartTime, 0)

def clz_Torappu_RetroActDataAddIndex(builder, index):
    builder.PrependInt32Slot(5, index, 0)

def clz_Torappu_RetroActDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RetroActDataAddDetail(builder, detail):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(detail), 0)

def clz_Torappu_RetroActDataAddHaveTrail(builder, haveTrail):
    builder.PrependBoolSlot(8, haveTrail, 0)

def clz_Torappu_RetroActDataAddCustomActId(builder, customActId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(customActId), 0)

def clz_Torappu_RetroActDataAddCustomActType(builder, customActType):
    builder.PrependInt32Slot(10, customActType, 0)

def clz_Torappu_RetroActDataAddIsRecommend(builder, isRecommend):
    builder.PrependBoolSlot(11, isRecommend, 0)

def clz_Torappu_RetroActDataAddRecommendTagRemoveStage(builder, recommendTagRemoveStage):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(recommendTagRemoveStage), 0)

def clz_Torappu_RetroActDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RetroActData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RetroActData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RetroActData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RetroActData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RetroActData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RetroActData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RetroActData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RetroActDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RetroActDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RetroActDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RetroActDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroTrailRewardItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroTrailRewardItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroTrailRewardItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroTrailRewardItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroTrailRewardItem
    def TrailRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroTrailRewardItem
    def StarCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroTrailRewardItem
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RetroTrailRewardItemStart(builder):
    builder.StartObject(3)

def clz_Torappu_RetroTrailRewardItemAddTrailRewardId(builder, trailRewardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trailRewardId), 0)

def clz_Torappu_RetroTrailRewardItemAddStarCount(builder, starCount):
    builder.PrependInt32Slot(1, starCount, 0)

def clz_Torappu_RetroTrailRewardItemAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_RetroTrailRewardItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroTrailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroTrailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroTrailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroTrailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroTrailData
    def RetroId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroTrailData
    def TrailStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroTrailData
    def TrailRewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RetroTrailRewardItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroTrailData
    def TrailRewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroTrailData
    def TrailRewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RetroTrailData
    def StageList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RetroTrailData
    def StageListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroTrailData
    def StageListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RetroTrailData
    def RelatedChar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroTrailData
    def RelatedFullPotentialItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroTrailData
    def ThemeColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroTrailData
    def FullPotentialItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RetroTrailDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_RetroTrailDataAddRetroId(builder, retroId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(retroId), 0)

def clz_Torappu_RetroTrailDataAddTrailStartTime(builder, trailStartTime):
    builder.PrependInt64Slot(1, trailStartTime, 0)

def clz_Torappu_RetroTrailDataAddTrailRewardList(builder, trailRewardList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trailRewardList), 0)

def clz_Torappu_RetroTrailDataStartTrailRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroTrailDataAddStageList(builder, stageList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageList), 0)

def clz_Torappu_RetroTrailDataStartStageListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroTrailDataAddRelatedChar(builder, relatedChar):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(relatedChar), 0)

def clz_Torappu_RetroTrailDataAddRelatedFullPotentialItemId(builder, relatedFullPotentialItemId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(relatedFullPotentialItemId), 0)

def clz_Torappu_RetroTrailDataAddThemeColor(builder, themeColor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(themeColor), 0)

def clz_Torappu_RetroTrailDataAddFullPotentialItemId(builder, fullPotentialItemId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(fullPotentialItemId), 0)

def clz_Torappu_RetroTrailDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RetroTrailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RetroTrailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RetroTrailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RetroTrailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RetroTrailData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RetroTrailData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RetroTrailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RetroTrailDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RetroTrailDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RetroTrailDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RetroTrailDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_ConditionDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_ConditionDesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_ConditionDesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_ConditionDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_ConditionDesc
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_ConditionDesc
    def CompleteState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_ConditionDescStart(builder):
    builder.StartObject(2)

def clz_Torappu_StageData_ConditionDescAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_StageData_ConditionDescAddCompleteState(builder, completeState):
    builder.PrependInt32Slot(1, completeState, 0)

def clz_Torappu_StageData_ConditionDescEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_ExtraConditionDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_ExtraConditionDesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_ExtraConditionDesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_ExtraConditionDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_ExtraConditionDesc
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_ExtraConditionDesc
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_ExtraConditionDesc
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_StageData_ExtraConditionDesc
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_ExtraConditionDesc
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_StageData_ExtraConditionDescStart(builder):
    builder.StartObject(3)

def clz_Torappu_StageData_ExtraConditionDescAddIndex(builder, index):
    builder.PrependInt32Slot(0, index, 0)

def clz_Torappu_StageData_ExtraConditionDescAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_StageData_ExtraConditionDescAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_StageData_ExtraConditionDescStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_ExtraConditionDescEnd(builder):
    return builder.EndObject()



class dict__int__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__int__stringStart(builder):
    builder.StartObject(2)

def dict__int__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_SpecialProgressInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_SpecialProgressInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_SpecialProgressInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_SpecialProgressInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_SpecialProgressInfo
    def ProgressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_SpecialProgressInfo
    def DescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_SpecialProgressInfo
    def DescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_SpecialProgressInfo
    def DescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_StageData_SpecialProgressInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_StageData_SpecialProgressInfoAddProgressType(builder, progressType):
    builder.PrependInt32Slot(0, progressType, 0)

def clz_Torappu_StageData_SpecialProgressInfoAddDescList(builder, descList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(descList), 0)

def clz_Torappu_StageData_SpecialProgressInfoStartDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_SpecialProgressInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_SpecialStoryInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_SpecialStoryInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_SpecialStoryInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_SpecialStoryInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_SpecialStoryInfo
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_SpecialStoryInfo
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_SpecialStoryInfo
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_SpecialStoryInfo
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_StageData_SpecialStoryInfo
    def ProgressInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageData_SpecialProgressInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_SpecialStoryInfo
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_StageData_SpecialStoryInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_StageData_SpecialStoryInfoAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_StageData_SpecialStoryInfoAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_StageData_SpecialStoryInfoStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_SpecialStoryInfoAddProgressInfo(builder, progressInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(progressInfo), 0)

def clz_Torappu_StageData_SpecialStoryInfoAddImageId(builder, imageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imageId), 0)

def clz_Torappu_StageData_SpecialStoryInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData
    def StageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def PerformanceStageFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def DiffGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def UnlockCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_ConditionDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData
    def UnlockConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData
    def UnlockConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_StageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def HardStagedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def DangerLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def DangerPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_StageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def CanPractice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def CanBattleReplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def ApCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def ApFailReturn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def EtItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def EtCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def EtFailReturn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def EtButtonStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def ApProtectTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def DiamondOnceDrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def PracticeTicketCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def DailyStageDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def ExpGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def GoldGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def LoseExpGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def LoseGoldGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def PassFavor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def CompleteFavor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def SlProgress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def DisplayMainItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def HilightMark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def BossMark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def IsPredefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def IsHardPredefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def IsSkillSelectablePredefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def IsStoryOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def AppearanceStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData
    def StageDropInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageData_StageDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData
    def CanUseCharm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def CanUseTech(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def CanUseTrapTool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def CanUseBattlePerformance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def CanContinuousBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def StartButtonOverrideId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def IsStagePatch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_StageData
    def MainStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData
    def ExtraCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_ExtraConditionDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData
    def ExtraConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData
    def ExtraConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        return o == 0

    # clz_Torappu_StageData
    def ExtraInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_SpecialStoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData
    def ExtraInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData
    def ExtraInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

def clz_Torappu_StageDataStart(builder):
    builder.StartObject(53)

def clz_Torappu_StageDataAddStageType(builder, stageType):
    builder.PrependInt32Slot(0, stageType, 0)

def clz_Torappu_StageDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(1, difficulty, 0)

def clz_Torappu_StageDataAddPerformanceStageFlag(builder, performanceStageFlag):
    builder.PrependInt32Slot(2, performanceStageFlag, 0)

def clz_Torappu_StageDataAddDiffGroup(builder, diffGroup):
    builder.PrependInt32Slot(3, diffGroup, 0)

def clz_Torappu_StageDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_StageDataStartUnlockConditionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_StageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_StageDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_StageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_StageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_StageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_StageDataAddHardStagedId(builder, hardStagedId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hardStagedId), 0)

def clz_Torappu_StageDataAddDangerLevel(builder, dangerLevel):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(dangerLevel), 0)

def clz_Torappu_StageDataAddDangerPoint(builder, dangerPoint):
    builder.PrependFloat32Slot(13, dangerPoint, 0.0)

def clz_Torappu_StageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_StageDataAddCanPractice(builder, canPractice):
    builder.PrependBoolSlot(15, canPractice, 0)

def clz_Torappu_StageDataAddCanBattleReplay(builder, canBattleReplay):
    builder.PrependBoolSlot(16, canBattleReplay, 0)

def clz_Torappu_StageDataAddApCost(builder, apCost):
    builder.PrependInt32Slot(17, apCost, 0)

def clz_Torappu_StageDataAddApFailReturn(builder, apFailReturn):
    builder.PrependInt32Slot(18, apFailReturn, 0)

def clz_Torappu_StageDataAddEtItemId(builder, etItemId):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(etItemId), 0)

def clz_Torappu_StageDataAddEtCost(builder, etCost):
    builder.PrependInt32Slot(20, etCost, 0)

def clz_Torappu_StageDataAddEtFailReturn(builder, etFailReturn):
    builder.PrependInt32Slot(21, etFailReturn, 0)

def clz_Torappu_StageDataAddEtButtonStyle(builder, etButtonStyle):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(etButtonStyle), 0)

def clz_Torappu_StageDataAddApProtectTimes(builder, apProtectTimes):
    builder.PrependInt32Slot(23, apProtectTimes, 0)

def clz_Torappu_StageDataAddDiamondOnceDrop(builder, diamondOnceDrop):
    builder.PrependInt32Slot(24, diamondOnceDrop, 0)

def clz_Torappu_StageDataAddPracticeTicketCost(builder, practiceTicketCost):
    builder.PrependInt32Slot(25, practiceTicketCost, 0)

def clz_Torappu_StageDataAddDailyStageDifficulty(builder, dailyStageDifficulty):
    builder.PrependInt32Slot(26, dailyStageDifficulty, 0)

def clz_Torappu_StageDataAddExpGain(builder, expGain):
    builder.PrependInt32Slot(27, expGain, 0)

def clz_Torappu_StageDataAddGoldGain(builder, goldGain):
    builder.PrependInt32Slot(28, goldGain, 0)

def clz_Torappu_StageDataAddLoseExpGain(builder, loseExpGain):
    builder.PrependInt32Slot(29, loseExpGain, 0)

def clz_Torappu_StageDataAddLoseGoldGain(builder, loseGoldGain):
    builder.PrependInt32Slot(30, loseGoldGain, 0)

def clz_Torappu_StageDataAddPassFavor(builder, passFavor):
    builder.PrependInt32Slot(31, passFavor, 0)

def clz_Torappu_StageDataAddCompleteFavor(builder, completeFavor):
    builder.PrependInt32Slot(32, completeFavor, 0)

def clz_Torappu_StageDataAddSlProgress(builder, slProgress):
    builder.PrependInt32Slot(33, slProgress, 0)

def clz_Torappu_StageDataAddDisplayMainItem(builder, displayMainItem):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(displayMainItem), 0)

def clz_Torappu_StageDataAddHilightMark(builder, hilightMark):
    builder.PrependBoolSlot(35, hilightMark, 0)

def clz_Torappu_StageDataAddBossMark(builder, bossMark):
    builder.PrependBoolSlot(36, bossMark, 0)

def clz_Torappu_StageDataAddIsPredefined(builder, isPredefined):
    builder.PrependBoolSlot(37, isPredefined, 0)

def clz_Torappu_StageDataAddIsHardPredefined(builder, isHardPredefined):
    builder.PrependBoolSlot(38, isHardPredefined, 0)

def clz_Torappu_StageDataAddIsSkillSelectablePredefined(builder, isSkillSelectablePredefined):
    builder.PrependBoolSlot(39, isSkillSelectablePredefined, 0)

def clz_Torappu_StageDataAddIsStoryOnly(builder, isStoryOnly):
    builder.PrependBoolSlot(40, isStoryOnly, 0)

def clz_Torappu_StageDataAddAppearanceStyle(builder, appearanceStyle):
    builder.PrependInt32Slot(41, appearanceStyle, 0)

def clz_Torappu_StageDataAddStageDropInfo(builder, stageDropInfo):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(stageDropInfo), 0)

def clz_Torappu_StageDataAddCanUseCharm(builder, canUseCharm):
    builder.PrependBoolSlot(43, canUseCharm, 0)

def clz_Torappu_StageDataAddCanUseTech(builder, canUseTech):
    builder.PrependBoolSlot(44, canUseTech, 0)

def clz_Torappu_StageDataAddCanUseTrapTool(builder, canUseTrapTool):
    builder.PrependBoolSlot(45, canUseTrapTool, 0)

def clz_Torappu_StageDataAddCanUseBattlePerformance(builder, canUseBattlePerformance):
    builder.PrependBoolSlot(46, canUseBattlePerformance, 0)

def clz_Torappu_StageDataAddCanContinuousBattle(builder, canContinuousBattle):
    builder.PrependBoolSlot(47, canContinuousBattle, 0)

def clz_Torappu_StageDataAddStartButtonOverrideId(builder, startButtonOverrideId):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(startButtonOverrideId), 0)

def clz_Torappu_StageDataAddIsStagePatch(builder, isStagePatch):
    builder.PrependBoolSlot(49, isStagePatch, 0)

def clz_Torappu_StageDataAddMainStageId(builder, mainStageId):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(mainStageId), 0)

def clz_Torappu_StageDataAddExtraCondition(builder, extraCondition):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(extraCondition), 0)

def clz_Torappu_StageDataStartExtraConditionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageDataAddExtraInfo(builder, extraInfo):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(extraInfo), 0)

def clz_Torappu_StageDataStartExtraInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_StageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_StageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_StageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_StageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_StageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_StageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_StageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_StageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_StageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_StageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroTrailRuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroTrailRuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroTrailRuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroTrailRuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroTrailRuleData
    def Title(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RetroTrailRuleData
    def TitleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroTrailRuleData
    def TitleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RetroTrailRuleData
    def Desc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RetroTrailRuleData
    def DescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroTrailRuleData
    def DescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RetroTrailRuleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RetroTrailRuleDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_RetroTrailRuleDataStartTitleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroTrailRuleDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RetroTrailRuleDataStartDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroTrailRuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_PlaceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_PlaceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_PlaceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_PlaceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_PlaceData
    def PlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def PlaceDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def LockEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_PlaceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_PlaceDataAddPlaceId(builder, placeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(placeId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddPlaceDesc(builder, placeDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(placeDesc), 0)

def clz_Torappu_Act17sideData_PlaceDataAddLockEventId(builder, lockEventId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lockEventId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddVisibleCondType(builder, visibleCondType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(visibleCondType), 0)

def clz_Torappu_Act17sideData_PlaceDataAddVisibleParams(builder, visibleParams):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(visibleParams), 0)

def clz_Torappu_Act17sideData_PlaceDataStartVisibleParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_PlaceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_PlaceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_PlaceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_PlaceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_PlaceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_PlaceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_PlaceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_PlaceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_PlaceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_NodeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_NodeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_NodeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_NodeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_NodeInfoData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def PlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def IsPointPlace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_NodeInfoData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def TrackPointType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_NodeInfoDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_NodeInfoDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddPlaceId(builder, placeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(placeId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddIsPointPlace(builder, isPointPlace):
    builder.PrependBoolSlot(4, isPointPlace, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddTrackPointType(builder, trackPointType):
    builder.PrependInt32Slot(6, trackPointType, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddUnlockCondType(builder, unlockCondType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondType), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddUnlockParams(builder, unlockParams):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParams), 0)

def clz_Torappu_Act17sideData_NodeInfoDataStartUnlockParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_NodeInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_NodeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_NodeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_NodeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_NodeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_LandmarkNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_LandmarkNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_LandmarkNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_LandmarkNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_LandmarkNodeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkId(builder, landmarkId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkId), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkName(builder, landmarkName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkName), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkPic(builder, landmarkPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkPic), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkSpecialPic(builder, landmarkSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkSpecialPic), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkDesList(builder, landmarkDesList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkDesList), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataStartLandmarkDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_LandmarkNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_LandmarkNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_LandmarkNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_LandmarkNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_LandmarkNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_StoryNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_StoryNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_StoryNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_StoryNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_StoryNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_Act17sideData_StoryNodeDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act17sideData_StoryNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryKey(builder, storyKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyKey), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryName(builder, storyName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyName), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryPic(builder, storyPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(storyPic), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryDesList(builder, storyDesList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(storyDesList), 0)

def clz_Torappu_Act17sideData_StoryNodeDataStartStoryDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_StoryNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_StoryNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_StoryNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_StoryNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_StoryNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_BattleNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_BattleNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_BattleNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_BattleNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_BattleNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_BattleNodeData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_BattleNodeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act17sideData_BattleNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_BattleNodeDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act17sideData_BattleNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_BattleNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_BattleNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_BattleNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_BattleNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TreasureNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TreasureNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TreasureNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TreasureNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TreasureNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasurePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act17sideData_TreasureNodeDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act17sideData_TreasureNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureId(builder, treasureId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(treasureId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureName(builder, treasureName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(treasureName), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasurePic(builder, treasurePic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(treasurePic), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureSpecialPic(builder, treasureSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(treasureSpecialPic), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureDesList(builder, treasureDesList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(treasureDesList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartTreasureDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureType(builder, treasureType):
    builder.PrependInt32Slot(10, treasureType, 0)

def clz_Torappu_Act17sideData_TreasureNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TreasureNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TreasureNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TreasureNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TreasureNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_EventNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_EventNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_EventNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_EventNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_EventNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventNodeData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_EventNodeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act17sideData_EventNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_EventNodeDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_EventNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_EventNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_EventNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_EventNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_EventNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_EventNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_EventNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechTreeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_TechNodeDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_TechNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechTreeName(builder, techTreeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeName), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechPic(builder, techPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(techPic), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechSpecialPic(builder, techSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(techSpecialPic), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechDesList(builder, techDesList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(techDesList), 0)

def clz_Torappu_Act17sideData_TechNodeDataStartTechDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TechNodeDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_Act17sideData_TechNodeDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TechNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ChoiceNodeOptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ChoiceNodeOptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ChoiceNodeOptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def CanRepeat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def Des(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddCanRepeat(builder, canRepeat):
    builder.PrependBoolSlot(0, canRepeat, 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddDes(builder, des):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(des), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockDes(builder, unlockDes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDes), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockCondType(builder, unlockCondType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondType), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockParams(builder, unlockParams):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParams), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataStartUnlockParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ChoiceNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ChoiceNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ChoiceNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ChoiceNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoicePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def IsDisposable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def CancelDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act17sideData_ChoiceNodeOptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_ChoiceNodeDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoicePic(builder, choicePic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(choicePic), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddIsDisposable(builder, isDisposable):
    builder.PrependBoolSlot(2, isDisposable, 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceSpecialPic(builder, choiceSpecialPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(choiceSpecialPic), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceName(builder, choiceName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(choiceName), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceDesList(builder, choiceDesList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(choiceDesList), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataStartChoiceDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddCancelDes(builder, cancelDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cancelDes), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceNum(builder, choiceNum):
    builder.PrependInt32Slot(7, choiceNum, 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddOptionList(builder, optionList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(optionList), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataStartOptionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_ChoiceNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_ChoiceNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_ChoiceNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ChoiceNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_EventData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_EventData
    def EventDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_EventData
    def EventDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act17sideData_EventDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_EventDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_EventDataAddEventPic(builder, eventPic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventPic), 0)

def clz_Torappu_Act17sideData_EventDataAddEventSpecialPic(builder, eventSpecialPic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eventSpecialPic), 0)

def clz_Torappu_Act17sideData_EventDataAddEventTitle(builder, eventTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(eventTitle), 0)

def clz_Torappu_Act17sideData_EventDataAddEventDesList(builder, eventDesList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eventDesList), 0)

def clz_Torappu_Act17sideData_EventDataStartEventDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_EventDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_EventData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_EventData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_EventDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_EventDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_EventDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_EventDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def StageParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependInt32Slot(2, unlockCondition, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddStageParam(builder, stageParam):
    builder.PrependInt32Slot(4, stageParam, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechTreeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechTreeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechTreeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechTreeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechTreeData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_TechTreeData
    def TechTreeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def DefaultBranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def LockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_TechTreeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_TechTreeDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act17sideData_TechTreeDataAddTechTreeName(builder, techTreeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeName), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddDefaultBranchId(builder, defaultBranchId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultBranchId), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddLockDes(builder, lockDes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lockDes), 0)

def clz_Torappu_Act17sideData_TechTreeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechTreeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechTreeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechTreeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechTreeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechTreeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData_Selector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData_Selector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData_Selector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData_Selector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData_Selector
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def CharIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def MapTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_RuneData_SelectorStart(builder):
    builder.StartObject(14)

def clz_Torappu_RuneData_SelectorAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(0, professionMask, 0)

def clz_Torappu_RuneData_SelectorAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(1, buildableMask, 0)

def clz_Torappu_RuneData_SelectorAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(2, playerSideMask, 0)

def clz_Torappu_RuneData_SelectorAddCharIdFilter(builder, charIdFilter):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(charIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartCharIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdFilter(builder, enemyIdFilter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdExcludeFilter(builder, enemyIdExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyLevelTypeFilter(builder, enemyLevelTypeFilter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyLevelTypeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyLevelTypeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSkillIdFilter(builder, skillIdFilter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skillIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartSkillIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddTileKeyFilter(builder, tileKeyFilter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tileKeyFilter), 0)

def clz_Torappu_RuneData_SelectorStartTileKeyFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddGroupTagFilter(builder, groupTagFilter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groupTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartGroupTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagFilter(builder, filterTagFilter):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagExcludeFilter(builder, filterTagExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSubProfessionExcludeFilter(builder, subProfessionExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartSubProfessionExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddMapTagFilter(builder, mapTagFilter):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mapTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartMapTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneData
    def Selector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneData_Selector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RuneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RuneDataAddSelector(builder, selector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selector), 0)

def clz_Torappu_RuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_PackedRuneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Points(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RuneTable_PackedRuneData
    def MutexGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RuneTable_PackedRuneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddPoints(builder, points):
    builder.PrependFloat32Slot(1, points, 0.0)

def clz_Torappu_RuneTable_PackedRuneDataAddMutexGroupKey(builder, mutexGroupKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mutexGroupKey), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_PackedRuneDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechTreeBranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechTreeBranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechTreeBranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechTreeBranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act17sideData_TechTreeBranchDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchId(builder, techTreeBranchId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchId), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchName(builder, techTreeBranchName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchName), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchIcon(builder, techTreeBranchIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchIcon), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchDesc(builder, techTreeBranchDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchDesc), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechTreeBranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechTreeBranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechTreeBranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechTreeBranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_MainlineChapterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_MainlineChapterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_MainlineChapterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_MainlineChapterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_MainlineChapterData
    def UnlockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_MainlineChapterDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterDes(builder, chapterDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chapterDes), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterIcon(builder, chapterIcon):
    builder.PrependInt32Slot(2, chapterIcon, 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddUnlockDes(builder, unlockDes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDes), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_MainlineChapterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_MainlineChapterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_MainlineChapterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_MainlineChapterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_MainlineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_MainlineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_MainlineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_MainlineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_MainlineData
    def MainlineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_MainlineData
    def MissionSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def MainlineDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def FocusNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_MainlineDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act17sideData_MainlineDataAddMainlineId(builder, mainlineId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act17sideData_MainlineDataAddMissionSort(builder, missionSort):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionSort), 0)

def clz_Torappu_Act17sideData_MainlineDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddMainlineDes(builder, mainlineDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineDes), 0)

def clz_Torappu_Act17sideData_MainlineDataAddFocusNodeId(builder, focusNodeId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(focusNodeId), 0)

def clz_Torappu_Act17sideData_MainlineDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_MainlineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_MainlineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_MainlineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_MainlineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_MainlineDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_MainlineDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ZoneData
    def UnlockPlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ZoneData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ZoneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act17sideData_ZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_ZoneDataAddUnlockPlaceId(builder, unlockPlaceId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockPlaceId), 0)

def clz_Torappu_Act17sideData_ZoneDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act17sideData_ZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ConstData
    def TechTreeUnlockEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act17sideData_ConstDataAddTechTreeUnlockEventId(builder, techTreeUnlockEventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeUnlockEventId), 0)

def clz_Torappu_Act17sideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData
    def PlaceDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_PlaceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def PlaceDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def PlaceDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act17sideData
    def NodeInfoDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_NodeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def NodeInfoDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def NodeInfoDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_LandmarkNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act17sideData
    def StoryNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_StoryNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def StoryNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def StoryNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act17sideData
    def BattleNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_BattleNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def BattleNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def BattleNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TreasureNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act17sideData
    def EventNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_EventNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def EventNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def EventNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_ChoiceNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act17sideData
    def EventDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def EventDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def EventDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechTreeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechTreeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechTreeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechTreeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechTreeBranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_MainlineChapterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act17sideData
    def MainlineDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_MainlineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def MainlineDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def MainlineDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_Act17sideData
    def ZoneDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act17sideData_ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ZoneDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ZoneDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_Act17sideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act17sideDataStart(builder):
    builder.StartObject(17)

def clz_Torappu_Act17sideDataAddPlaceDataMap(builder, placeDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(placeDataMap), 0)

def clz_Torappu_Act17sideDataStartPlaceDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddNodeInfoDataMap(builder, nodeInfoDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeInfoDataMap), 0)

def clz_Torappu_Act17sideDataStartNodeInfoDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddLandmarkNodeDataMap(builder, landmarkNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartLandmarkNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddStoryNodeDataMap(builder, storyNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartStoryNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddBattleNodeDataMap(builder, battleNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(battleNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartBattleNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTreasureNodeDataMap(builder, treasureNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(treasureNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartTreasureNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddEventNodeDataMap(builder, eventNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(eventNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartEventNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechNodeDataMap(builder, techNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(techNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartTechNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddChoiceNodeDataMap(builder, choiceNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(choiceNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartChoiceNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddEventDataMap(builder, eventDataMap):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(eventDataMap), 0)

def clz_Torappu_Act17sideDataStartEventDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddArchiveItemUnlockDataMap(builder, archiveItemUnlockDataMap):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(archiveItemUnlockDataMap), 0)

def clz_Torappu_Act17sideDataStartArchiveItemUnlockDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechTreeDataMap(builder, techTreeDataMap):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeDataMap), 0)

def clz_Torappu_Act17sideDataStartTechTreeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechTreeBranchDataMap(builder, techTreeBranchDataMap):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchDataMap), 0)

def clz_Torappu_Act17sideDataStartTechTreeBranchDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddMainlineChapterDataMap(builder, mainlineChapterDataMap):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineChapterDataMap), 0)

def clz_Torappu_Act17sideDataStartMainlineChapterDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddMainlineDataMap(builder, mainlineDataMap):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineDataMap), 0)

def clz_Torappu_Act17sideDataStartMainlineDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddZoneDataList(builder, zoneDataList):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDataList), 0)

def clz_Torappu_Act17sideDataStartZoneDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act17sideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_BattlePerformanceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_BattlePerformanceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_BattlePerformanceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_BattlePerformanceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemTechType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act25SideData_BattlePerformanceDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemIcon(builder, itemIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemIcon), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemTechType(builder, itemTechType):
    builder.PrependInt32Slot(5, itemTechType, 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_BattlePerformanceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_BattlePerformanceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_BattlePerformanceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_BattlePerformanceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityCustomData_Act25sideCustomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityCustomData_Act25sideCustomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityCustomData_Act25sideCustomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityCustomData_Act25sideCustomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityCustomData_Act25sideCustomData
    def BattlePerformanceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_BattlePerformanceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCustomData_Act25sideCustomData
    def BattlePerformanceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCustomData_Act25sideCustomData
    def BattlePerformanceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityCustomData_Act25sideCustomDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityCustomData_Act25sideCustomDataAddBattlePerformanceData(builder, battlePerformanceData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battlePerformanceData), 0)

def clz_Torappu_ActivityCustomData_Act25sideCustomDataStartBattlePerformanceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCustomData_Act25sideCustomDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityCustomData_Act25sideCustomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act20SideData_ResidentCartData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act20SideData_ResidentCartData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act20SideData_ResidentCartData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act20SideData_ResidentCartData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act20SideData_ResidentCartData
    def ResidentPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act20SideData_ResidentCartDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act20SideData_ResidentCartDataAddResidentPic(builder, residentPic):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(residentPic), 0)

def clz_Torappu_Act20SideData_ResidentCartDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act20SideData_ResidentCartData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act20SideData_ResidentCartData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act20SideData_ResidentCartData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act20SideData_ResidentCartData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act20SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act20SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act20SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act20SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act20SideData
    def ResidentCartDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act20SideData_ResidentCartData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act20SideData
    def ResidentCartDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act20SideData
    def ResidentCartDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act20SideDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act20SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act20SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act20SideDataAddResidentCartDatas(builder, residentCartDatas):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(residentCartDatas), 0)

def clz_Torappu_Act20SideDataStartResidentCartDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act20SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act20SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act20SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act20SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act20SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act20SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act20SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act20SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act20SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act20SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act20SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act20SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData_ZoneAddtionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData_ZoneAddtionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData_ZoneAddtionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData_ZoneAddtionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def StageUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def EntryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act21SideData_ZoneAddtionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddStageUnlockText(builder, stageUnlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageUnlockText), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddEntryId(builder, entryId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entryId), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act21SideData_ZoneAddtionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act21SideData_ZoneAddtionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act21SideData_ZoneAddtionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData_ZoneAddtionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData_ConstData
    def LineConnectZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act21SideData_ConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act21SideData_ConstDataAddLineConnectZone(builder, lineConnectZone):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lineConnectZone), 0)

def clz_Torappu_Act21SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act21SideData_ZoneAddtionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act21SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act21SideDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act21SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act21SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act21SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act21SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act21SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act21SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act21SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act21SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act21SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act21SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act21SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act21SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act21SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act21SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityCustomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityCustomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityCustomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityCustomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityCustomData
    def TypeAct17Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCustomData
    def TypeAct17SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCustomData
    def TypeAct17SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityCustomData
    def TypeAct25Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityCustomData_Act25sideCustomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCustomData
    def TypeAct25SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCustomData
    def TypeAct25SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityCustomData
    def TypeAct20Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act20SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCustomData
    def TypeAct20SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCustomData
    def TypeAct20SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityCustomData
    def TypeAct21Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act21SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCustomData
    def TypeAct21SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCustomData
    def TypeAct21SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ActivityCustomDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityCustomDataAddTypeAct17Side(builder, typeAct17Side):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct17Side), 0)

def clz_Torappu_ActivityCustomDataStartTypeAct17SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCustomDataAddTypeAct25Side(builder, typeAct25Side):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct25Side), 0)

def clz_Torappu_ActivityCustomDataStartTypeAct25SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCustomDataAddTypeAct20Side(builder, typeAct20Side):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct20Side), 0)

def clz_Torappu_ActivityCustomDataStartTypeAct20SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCustomDataAddTypeAct21Side(builder, typeAct21Side):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct21Side), 0)

def clz_Torappu_ActivityCustomDataStartTypeAct21SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCustomDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RetroStageTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RetroStageTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RetroStageTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RetroStageTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RetroStageTable
    def ZoneToRetro(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def ZoneToRetroLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def ZoneToRetroIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RetroStageTable
    def StageValidInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_StageValidInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def StageValidInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def StageValidInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RetroStageTable
    def Stages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RetroStageOverrideInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def StagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def StagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RetroStageTable
    def RetroActList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RetroActData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def RetroActListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroActListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RetroStageTable
    def RetroTrailList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RetroTrailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def RetroTrailListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroTrailListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RetroStageTable
    def StageList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_StageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def StageListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RetroStageTable
    def StageListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RetroStageTable
    def RuleData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RetroTrailRuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def CustomData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityCustomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RetroStageTable
    def InitRetroCoin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroCoinPerWeek(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroCoinMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroUnlockCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RetroStageTable
    def RetroDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RetroStageTable
    def RetroPreShowTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RetroStageTableStart(builder):
    builder.StartObject(14)

def clz_Torappu_RetroStageTableAddZoneToRetro(builder, zoneToRetro):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneToRetro), 0)

def clz_Torappu_RetroStageTableStartZoneToRetroVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddStageValidInfo(builder, stageValidInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageValidInfo), 0)

def clz_Torappu_RetroStageTableStartStageValidInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddStages(builder, stages):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stages), 0)

def clz_Torappu_RetroStageTableStartStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddRetroActList(builder, retroActList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(retroActList), 0)

def clz_Torappu_RetroStageTableStartRetroActListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddRetroTrailList(builder, retroTrailList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(retroTrailList), 0)

def clz_Torappu_RetroStageTableStartRetroTrailListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddStageList(builder, stageList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageList), 0)

def clz_Torappu_RetroStageTableStartStageListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RetroStageTableAddRuleData(builder, ruleData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ruleData), 0)

def clz_Torappu_RetroStageTableAddCustomData(builder, customData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(customData), 0)

def clz_Torappu_RetroStageTableAddInitRetroCoin(builder, initRetroCoin):
    builder.PrependInt32Slot(8, initRetroCoin, 0)

def clz_Torappu_RetroStageTableAddRetroCoinPerWeek(builder, retroCoinPerWeek):
    builder.PrependInt32Slot(9, retroCoinPerWeek, 0)

def clz_Torappu_RetroStageTableAddRetroCoinMax(builder, retroCoinMax):
    builder.PrependInt32Slot(10, retroCoinMax, 0)

def clz_Torappu_RetroStageTableAddRetroUnlockCost(builder, retroUnlockCost):
    builder.PrependInt32Slot(11, retroUnlockCost, 0)

def clz_Torappu_RetroStageTableAddRetroDetail(builder, retroDetail):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(retroDetail), 0)

def clz_Torappu_RetroStageTableAddRetroPreShowTime(builder, retroPreShowTime):
    builder.PrependInt64Slot(13, retroPreShowTime, 0)

def clz_Torappu_RetroStageTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_RetroStageTable
