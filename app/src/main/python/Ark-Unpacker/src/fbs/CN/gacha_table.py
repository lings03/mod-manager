# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_GachaRuleType(object):
    NORMAL = 0
    LIMITED = 1
    LINKAGE = 2
    ATTAIN = 3
    CLASSIC = 4
    SINGLE = 5
    FESCLASSIC = 6
    CLASSIC_ATTAIN = 7
    SPECIAL = 8


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class hg__internal__JObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hg__internal__JObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshg__internal__JObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # hg__internal__JObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hg__internal__JObject
    def Base64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def hg__internal__JObjectStart(builder):
    builder.StartObject(1)

def hg__internal__JObjectAddBase64(builder, base64):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base64), 0)

def hg__internal__JObjectEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaPoolClientData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaPoolClientData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaPoolClientData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaPoolClientData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaPoolClientData
    def GachaPoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def GachaIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def OpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def GachaPoolName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def GachaPoolSummary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def GachaPoolDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def Guarantee5Avail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def Guarantee5Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def Lmtgsid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def CdprimColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def CdsecColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def FreeBackColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def GachaRuleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaPoolClientData
    def DynMeta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__JObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaPoolClientData
    def LinkageRuleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaPoolClientData
    def LinkageParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__JObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaPoolClientData
    def LimitParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__JObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_GachaPoolClientDataStart(builder):
    builder.StartObject(18)

def clz_Torappu_GachaPoolClientDataAddGachaPoolId(builder, gachaPoolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolId), 0)

def clz_Torappu_GachaPoolClientDataAddGachaIndex(builder, gachaIndex):
    builder.PrependInt32Slot(1, gachaIndex, 0)

def clz_Torappu_GachaPoolClientDataAddOpenTime(builder, openTime):
    builder.PrependInt64Slot(2, openTime, 0)

def clz_Torappu_GachaPoolClientDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(3, endTime, 0)

def clz_Torappu_GachaPoolClientDataAddGachaPoolName(builder, gachaPoolName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolName), 0)

def clz_Torappu_GachaPoolClientDataAddGachaPoolSummary(builder, gachaPoolSummary):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolSummary), 0)

def clz_Torappu_GachaPoolClientDataAddGachaPoolDetail(builder, gachaPoolDetail):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolDetail), 0)

def clz_Torappu_GachaPoolClientDataAddGuarantee5Avail(builder, guarantee5Avail):
    builder.PrependInt32Slot(7, guarantee5Avail, 0)

def clz_Torappu_GachaPoolClientDataAddGuarantee5Count(builder, guarantee5Count):
    builder.PrependInt32Slot(8, guarantee5Count, 0)

def clz_Torappu_GachaPoolClientDataAddLmtgsid(builder, lmtgsid):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(lmtgsid), 0)

def clz_Torappu_GachaPoolClientDataAddCdprimColor(builder, cdprimColor):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(cdprimColor), 0)

def clz_Torappu_GachaPoolClientDataAddCdsecColor(builder, cdsecColor):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(cdsecColor), 0)

def clz_Torappu_GachaPoolClientDataAddFreeBackColor(builder, freeBackColor):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(freeBackColor), 0)

def clz_Torappu_GachaPoolClientDataAddGachaRuleType(builder, gachaRuleType):
    builder.PrependInt32Slot(13, gachaRuleType, 0)

def clz_Torappu_GachaPoolClientDataAddDynMeta(builder, dynMeta):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(dynMeta), 0)

def clz_Torappu_GachaPoolClientDataAddLinkageRuleId(builder, linkageRuleId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(linkageRuleId), 0)

def clz_Torappu_GachaPoolClientDataAddLinkageParam(builder, linkageParam):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(linkageParam), 0)

def clz_Torappu_GachaPoolClientDataAddLimitParam(builder, limitParam):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(limitParam), 0)

def clz_Torappu_GachaPoolClientDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NewbeeGachaPoolClientData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NewbeeGachaPoolClientData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NewbeeGachaPoolClientData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NewbeeGachaPoolClientData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaPoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaPoolName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaPoolDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbeeGachaPoolClientData
    def GachaOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_NewbeeGachaPoolClientDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaPoolId(builder, gachaPoolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolId), 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaIndex(builder, gachaIndex):
    builder.PrependInt32Slot(1, gachaIndex, 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaPoolName(builder, gachaPoolName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolName), 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaPoolDetail(builder, gachaPoolDetail):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolDetail), 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaPrice(builder, gachaPrice):
    builder.PrependInt32Slot(4, gachaPrice, 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaTimes(builder, gachaTimes):
    builder.PrependInt32Slot(5, gachaTimes, 0)

def clz_Torappu_NewbeeGachaPoolClientDataAddGachaOffset(builder, gachaOffset):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(gachaOffset), 0)

def clz_Torappu_NewbeeGachaPoolClientDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialRecruitPool_SpecialRecruitCostData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def TimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def RecruitPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def ItemCosts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def ItemCostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData
    def ItemCostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataAddTimeLength(builder, timeLength):
    builder.PrependInt32Slot(0, timeLength, 0)

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataAddRecruitPrice(builder, recruitPrice):
    builder.PrependInt32Slot(1, recruitPrice, 0)

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataAddItemCosts(builder, itemCosts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemCosts), 0)

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataStartItemCostsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialRecruitPool_SpecialRecruitCostDataEnd(builder):
    return builder.EndObject()



class dict__int__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__int__intStart(builder):
    builder.StartObject(2)

def dict__int__intAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__int__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_BasedRecruitPool_RecruitConstants(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BasedRecruitPool_RecruitConstants()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BasedRecruitPool_RecruitConstants(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BasedRecruitPool_RecruitConstants
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BasedRecruitPool_RecruitConstants
    def TagPriceList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BasedRecruitPool_RecruitConstants
    def TagPriceListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BasedRecruitPool_RecruitConstants
    def TagPriceListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BasedRecruitPool_RecruitConstants
    def MaxRecruitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BasedRecruitPool_RecruitConstantsStart(builder):
    builder.StartObject(2)

def clz_Torappu_BasedRecruitPool_RecruitConstantsAddTagPriceList(builder, tagPriceList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tagPriceList), 0)

def clz_Torappu_BasedRecruitPool_RecruitConstantsStartTagPriceListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BasedRecruitPool_RecruitConstantsAddMaxRecruitTime(builder, maxRecruitTime):
    builder.PrependInt32Slot(1, maxRecruitTime, 0)

def clz_Torappu_BasedRecruitPool_RecruitConstantsEnd(builder):
    return builder.EndObject()



class clz_Torappu_SpecialRecruitPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SpecialRecruitPool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SpecialRecruitPool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SpecialRecruitPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SpecialRecruitPool
    def RecruitId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialRecruitPool
    def TagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SpecialRecruitPool
    def TagId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool
    def StartDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool
    def EndDateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SpecialRecruitPool
    def RecruitTimeTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SpecialRecruitPool_SpecialRecruitCostData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SpecialRecruitPool
    def RecruitTimeTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SpecialRecruitPool
    def RecruitTimeTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SpecialRecruitPool
    def RecruitConstants(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BasedRecruitPool_RecruitConstants()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SpecialRecruitPoolStart(builder):
    builder.StartObject(8)

def clz_Torappu_SpecialRecruitPoolAddRecruitId(builder, recruitId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recruitId), 0)

def clz_Torappu_SpecialRecruitPoolAddTagName(builder, tagName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tagName), 0)

def clz_Torappu_SpecialRecruitPoolAddTagId(builder, tagId):
    builder.PrependInt32Slot(2, tagId, 0)

def clz_Torappu_SpecialRecruitPoolAddOrder(builder, order):
    builder.PrependInt32Slot(3, order, 0)

def clz_Torappu_SpecialRecruitPoolAddStartDateTime(builder, startDateTime):
    builder.PrependInt64Slot(4, startDateTime, 0)

def clz_Torappu_SpecialRecruitPoolAddEndDateTime(builder, endDateTime):
    builder.PrependInt64Slot(5, endDateTime, 0)

def clz_Torappu_SpecialRecruitPoolAddRecruitTimeTable(builder, recruitTimeTable):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(recruitTimeTable), 0)

def clz_Torappu_SpecialRecruitPoolStartRecruitTimeTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SpecialRecruitPoolAddRecruitConstants(builder, recruitConstants):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(recruitConstants), 0)

def clz_Torappu_SpecialRecruitPoolEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaTag(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaTag()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaTag(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaTag
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaTag
    def TagId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaTag
    def TagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaTag
    def TagGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GachaTagStart(builder):
    builder.StartObject(3)

def clz_Torappu_GachaTagAddTagId(builder, tagId):
    builder.PrependInt32Slot(0, tagId, 0)

def clz_Torappu_GachaTagAddTagName(builder, tagName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tagName), 0)

def clz_Torappu_GachaTagAddTagGroup(builder, tagGroup):
    builder.PrependInt32Slot(2, tagGroup, 0)

def clz_Torappu_GachaTagEnd(builder):
    return builder.EndObject()



class clz_Torappu_RecruitPool_RecruitTime(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RecruitPool_RecruitTime()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RecruitPool_RecruitTime(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RecruitPool_RecruitTime
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RecruitPool_RecruitTime
    def TimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RecruitPool_RecruitTime
    def RecruitPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RecruitPool_RecruitTimeStart(builder):
    builder.StartObject(2)

def clz_Torappu_RecruitPool_RecruitTimeAddTimeLength(builder, timeLength):
    builder.PrependInt32Slot(0, timeLength, 0)

def clz_Torappu_RecruitPool_RecruitTimeAddRecruitPrice(builder, recruitPrice):
    builder.PrependInt32Slot(1, recruitPrice, 0)

def clz_Torappu_RecruitPool_RecruitTimeEnd(builder):
    return builder.EndObject()



class clz_Torappu_RecruitPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RecruitPool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RecruitPool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RecruitPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RecruitPool
    def RecruitTimeTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RecruitPool_RecruitTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RecruitPool
    def RecruitTimeTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RecruitPool
    def RecruitTimeTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RecruitPool
    def RecruitConstants(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BasedRecruitPool_RecruitConstants()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RecruitPoolStart(builder):
    builder.StartObject(2)

def clz_Torappu_RecruitPoolAddRecruitTimeTable(builder, recruitTimeTable):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recruitTimeTable), 0)

def clz_Torappu_RecruitPoolStartRecruitTimeTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RecruitPoolAddRecruitConstants(builder, recruitConstants):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(recruitConstants), 0)

def clz_Torappu_RecruitPoolEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_ItemBundle
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_ItemBundle
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_ItemBundleAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_ItemBundleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_PotentialMaterialConverterConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_PotentialMaterialConverterConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_PotentialMaterialConverterConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_PotentialMaterialConverterConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_PotentialMaterialConverterConfig
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_PotentialMaterialConverterConfig
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_PotentialMaterialConverterConfig
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_PotentialMaterialConverterConfigStart(builder):
    builder.StartObject(1)

def clz_Torappu_PotentialMaterialConverterConfigAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_PotentialMaterialConverterConfigStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_PotentialMaterialConverterConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_RecruitRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_RecruitRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_RecruitRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_RecruitRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_RecruitRange
    def RarityStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_RecruitRange
    def RarityEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GachaData_RecruitRangeStart(builder):
    builder.StartObject(2)

def clz_Torappu_GachaData_RecruitRangeAddRarityStart(builder, rarityStart):
    builder.PrependInt32Slot(0, rarityStart, 0)

def clz_Torappu_GachaData_RecruitRangeAddRarityEnd(builder, rarityEnd):
    builder.PrependInt32Slot(1, rarityEnd, 0)

def clz_Torappu_GachaData_RecruitRangeEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_GachaData_RecruitRange(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_GachaData_RecruitRange()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_GachaData_RecruitRange(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_GachaData_RecruitRange
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_GachaData_RecruitRange
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_GachaData_RecruitRange
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GachaData_RecruitRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_GachaData_RecruitRangeStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_GachaData_RecruitRangeAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_GachaData_RecruitRangeAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_GachaData_RecruitRangeEnd(builder):
    return builder.EndObject()



class dict__int__list_int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_int
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # dict__int__list_int
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # dict__int__list_int
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_int
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_intStart(builder):
    builder.StartObject(2)

def dict__int__list_intAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_intAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_intStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_intEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_CarouselData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_CarouselData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_CarouselData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_CarouselData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_CarouselData
    def PoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_CarouselData
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_CarouselData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_CarouselData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_CarouselData
    def SpriteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_GachaData_CarouselDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_GachaData_CarouselDataAddPoolId(builder, poolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poolId), 0)

def clz_Torappu_GachaData_CarouselDataAddIndex(builder, index):
    builder.PrependInt32Slot(1, index, 0)

def clz_Torappu_GachaData_CarouselDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(2, startTime, 0)

def clz_Torappu_GachaData_CarouselDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(3, endTime, 0)

def clz_Torappu_GachaData_CarouselDataAddSpriteId(builder, spriteId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spriteId), 0)

def clz_Torappu_GachaData_CarouselDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_FreeLimitGachaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_FreeLimitGachaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_FreeLimitGachaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_FreeLimitGachaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_FreeLimitGachaData
    def PoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_FreeLimitGachaData
    def OpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_FreeLimitGachaData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_FreeLimitGachaData
    def FreeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GachaData_FreeLimitGachaDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_GachaData_FreeLimitGachaDataAddPoolId(builder, poolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poolId), 0)

def clz_Torappu_GachaData_FreeLimitGachaDataAddOpenTime(builder, openTime):
    builder.PrependInt64Slot(1, openTime, 0)

def clz_Torappu_GachaData_FreeLimitGachaDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_GachaData_FreeLimitGachaDataAddFreeCount(builder, freeCount):
    builder.PrependInt32Slot(3, freeCount, 0)

def clz_Torappu_GachaData_FreeLimitGachaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_LimitTenGachaTkt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_LimitTenGachaTkt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_LimitTenGachaTkt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_LimitTenGachaTkt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_LimitTenGachaTkt
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_LimitTenGachaTkt
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GachaData_LimitTenGachaTktStart(builder):
    builder.StartObject(2)

def clz_Torappu_GachaData_LimitTenGachaTktAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_GachaData_LimitTenGachaTktAddEndTime(builder, endTime):
    builder.PrependInt64Slot(1, endTime, 0)

def clz_Torappu_GachaData_LimitTenGachaTktEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_LinkageTenGachaTkt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_LinkageTenGachaTkt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_LinkageTenGachaTkt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_LinkageTenGachaTkt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_LinkageTenGachaTkt
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_LinkageTenGachaTkt
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_LinkageTenGachaTkt
    def GachaPoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_GachaData_LinkageTenGachaTktStart(builder):
    builder.StartObject(3)

def clz_Torappu_GachaData_LinkageTenGachaTktAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_GachaData_LinkageTenGachaTktAddEndTime(builder, endTime):
    builder.PrependInt64Slot(1, endTime, 0)

def clz_Torappu_GachaData_LinkageTenGachaTktAddGachaPoolId(builder, gachaPoolId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolId), 0)

def clz_Torappu_GachaData_LinkageTenGachaTktEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_NormalGachaTkt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_NormalGachaTkt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_NormalGachaTkt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_NormalGachaTkt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_NormalGachaTkt
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_NormalGachaTkt
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GachaData_NormalGachaTkt
    def GachaPoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_NormalGachaTkt
    def IsTen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_GachaData_NormalGachaTktStart(builder):
    builder.StartObject(4)

def clz_Torappu_GachaData_NormalGachaTktAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_GachaData_NormalGachaTktAddEndTime(builder, endTime):
    builder.PrependInt64Slot(1, endTime, 0)

def clz_Torappu_GachaData_NormalGachaTktAddGachaPoolId(builder, gachaPoolId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolId), 0)

def clz_Torappu_GachaData_NormalGachaTktAddIsTen(builder, isTen):
    builder.PrependBoolSlot(3, isTen, 0)

def clz_Torappu_GachaData_NormalGachaTktEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData_FesGachaPoolRelateItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData_FesGachaPoolRelateItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData_FesGachaPoolRelateItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData_FesGachaPoolRelateItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData_FesGachaPoolRelateItem
    def RarityRank5ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData_FesGachaPoolRelateItem
    def RarityRank6ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_GachaData_FesGachaPoolRelateItemStart(builder):
    builder.StartObject(2)

def clz_Torappu_GachaData_FesGachaPoolRelateItemAddRarityRank5ItemId(builder, rarityRank5ItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rarityRank5ItemId), 0)

def clz_Torappu_GachaData_FesGachaPoolRelateItemAddRarityRank6ItemId(builder, rarityRank6ItemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rarityRank6ItemId), 0)

def clz_Torappu_GachaData_FesGachaPoolRelateItemEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GachaData_FesGachaPoolRelateItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItemStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItemAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItemAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItemEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class dict__int__float(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__float()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__float(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__float
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__float
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__float
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def dict__int__floatStart(builder):
    builder.StartObject(2)

def dict__int__floatAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__floatAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def dict__int__floatEnd(builder):
    return builder.EndObject()



class clz_Torappu_GachaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GachaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GachaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GachaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GachaData
    def GachaPoolClient(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaPoolClientData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def GachaPoolClientLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def GachaPoolClientIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_GachaData
    def NewbeeGachaPoolClient(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NewbeeGachaPoolClientData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def NewbeeGachaPoolClientLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def NewbeeGachaPoolClientIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_GachaData
    def SpecialRecruitPool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SpecialRecruitPool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def SpecialRecruitPoolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def SpecialRecruitPoolIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_GachaData
    def GachaTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaTag()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def GachaTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def GachaTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_GachaData
    def RecruitPool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RecruitPool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def PotentialMaterialConverter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_PotentialMaterialConverterConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def ClassicPotentialMaterialConverter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_PotentialMaterialConverterConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def RecruitRarityTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_GachaData_RecruitRange()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def RecruitRarityTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def RecruitRarityTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_GachaData
    def SpecialTagRarityTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def SpecialTagRarityTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def SpecialTagRarityTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_GachaData
    def RecruitDetail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GachaData
    def Carousel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaData_CarouselData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def CarouselLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def CarouselIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_GachaData
    def FreeGacha(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaData_FreeLimitGachaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def FreeGachaLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def FreeGachaIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_GachaData
    def LimitTenGachaItem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaData_LimitTenGachaTkt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def LimitTenGachaItemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def LimitTenGachaItemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_GachaData
    def LinkageTenGachaItem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaData_LinkageTenGachaTkt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def LinkageTenGachaItemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def LinkageTenGachaItemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_GachaData
    def NormalGachaItem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GachaData_NormalGachaTkt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def NormalGachaItemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def NormalGachaItemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_GachaData
    def FesGachaPoolRelateItem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_GachaData_FesGachaPoolRelateItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def FesGachaPoolRelateItemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def FesGachaPoolRelateItemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_GachaData
    def DicRecruit6StarHint(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def DicRecruit6StarHintLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def DicRecruit6StarHintIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_GachaData
    def SpecialGachaPercentDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__float()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GachaData
    def SpecialGachaPercentDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GachaData
    def SpecialGachaPercentDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

def clz_Torappu_GachaDataStart(builder):
    builder.StartObject(18)

def clz_Torappu_GachaDataAddGachaPoolClient(builder, gachaPoolClient):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gachaPoolClient), 0)

def clz_Torappu_GachaDataStartGachaPoolClientVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddNewbeeGachaPoolClient(builder, newbeeGachaPoolClient):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(newbeeGachaPoolClient), 0)

def clz_Torappu_GachaDataStartNewbeeGachaPoolClientVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddSpecialRecruitPool(builder, specialRecruitPool):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(specialRecruitPool), 0)

def clz_Torappu_GachaDataStartSpecialRecruitPoolVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddGachaTags(builder, gachaTags):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gachaTags), 0)

def clz_Torappu_GachaDataStartGachaTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddRecruitPool(builder, recruitPool):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(recruitPool), 0)

def clz_Torappu_GachaDataAddPotentialMaterialConverter(builder, potentialMaterialConverter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(potentialMaterialConverter), 0)

def clz_Torappu_GachaDataAddClassicPotentialMaterialConverter(builder, classicPotentialMaterialConverter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(classicPotentialMaterialConverter), 0)

def clz_Torappu_GachaDataAddRecruitRarityTable(builder, recruitRarityTable):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(recruitRarityTable), 0)

def clz_Torappu_GachaDataStartRecruitRarityTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddSpecialTagRarityTable(builder, specialTagRarityTable):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(specialTagRarityTable), 0)

def clz_Torappu_GachaDataStartSpecialTagRarityTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddRecruitDetail(builder, recruitDetail):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(recruitDetail), 0)

def clz_Torappu_GachaDataAddCarousel(builder, carousel):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(carousel), 0)

def clz_Torappu_GachaDataStartCarouselVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddFreeGacha(builder, freeGacha):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(freeGacha), 0)

def clz_Torappu_GachaDataStartFreeGachaVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddLimitTenGachaItem(builder, limitTenGachaItem):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(limitTenGachaItem), 0)

def clz_Torappu_GachaDataStartLimitTenGachaItemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddLinkageTenGachaItem(builder, linkageTenGachaItem):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(linkageTenGachaItem), 0)

def clz_Torappu_GachaDataStartLinkageTenGachaItemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddNormalGachaItem(builder, normalGachaItem):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(normalGachaItem), 0)

def clz_Torappu_GachaDataStartNormalGachaItemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddFesGachaPoolRelateItem(builder, fesGachaPoolRelateItem):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(fesGachaPoolRelateItem), 0)

def clz_Torappu_GachaDataStartFesGachaPoolRelateItemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddDicRecruit6StarHint(builder, dicRecruit6StarHint):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(dicRecruit6StarHint), 0)

def clz_Torappu_GachaDataStartDicRecruit6StarHintVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataAddSpecialGachaPercentDict(builder, specialGachaPercentDict):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(specialGachaPercentDict), 0)

def clz_Torappu_GachaDataStartSpecialGachaPercentDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GachaDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_GachaData
