# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_ClimbTowerTowerType(object):
    TRAINING = 0
    NORMAL = 1


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_ClimbTowerLevelType(object):
    NORMAL = 0
    HIGHLEVEL = 1
    BOSS = 2


class enum__Torappu_StageDropType(object):
    NONE = 0
    ONCE = 1
    NORMAL = 2
    SPECIAL = 3
    ADDITIONAL = 4
    APRETURN = 5
    DIAMOND_MATERIAL = 6
    FUNITURE_DROP = 7
    COMPLETE = 8
    CHARM_DROP = 9
    OVERRIDE_DROP = 10
    ITEM_RETURN = 11


class enum__Torappu_OccPer(object):
    ALWAYS = 0
    ALMOST = 1
    USUAL = 2
    OFTEN = 3
    SOMETIMES = 4
    NEVER = 5
    DEFINITELY_BUFF = 6


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_ClimbTowerTaticalBuffType(object):
    A = 0
    B = 1


class enum__Torappu_ClimbTowerCardType(object):
    SEASON = 0
    TOWER = 1


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 1
    SIDE_B = 2
    NONE = 3


class enum__Torappu_MissionType(object):
    UNKNOWN = 0
    MAIN = 1
    DAILY = 2
    WEEKLY = 3
    GUIDE = 4
    SUB = 5
    ACTIVITY = 6
    OPENSERVER = 7
    TOWERSEASON = 8


class enum__Torappu_MissionItemBgType(object):
    COMMON = 0
    Equipment = 1
    Char = 2


class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData
    def LevelNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataAddLevelNum(builder, levelNum):
    builder.PrependInt32Slot(0, levelNum, 0)

def clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerSingleTowerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerSingleTowerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerSingleTowerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerSingleTowerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerSingleTowerData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def StageNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def SubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def TowerType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def Levels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSingleTowerData
    def LevelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def LevelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def HardLevels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSingleTowerData
    def HardLevelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def HardLevelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def TaskInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ClimbTowerSingleTowerData_ClimbTowerTaskRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def TaskInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def TaskInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def PreTowerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def MedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def HiddenMedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def HardModeMedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def BossId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def CurseCardIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSingleTowerData
    def CurseCardIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def CurseCardIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_ClimbTowerSingleTowerData
    def DangerDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleTowerData
    def HardModeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ClimbTowerSingleTowerDataStart(builder):
    builder.StartObject(19)

def clz_Torappu_ClimbTowerSingleTowerDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddStageNum(builder, stageNum):
    builder.PrependInt32Slot(2, stageNum, 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddSubName(builder, subName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subName), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddTowerType(builder, towerType):
    builder.PrependInt32Slot(6, towerType, 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddLevels(builder, levels):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(levels), 0)

def clz_Torappu_ClimbTowerSingleTowerDataStartLevelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSingleTowerDataAddHardLevels(builder, hardLevels):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(hardLevels), 0)

def clz_Torappu_ClimbTowerSingleTowerDataStartHardLevelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSingleTowerDataAddTaskInfo(builder, taskInfo):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(taskInfo), 0)

def clz_Torappu_ClimbTowerSingleTowerDataStartTaskInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSingleTowerDataAddPreTowerId(builder, preTowerId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(preTowerId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddMedalId(builder, medalId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(medalId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddHiddenMedalId(builder, hiddenMedalId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenMedalId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddHardModeMedalId(builder, hardModeMedalId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(hardModeMedalId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddBossId(builder, bossId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(bossId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddCardId(builder, cardId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(cardId), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddCurseCardIds(builder, curseCardIds):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(curseCardIds), 0)

def clz_Torappu_ClimbTowerSingleTowerDataStartCurseCardIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSingleTowerDataAddDangerDesc(builder, dangerDesc):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(dangerDesc), 0)

def clz_Torappu_ClimbTowerSingleTowerDataAddHardModeDesc(builder, hardModeDesc):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(hardModeDesc), 0)

def clz_Torappu_ClimbTowerSingleTowerDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerSingleTowerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerSingleTowerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerSingleTowerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerSingleTowerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerSingleTowerData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerSingleTowerData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerSingleTowerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerSingleTowerDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerSingleTowerDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerSingleTowerDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerSingleTowerDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_WeightItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_WeightItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(5)

def clz_Torappu_WeightItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_WeightItemBundleAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_WeightItemBundleAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_WeightItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_WeightItemBundleAddWeight(builder, weight):
    builder.PrependInt32Slot(4, weight, 0)

def clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class list_clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_clz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_clz_Torappu_WeightItemBundle
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # list_clz_Torappu_WeightItemBundle
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_clz_Torappu_WeightItemBundle
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(1)

def list_clz_Torappu_WeightItemBundleAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_clz_Torappu_WeightItemBundleStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_StageData_DisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_StageData_DisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_StageData_DisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayDetailRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayDetailRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayDetailRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayDetailRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayDetailRewards
    def OccPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayDetailRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayDetailRewardsStart(builder):
    builder.StartObject(4)

def clz_Torappu_StageData_DisplayDetailRewardsAddOccPercent(builder, occPercent):
    builder.PrependInt32Slot(0, occPercent, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(3, dropType, 0)

def clz_Torappu_StageData_DisplayDetailRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerDropDisplayInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerDropDisplayInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerDropDisplayInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerDropDisplayInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerDropDisplayInfo
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDropDisplayInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDropDisplayInfo
    def MaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDropDisplayInfo
    def MinCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ClimbTowerDropDisplayInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ClimbTowerDropDisplayInfoAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_ClimbTowerDropDisplayInfoAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ClimbTowerDropDisplayInfoAddMaxCount(builder, maxCount):
    builder.PrependInt32Slot(2, maxCount, 0)

def clz_Torappu_ClimbTowerDropDisplayInfoAddMinCount(builder, minCount):
    builder.PrependInt32Slot(3, minCount, 0)

def clz_Torappu_ClimbTowerDropDisplayInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerDropDisplayInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerDropDisplayInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerDropDisplayInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerDropDisplayInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerDropDisplayInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerDropDisplayInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerDropDisplayInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerDropDisplayInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerDropDisplayInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerDropDisplayInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerDropDisplayInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerLevelDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerLevelDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerLevelDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerLevelDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerLevelDropInfo
    def PassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerLevelDropInfo
    def PassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def PassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDetailRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDetailRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDetailRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDropInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerDropDisplayInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDropInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerLevelDropInfo
    def DisplayDropInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ClimbTowerLevelDropInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ClimbTowerLevelDropInfoAddPassRewards(builder, passRewards):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(passRewards), 0)

def clz_Torappu_ClimbTowerLevelDropInfoStartPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerLevelDropInfoAddDisplayRewards(builder, displayRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayRewards), 0)

def clz_Torappu_ClimbTowerLevelDropInfoStartDisplayRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerLevelDropInfoAddDisplayDetailRewards(builder, displayDetailRewards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(displayDetailRewards), 0)

def clz_Torappu_ClimbTowerLevelDropInfoStartDisplayDetailRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerLevelDropInfoAddDisplayDropInfo(builder, displayDropInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(displayDropInfo), 0)

def clz_Torappu_ClimbTowerLevelDropInfoStartDisplayDropInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerLevelDropInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerSingleLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerSingleLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerSingleLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerSingleLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerSingleLevelData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def TowerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def LayerNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleLevelData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSingleLevelData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSingleLevelData
    def DropInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerLevelDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ClimbTowerSingleLevelDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_ClimbTowerSingleLevelDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddTowerId(builder, towerId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(towerId), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddLayerNum(builder, layerNum):
    builder.PrependInt32Slot(3, layerNum, 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddLevelType(builder, levelType):
    builder.PrependInt32Slot(7, levelType, 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_ClimbTowerSingleLevelDataAddDropInfo(builder, dropInfo):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(dropInfo), 0)

def clz_Torappu_ClimbTowerSingleLevelDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerSingleLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerSingleLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerSingleLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerSingleLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerSingleLevelData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerSingleLevelData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerSingleLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerSingleLevelDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerSingleLevelDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerSingleLevelDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerSingleLevelDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerTacticalBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerTacticalBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerTacticalBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerTacticalBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerTacticalBuffData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerTacticalBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerTacticalBuffData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerTacticalBuffData
    def IsDefaultActive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ClimbTowerTacticalBuffData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerTacticalBuffData
    def BuffType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ClimbTowerTacticalBuffDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ClimbTowerTacticalBuffDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerTacticalBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerTacticalBuffDataAddProfession(builder, profession):
    builder.PrependInt32Slot(2, profession, 0)

def clz_Torappu_ClimbTowerTacticalBuffDataAddIsDefaultActive(builder, isDefaultActive):
    builder.PrependBoolSlot(3, isDefaultActive, 0)

def clz_Torappu_ClimbTowerTacticalBuffDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_ClimbTowerTacticalBuffDataAddBuffType(builder, buffType):
    builder.PrependInt32Slot(5, buffType, 0)

def clz_Torappu_ClimbTowerTacticalBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerTacticalBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerTacticalBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerTacticalBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerTacticalBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerTacticalBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerTacticalBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerTacticalBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerTacticalBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerTacticalBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerTacticalBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerTacticalBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData_Selector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData_Selector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData_Selector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData_Selector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData_Selector
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def CharIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def MapTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_RuneData_SelectorStart(builder):
    builder.StartObject(14)

def clz_Torappu_RuneData_SelectorAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(0, professionMask, 0)

def clz_Torappu_RuneData_SelectorAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(1, buildableMask, 0)

def clz_Torappu_RuneData_SelectorAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(2, playerSideMask, 0)

def clz_Torappu_RuneData_SelectorAddCharIdFilter(builder, charIdFilter):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(charIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartCharIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdFilter(builder, enemyIdFilter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdExcludeFilter(builder, enemyIdExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyLevelTypeFilter(builder, enemyLevelTypeFilter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyLevelTypeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyLevelTypeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSkillIdFilter(builder, skillIdFilter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skillIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartSkillIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddTileKeyFilter(builder, tileKeyFilter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tileKeyFilter), 0)

def clz_Torappu_RuneData_SelectorStartTileKeyFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddGroupTagFilter(builder, groupTagFilter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groupTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartGroupTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagFilter(builder, filterTagFilter):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagExcludeFilter(builder, filterTagExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSubProfessionExcludeFilter(builder, subProfessionExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartSubProfessionExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddMapTagFilter(builder, mapTagFilter):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mapTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartMapTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneData
    def Selector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneData_Selector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RuneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RuneDataAddSelector(builder, selector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selector), 0)

def clz_Torappu_RuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_PackedRuneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Points(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RuneTable_PackedRuneData
    def MutexGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RuneTable_PackedRuneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddPoints(builder, points):
    builder.PrependFloat32Slot(1, points, 0.0)

def clz_Torappu_RuneTable_PackedRuneDataAddMutexGroupKey(builder, mutexGroupKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mutexGroupKey), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_PackedRuneDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerMainCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerMainCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerMainCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerMainCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerMainCardData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMainCardData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMainCardData
    def LinkedTowerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMainCardData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMainCardData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMainCardData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMainCardData
    def SubCardIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerMainCardData
    def SubCardIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMainCardData
    def SubCardIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ClimbTowerMainCardData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerMainCardData
    def TrapIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerMainCardData
    def TrapIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMainCardData
    def TrapIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_ClimbTowerMainCardDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_ClimbTowerMainCardDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerMainCardDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ClimbTowerMainCardDataAddLinkedTowerId(builder, linkedTowerId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(linkedTowerId), 0)

def clz_Torappu_ClimbTowerMainCardDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_ClimbTowerMainCardDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerMainCardDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerMainCardDataAddSubCardIds(builder, subCardIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(subCardIds), 0)

def clz_Torappu_ClimbTowerMainCardDataStartSubCardIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMainCardDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_ClimbTowerMainCardDataAddTrapIds(builder, trapIds):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(trapIds), 0)

def clz_Torappu_ClimbTowerMainCardDataStartTrapIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMainCardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerMainCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerMainCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerMainCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerMainCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerMainCardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerMainCardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerMainCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerMainCardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerMainCardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerMainCardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerMainCardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerSubCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerSubCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerSubCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerSubCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerSubCardData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSubCardData
    def MainCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSubCardData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSubCardData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSubCardData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSubCardData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerSubCardData
    def TrapIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSubCardData
    def TrapIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSubCardData
    def TrapIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ClimbTowerSubCardDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ClimbTowerSubCardDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerSubCardDataAddMainCardId(builder, mainCardId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mainCardId), 0)

def clz_Torappu_ClimbTowerSubCardDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ClimbTowerSubCardDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerSubCardDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerSubCardDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_ClimbTowerSubCardDataAddTrapIds(builder, trapIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(trapIds), 0)

def clz_Torappu_ClimbTowerSubCardDataStartTrapIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSubCardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerSubCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerSubCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerSubCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerSubCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerSubCardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerSubCardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerSubCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerSubCardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerSubCardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerSubCardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerSubCardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerCurseCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerCurseCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerCurseCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerCurseCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerCurseCardData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerCurseCardData
    def TowerIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerCurseCardData
    def TowerIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerCurseCardData
    def TowerIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ClimbTowerCurseCardData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerCurseCardData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerCurseCardData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ClimbTowerCurseCardDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ClimbTowerCurseCardDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerCurseCardDataAddTowerIdList(builder, towerIdList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(towerIdList), 0)

def clz_Torappu_ClimbTowerCurseCardDataStartTowerIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerCurseCardDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerCurseCardDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ClimbTowerCurseCardDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_ClimbTowerCurseCardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerCurseCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerCurseCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerCurseCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerCurseCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerCurseCardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerCurseCardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerCurseCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerCurseCardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerCurseCardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerCurseCardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerCurseCardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerSeasonInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerSeasonInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerSeasonInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerSeasonInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerSeasonInfoData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSeasonInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerSeasonInfoData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def Towers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSeasonInfoData
    def TowersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def TowersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def SeasonCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerSeasonInfoData
    def SeasonCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def SeasonCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ClimbTowerSeasonInfoData
    def SeasonColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ClimbTowerSeasonInfoDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ClimbTowerSeasonInfoDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerSeasonInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ClimbTowerSeasonInfoDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(2, startTs, 0)

def clz_Torappu_ClimbTowerSeasonInfoDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def clz_Torappu_ClimbTowerSeasonInfoDataAddTowers(builder, towers):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(towers), 0)

def clz_Torappu_ClimbTowerSeasonInfoDataStartTowersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSeasonInfoDataAddSeasonCards(builder, seasonCards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(seasonCards), 0)

def clz_Torappu_ClimbTowerSeasonInfoDataStartSeasonCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerSeasonInfoDataAddSeasonColor(builder, seasonColor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(seasonColor), 0)

def clz_Torappu_ClimbTowerSeasonInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerSeasonInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerSeasonInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerSeasonInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerSeasonInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerSeasonInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerSeasonInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerSeasonInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerSeasonInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerSeasonInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerSeasonInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerSeasonInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerDetailConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerDetailConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerDetailConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerDetailConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerDetailConst
    def UnlockLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDetailConst
    def UnlockModuleNumRequirement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def LowerItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDetailConst
    def LowerItemLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def HigherItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDetailConst
    def HigherItemLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def InitCharCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def CharRecruitTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def CharRecruitChoiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def SubcardStageSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def AssistCharLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerDetailConst
    def FirstClearTaskDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDetailConst
    def SubCardObtainDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerDetailConst
    def SubGodCardUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ClimbTowerDetailConstStart(builder):
    builder.StartObject(14)

def clz_Torappu_ClimbTowerDetailConstAddUnlockLevelId(builder, unlockLevelId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockLevelId), 0)

def clz_Torappu_ClimbTowerDetailConstAddUnlockModuleNumRequirement(builder, unlockModuleNumRequirement):
    builder.PrependInt32Slot(1, unlockModuleNumRequirement, 0)

def clz_Torappu_ClimbTowerDetailConstAddLowerItemId(builder, lowerItemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lowerItemId), 0)

def clz_Torappu_ClimbTowerDetailConstAddLowerItemLimit(builder, lowerItemLimit):
    builder.PrependInt32Slot(3, lowerItemLimit, 0)

def clz_Torappu_ClimbTowerDetailConstAddHigherItemId(builder, higherItemId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(higherItemId), 0)

def clz_Torappu_ClimbTowerDetailConstAddHigherItemLimit(builder, higherItemLimit):
    builder.PrependInt32Slot(5, higherItemLimit, 0)

def clz_Torappu_ClimbTowerDetailConstAddInitCharCount(builder, initCharCount):
    builder.PrependInt32Slot(6, initCharCount, 0)

def clz_Torappu_ClimbTowerDetailConstAddCharRecruitTimes(builder, charRecruitTimes):
    builder.PrependInt32Slot(7, charRecruitTimes, 0)

def clz_Torappu_ClimbTowerDetailConstAddCharRecruitChoiceCount(builder, charRecruitChoiceCount):
    builder.PrependInt32Slot(8, charRecruitChoiceCount, 0)

def clz_Torappu_ClimbTowerDetailConstAddSubcardStageSort(builder, subcardStageSort):
    builder.PrependInt32Slot(9, subcardStageSort, 0)

def clz_Torappu_ClimbTowerDetailConstAddAssistCharLimit(builder, assistCharLimit):
    builder.PrependInt32Slot(10, assistCharLimit, 0)

def clz_Torappu_ClimbTowerDetailConstAddFirstClearTaskDesc(builder, firstClearTaskDesc):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(firstClearTaskDesc), 0)

def clz_Torappu_ClimbTowerDetailConstAddSubCardObtainDesc(builder, subCardObtainDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subCardObtainDesc), 0)

def clz_Torappu_ClimbTowerDetailConstAddSubGodCardUnlockDesc(builder, subGodCardUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(subGodCardUnlockDesc), 0)

def clz_Torappu_ClimbTowerDetailConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerRewardInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerRewardInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerRewardInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerRewardInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerRewardInfo
    def StageSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerRewardInfo
    def LowerItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerRewardInfo
    def HigherItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ClimbTowerRewardInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_ClimbTowerRewardInfoAddStageSort(builder, stageSort):
    builder.PrependInt32Slot(0, stageSort, 0)

def clz_Torappu_ClimbTowerRewardInfoAddLowerItemCount(builder, lowerItemCount):
    builder.PrependInt32Slot(1, lowerItemCount, 0)

def clz_Torappu_ClimbTowerRewardInfoAddHigherItemCount(builder, higherItemCount):
    builder.PrependInt32Slot(2, higherItemCount, 0)

def clz_Torappu_ClimbTowerRewardInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionDisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionDisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionDisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionDisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionDisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionDisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionDisplayRewards
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionDisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_MissionDisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_MissionDisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDisplayRewardsAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_MissionDisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerMissionData
    def BindGodCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def MissionBkg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def ItemBgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def PreMissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerMissionData
    def PreMissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def PreMissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ClimbTowerMissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerMissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_ClimbTowerMissionData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ClimbTowerMissionData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_ClimbTowerMissionData
    def MissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def ToPage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def PeriodicalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_ClimbTowerMissionData
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def FoldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ClimbTowerMissionData
    def HaveSubMissionToUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_ClimbTowerMissionDataStart(builder):
    builder.StartObject(20)

def clz_Torappu_ClimbTowerMissionDataAddBindGodCardId(builder, bindGodCardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bindGodCardId), 0)

def clz_Torappu_ClimbTowerMissionDataAddMissionBkg(builder, missionBkg):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(missionBkg), 0)

def clz_Torappu_ClimbTowerMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ClimbTowerMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_ClimbTowerMissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_ClimbTowerMissionDataAddType(builder, type):
    builder.PrependInt32Slot(5, type, 0)

def clz_Torappu_ClimbTowerMissionDataAddItemBgType(builder, itemBgType):
    builder.PrependInt32Slot(6, itemBgType, 0)

def clz_Torappu_ClimbTowerMissionDataAddPreMissionIds(builder, preMissionIds):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionIds), 0)

def clz_Torappu_ClimbTowerMissionDataStartPreMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_ClimbTowerMissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_ClimbTowerMissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_ClimbTowerMissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMissionDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_ClimbTowerMissionDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_ClimbTowerMissionDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMissionDataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_ClimbTowerMissionDataAddToPage(builder, toPage):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(toPage), 0)

def clz_Torappu_ClimbTowerMissionDataAddPeriodicalPoint(builder, periodicalPoint):
    builder.PrependInt32Slot(15, periodicalPoint, 0)

def clz_Torappu_ClimbTowerMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ClimbTowerMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerMissionDataAddBackImagePath(builder, backImagePath):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)

def clz_Torappu_ClimbTowerMissionDataAddFoldId(builder, foldId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(foldId), 0)

def clz_Torappu_ClimbTowerMissionDataAddHaveSubMissionToUnlock(builder, haveSubMissionToUnlock):
    builder.PrependBoolSlot(19, haveSubMissionToUnlock, 0)

def clz_Torappu_ClimbTowerMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ClimbTowerMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ClimbTowerMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ClimbTowerMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ClimbTowerMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ClimbTowerMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ClimbTowerMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ClimbTowerMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ClimbTowerMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ClimbTowerMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ClimbTowerMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionGroup
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def PreMissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Period(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_MissionGroup
    def PeriodAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MissionGroup
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionGroup
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionGroup
    def MissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionGroup
    def MissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def MissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_MissionGroup
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(9)

def clz_Torappu_MissionGroupAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionGroupAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MissionGroupAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_MissionGroupAddPreMissionGroup(builder, preMissionGroup):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionGroup), 0)

def clz_Torappu_MissionGroupAddPeriod(builder, period):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(period), 0)

def clz_Torappu_MissionGroupStartPeriodVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionGroupStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddMissionIds(builder, missionIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionIds), 0)

def clz_Torappu_MissionGroupStartMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddStartTs(builder, startTs):
    builder.PrependInt64Slot(7, startTs, 0)

def clz_Torappu_MissionGroupAddEndTs(builder, endTs):
    builder.PrependInt64Slot(8, endTs, 0)

def clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MissionGroup
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MissionGroup
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MissionGroupAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MissionGroupAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_ClimbTowerTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ClimbTowerTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ClimbTowerTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ClimbTowerTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ClimbTowerTable
    def Towers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerSingleTowerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def TowersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def TowersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def Levels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerSingleLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def LevelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def LevelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def TacticalBuffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerTacticalBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def TacticalBuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def TacticalBuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def MainCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerMainCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def MainCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def MainCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def SubCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerSubCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def SubCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def SubCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def CurseCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerCurseCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def CurseCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def CurseCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def SeasonInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerSeasonInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def SeasonInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def SeasonInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def DetailConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ClimbTowerDetailConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def RewardInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ClimbTowerRewardInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def RewardInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def RewardInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def MissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ClimbTowerMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def MissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def MissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ClimbTowerTable
    def MissionGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ClimbTowerTable
    def MissionGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ClimbTowerTable
    def MissionGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_ClimbTowerTableStart(builder):
    builder.StartObject(11)

def clz_Torappu_ClimbTowerTableAddTowers(builder, towers):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(towers), 0)

def clz_Torappu_ClimbTowerTableStartTowersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddLevels(builder, levels):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levels), 0)

def clz_Torappu_ClimbTowerTableStartLevelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddTacticalBuffs(builder, tacticalBuffs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tacticalBuffs), 0)

def clz_Torappu_ClimbTowerTableStartTacticalBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddMainCards(builder, mainCards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mainCards), 0)

def clz_Torappu_ClimbTowerTableStartMainCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddSubCards(builder, subCards):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subCards), 0)

def clz_Torappu_ClimbTowerTableStartSubCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddCurseCards(builder, curseCards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(curseCards), 0)

def clz_Torappu_ClimbTowerTableStartCurseCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddSeasonInfos(builder, seasonInfos):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(seasonInfos), 0)

def clz_Torappu_ClimbTowerTableStartSeasonInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddDetailConst(builder, detailConst):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(detailConst), 0)

def clz_Torappu_ClimbTowerTableAddRewardInfoList(builder, rewardInfoList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rewardInfoList), 0)

def clz_Torappu_ClimbTowerTableStartRewardInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddMissionData(builder, missionData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(missionData), 0)

def clz_Torappu_ClimbTowerTableStartMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_ClimbTowerTableStartMissionGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ClimbTowerTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_ClimbTowerTable
