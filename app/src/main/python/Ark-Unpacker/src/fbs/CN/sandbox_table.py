# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_TipData_Category(object):
    NONE = 0
    BATTLE = 1
    UI = 2
    BUILDING = 4
    GACHA = 8
    MISC = 16
    ALL = 31


class enum__Torappu_SandboxFoodMatType(object):
    MAIN = 0
    SUB = 1


class enum__Torappu_SandboxBuildingItemType(object):
    NONE = 0
    PRODUCTION = 1
    SCOUT = 2
    BATTLE = 3
    FUNCTION = 4


class enum__Torappu_SandboxCraftItemType(object):
    SHORT = 0
    LONG = 1


class enum__Torappu_SandboxItemType(object):
    NONE = 0
    TACTICAL = 1
    STAMINA = 2
    STAMINAPOT = 3
    BUILDING = 4
    BUILDINGMAT = 5
    FOOD = 6
    FOODMAT = 7
    SPECIALMAT = 8
    GOLD = 9
    CRAFT = 10
    PLACEHOLDER = 11


class enum__Torappu_SandboxRewardTrapDropType(object):
    COLLECT = 0
    DAILY = 1
    ACTIVATE = 2
    DURATION = 3


class enum__Torappu_SandboxNodeType(object):
    NONE = 0
    HOME = 1
    BATTLE = 2
    NEST = 3
    COLLECT = 4
    HUNT = 5
    CAVE = 6
    EVENT = 7
    MISSION = 8
    MARKET = 9


class enum__Torappu_SandboxWeatherType(object):
    NORMAL = 0
    RAINFOREST = 1
    VOLCANO = 2
    DESERT = 3


class enum__Torappu_SandboxEventType(object):
    RESOURCE = 0
    FOOD = 1
    MISSION = 2
    BUSINESS = 3
    ADVENTURE = 4
    MYSTERY = 5


class enum__Torappu_SandboxEventChoiceType(object):
    LEAVE = 0
    TRADE = 1
    NEXT = 2
    MISSION = 3


class enum__Torappu_ProfessionID(object):
    WARRIOR = 0
    SNIPER = 1
    TANK = 2
    MEDIC = 3
    SUPPORT = 4
    CASTER = 5
    SPECIAL = 6
    TOKEN = 7
    TRAP = 8
    PIONEER = 9


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_SandboxDailyDescTemplateType(object):
    VISITOR = 0
    RARE_ANIMAL = 1
    WANDER = 2
    MARKET = 3


class enum__Torappu_SandboxEnemyRushType(object):
    NORMAL = 0
    ELITE = 1
    BOSS = 2


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class clz_Torappu_SandboxMapConstTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxMapConstTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxMapConstTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxMapConstTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxMapConstTable
    def DirectionNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxMapConstTable
    def DirectionNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxMapConstTable
    def DirectionNamesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxMapConstTable
    def HomeNodeStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMapConstTable
    def HomeRushStageCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMapConstTable
    def HomeRushStageName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMapConstTable
    def HomeRushDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMapConstTable
    def CrazyRevengeRushGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMapConstTable
    def HomeBuildModeBgm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxMapConstTableStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxMapConstTableAddDirectionNames(builder, directionNames):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(directionNames), 0)

def clz_Torappu_SandboxMapConstTableStartDirectionNamesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxMapConstTableAddHomeNodeStageId(builder, homeNodeStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(homeNodeStageId), 0)

def clz_Torappu_SandboxMapConstTableAddHomeRushStageCode(builder, homeRushStageCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(homeRushStageCode), 0)

def clz_Torappu_SandboxMapConstTableAddHomeRushStageName(builder, homeRushStageName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(homeRushStageName), 0)

def clz_Torappu_SandboxMapConstTableAddHomeRushDesc(builder, homeRushDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(homeRushDesc), 0)

def clz_Torappu_SandboxMapConstTableAddCrazyRevengeRushGroup(builder, crazyRevengeRushGroup):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(crazyRevengeRushGroup), 0)

def clz_Torappu_SandboxMapConstTableAddHomeBuildModeBgm(builder, homeBuildModeBgm):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(homeBuildModeBgm), 0)

def clz_Torappu_SandboxMapConstTableEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxBaseConstTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxBaseConstTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxBaseConstTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxBaseConstTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxBaseConstTable
    def CookRegularCostItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def CookRegularCostItemIdCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SquadTabNameList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxBaseConstTable
    def SquadTabNameListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SquadTabNameListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxBaseConstTable
    def CharRarityColorList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxBaseConstTable
    def CharRarityColorListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def CharRarityColorListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxBaseConstTable
    def SumFoodLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumBuildingLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumTacticalLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumFoodMatLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumBuildingMatLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumStaminaPotLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def SumGoldLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def ItemLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def BlackBoxSlotCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def ScoutNodeUpgradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def BattleNodeUpgradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def StaminaPotCostOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def StaminaPotItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def StaminapotRedMinCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def StaminapotYellowMinCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def StaminapotGreenMinCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def StaminapotMaxPercentCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def StaminaPotActionPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def GoldItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def ToolboxSlotCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def ToolboxSlotCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def TeamPopulationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBaseConstTable
    def ResearchInformationDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def SettleFailDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def SettleAbortDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBaseConstTable
    def SettleSucDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxBaseConstTableStart(builder):
    builder.StartObject(30)

def clz_Torappu_SandboxBaseConstTableAddCookRegularCostItemId(builder, cookRegularCostItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cookRegularCostItemId), 0)

def clz_Torappu_SandboxBaseConstTableAddCookRegularCostItemIdCnt(builder, cookRegularCostItemIdCnt):
    builder.PrependInt32Slot(1, cookRegularCostItemIdCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddSquadTabNameList(builder, squadTabNameList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(squadTabNameList), 0)

def clz_Torappu_SandboxBaseConstTableStartSquadTabNameListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxBaseConstTableAddCharRarityColorList(builder, charRarityColorList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(charRarityColorList), 0)

def clz_Torappu_SandboxBaseConstTableStartCharRarityColorListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxBaseConstTableAddSumFoodLimitedCount(builder, sumFoodLimitedCount):
    builder.PrependInt32Slot(4, sumFoodLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumBuildingLimitedCount(builder, sumBuildingLimitedCount):
    builder.PrependInt32Slot(5, sumBuildingLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumTacticalLimitedCount(builder, sumTacticalLimitedCount):
    builder.PrependInt32Slot(6, sumTacticalLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumFoodMatLimitedCount(builder, sumFoodMatLimitedCount):
    builder.PrependInt32Slot(7, sumFoodMatLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumBuildingMatLimitedCount(builder, sumBuildingMatLimitedCount):
    builder.PrependInt32Slot(8, sumBuildingMatLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumStaminaPotLimitedCount(builder, sumStaminaPotLimitedCount):
    builder.PrependInt32Slot(9, sumStaminaPotLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddSumGoldLimitedCount(builder, sumGoldLimitedCount):
    builder.PrependInt32Slot(10, sumGoldLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddItemLimitedCount(builder, itemLimitedCount):
    builder.PrependInt32Slot(11, itemLimitedCount, 0)

def clz_Torappu_SandboxBaseConstTableAddBlackBoxSlotCnt(builder, blackBoxSlotCnt):
    builder.PrependInt32Slot(12, blackBoxSlotCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddScoutNodeUpgradeId(builder, scoutNodeUpgradeId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(scoutNodeUpgradeId), 0)

def clz_Torappu_SandboxBaseConstTableAddBattleNodeUpgradeId(builder, battleNodeUpgradeId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(battleNodeUpgradeId), 0)

def clz_Torappu_SandboxBaseConstTableAddStaminaPotCostOnce(builder, staminaPotCostOnce):
    builder.PrependInt32Slot(15, staminaPotCostOnce, 0)

def clz_Torappu_SandboxBaseConstTableAddStaminaPotItemId(builder, staminaPotItemId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(staminaPotItemId), 0)

def clz_Torappu_SandboxBaseConstTableAddStaminapotRedMinCnt(builder, staminapotRedMinCnt):
    builder.PrependInt32Slot(17, staminapotRedMinCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddStaminapotYellowMinCnt(builder, staminapotYellowMinCnt):
    builder.PrependInt32Slot(18, staminapotYellowMinCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddStaminapotGreenMinCnt(builder, staminapotGreenMinCnt):
    builder.PrependInt32Slot(19, staminapotGreenMinCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddStaminapotMaxPercentCnt(builder, staminapotMaxPercentCnt):
    builder.PrependInt32Slot(20, staminapotMaxPercentCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddStaminaPotActionPoint(builder, staminaPotActionPoint):
    builder.PrependInt32Slot(21, staminaPotActionPoint, 0)

def clz_Torappu_SandboxBaseConstTableAddGoldItemId(builder, goldItemId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(goldItemId), 0)

def clz_Torappu_SandboxBaseConstTableAddToolboxSlotCapacity(builder, toolboxSlotCapacity):
    builder.PrependInt32Slot(23, toolboxSlotCapacity, 0)

def clz_Torappu_SandboxBaseConstTableAddToolboxSlotCnt(builder, toolboxSlotCnt):
    builder.PrependInt32Slot(24, toolboxSlotCnt, 0)

def clz_Torappu_SandboxBaseConstTableAddTeamPopulationLimit(builder, teamPopulationLimit):
    builder.PrependInt32Slot(25, teamPopulationLimit, 0)

def clz_Torappu_SandboxBaseConstTableAddResearchInformationDesc(builder, researchInformationDesc):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(researchInformationDesc), 0)

def clz_Torappu_SandboxBaseConstTableAddSettleFailDesc(builder, settleFailDesc):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(settleFailDesc), 0)

def clz_Torappu_SandboxBaseConstTableAddSettleAbortDesc(builder, settleAbortDesc):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(settleAbortDesc), 0)

def clz_Torappu_SandboxBaseConstTableAddSettleSucDesc(builder, settleSucDesc):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(settleSucDesc), 0)

def clz_Torappu_SandboxBaseConstTableEnd(builder):
    return builder.EndObject()



class clz_Torappu_TipData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TipData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TipData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TipData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TipData
    def Tip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_TipData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TipDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TipDataAddTip(builder, tip):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tip), 0)

def clz_Torappu_TipDataAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_TipDataAddCategory(builder, category):
    builder.PrependInt32Slot(2, category, 0)

def clz_Torappu_TipDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxFoodProduceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxFoodProduceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxFoodProduceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxFoodProduceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxFoodProduceData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodProduceData
    def MainMaterialItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxFoodProduceData
    def MainMaterialItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxFoodProduceData
    def MainMaterialItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxFoodProduceData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodProduceData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxFoodProduceDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxFoodProduceDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxFoodProduceDataAddMainMaterialItems(builder, mainMaterialItems):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mainMaterialItems), 0)

def clz_Torappu_SandboxFoodProduceDataStartMainMaterialItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxFoodProduceDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxFoodProduceDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_SandboxFoodProduceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxFoodProduceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxFoodProduceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxFoodProduceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxFoodProduceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxFoodProduceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxFoodProduceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxFoodProduceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxFoodProduceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxFoodProduceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxFoodProduceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxFoodProduceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxFoodmatBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxFoodmatBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxFoodmatBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxFoodmatBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxFoodmatBuffData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodmatBuffData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodmatBuffData
    def BuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodmatBuffData
    def MatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxFoodmatBuffData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxFoodmatBuffDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxFoodmatBuffDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxFoodmatBuffDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxFoodmatBuffDataAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_SandboxFoodmatBuffDataAddMatType(builder, matType):
    builder.PrependInt32Slot(3, matType, 0)

def clz_Torappu_SandboxFoodmatBuffDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_SandboxFoodmatBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxFoodmatBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxFoodmatBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxFoodmatBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxFoodmatBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxFoodmatBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxFoodmatBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxFoodmatBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxFoodmatBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxFoodmatBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxFoodmatBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxFoodmatBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxFoodStaminaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxFoodStaminaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxFoodStaminaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxFoodStaminaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxFoodStaminaData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxFoodStaminaData
    def PotCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxFoodStaminaData
    def FoodStaminaCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxFoodStaminaDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxFoodStaminaDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxFoodStaminaDataAddPotCnt(builder, potCnt):
    builder.PrependInt32Slot(1, potCnt, 0)

def clz_Torappu_SandboxFoodStaminaDataAddFoodStaminaCnt(builder, foodStaminaCnt):
    builder.PrependInt32Slot(2, foodStaminaCnt, 0)

def clz_Torappu_SandboxFoodStaminaDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxFoodStaminaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxFoodStaminaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxFoodStaminaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxFoodStaminaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxFoodStaminaData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxFoodStaminaData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxFoodStaminaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxFoodStaminaDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxFoodStaminaDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxFoodStaminaDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxFoodStaminaDataEnd(builder):
    return builder.EndObject()



class dict__string__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__intStart(builder):
    builder.StartObject(2)

def dict__string__intAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxBuildProduceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxBuildProduceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxBuildProduceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxBuildProduceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxBuildProduceData
    def ItemProduceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceData
    def ItemTypeText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceData
    def MaterialItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxBuildProduceData
    def MaterialItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxBuildProduceData
    def MaterialItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_SandboxBuildProduceDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxBuildProduceDataAddItemProduceId(builder, itemProduceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemProduceId), 0)

def clz_Torappu_SandboxBuildProduceDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxBuildProduceDataAddItemTypeText(builder, itemTypeText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemTypeText), 0)

def clz_Torappu_SandboxBuildProduceDataAddMaterialItems(builder, materialItems):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materialItems), 0)

def clz_Torappu_SandboxBuildProduceDataStartMaterialItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxBuildProduceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxBuildProduceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxBuildProduceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxBuildProduceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxBuildProduceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxBuildProduceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxBuildProduceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxBuildProduceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxBuildProduceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxBuildProduceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxBuildProduceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxBuildProduceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxBuildGoldRatioData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxBuildGoldRatioData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxBuildGoldRatioData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxBuildGoldRatioData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxBuildGoldRatioData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildGoldRatioData
    def Ratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBuildGoldRatioData
    def EffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxBuildGoldRatioDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxBuildGoldRatioDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxBuildGoldRatioDataAddRatio(builder, ratio):
    builder.PrependInt32Slot(1, ratio, 0)

def clz_Torappu_SandboxBuildGoldRatioDataAddEffectDesc(builder, effectDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectDesc), 0)

def clz_Torappu_SandboxBuildGoldRatioDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxBuildingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxBuildingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxBuildingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxBuildingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxBuildingItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildingItemData
    def ItemSubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxBuildingItemData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxBuildingItemDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxBuildingItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxBuildingItemDataAddItemSubType(builder, itemSubType):
    builder.PrependInt32Slot(1, itemSubType, 0)

def clz_Torappu_SandboxBuildingItemDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(2, itemRarity, 0)

def clz_Torappu_SandboxBuildingItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxBuildingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxBuildingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxBuildingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxBuildingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxBuildingItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxBuildingItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxBuildingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxBuildingItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxBuildingItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxBuildingItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxBuildingItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxBuildProduceUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxBuildProduceUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxBuildProduceUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxBuildProduceUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxBuildProduceUnlockData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceUnlockData
    def BuildingEffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceUnlockData
    def BuildingItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxBuildProduceUnlockData
    def BuildingUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxBuildProduceUnlockDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxBuildProduceUnlockDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxBuildProduceUnlockDataAddBuildingEffectDesc(builder, buildingEffectDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buildingEffectDesc), 0)

def clz_Torappu_SandboxBuildProduceUnlockDataAddBuildingItemDesc(builder, buildingItemDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buildingItemDesc), 0)

def clz_Torappu_SandboxBuildProduceUnlockDataAddBuildingUnlockDesc(builder, buildingUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(buildingUnlockDesc), 0)

def clz_Torappu_SandboxBuildProduceUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxBuildProduceUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxBuildProduceUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxBuildProduceUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxBuildProduceUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxBuildProduceUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxBuildProduceUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxBuildProduceUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxBuildProduceUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxBuildProduceUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxBuildProduceUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxBuildProduceUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxCraftItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxCraftItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxCraftItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxCraftItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxCraftItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxCraftItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxCraftItemData
    def GetFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxCraftItemData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxCraftItemData
    def NotObtainedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxCraftItemData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxCraftItemDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxCraftItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxCraftItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxCraftItemDataAddGetFrom(builder, getFrom):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(getFrom), 0)

def clz_Torappu_SandboxCraftItemDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_SandboxCraftItemDataAddNotObtainedDesc(builder, notObtainedDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(notObtainedDesc), 0)

def clz_Torappu_SandboxCraftItemDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(5, itemType, 0)

def clz_Torappu_SandboxCraftItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxCraftItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxCraftItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxCraftItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxCraftItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxCraftItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxCraftItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxCraftItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxCraftItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxCraftItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxCraftItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxCraftItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxItemTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxItemTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxItemTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxItemTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxItemTrapData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemTrapData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemTrapData
    def TrapPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemTrapData
    def TrapLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemTrapData
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemTrapData
    def SkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxItemTrapDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxItemTrapDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxItemTrapDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_SandboxItemTrapDataAddTrapPhase(builder, trapPhase):
    builder.PrependInt32Slot(2, trapPhase, 0)

def clz_Torappu_SandboxItemTrapDataAddTrapLevel(builder, trapLevel):
    builder.PrependInt32Slot(3, trapLevel, 0)

def clz_Torappu_SandboxItemTrapDataAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(4, skillIndex, 0)

def clz_Torappu_SandboxItemTrapDataAddSkillLevel(builder, skillLevel):
    builder.PrependInt32Slot(5, skillLevel, 0)

def clz_Torappu_SandboxItemTrapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxItemTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxItemTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxItemTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxItemTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxItemTrapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxItemTrapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxItemTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxItemTrapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxItemTrapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxItemTrapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxItemTrapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxDevelopmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxDevelopmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxDevelopmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxDevelopmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxDevelopmentData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def PositionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentData
    def PositionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentData
    def FrontNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def NextNodeIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxDevelopmentData
    def NextNodeIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxDevelopmentData
    def NextNodeIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxDevelopmentData
    def BuffLimitedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentData
    def CanBuffResearch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxDevelopmentData
    def BuffResearchDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def BuffIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def NodeTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentData
    def BuffEffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxDevelopmentDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_SandboxDevelopmentDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxDevelopmentDataAddPositionX(builder, positionX):
    builder.PrependInt32Slot(1, positionX, 0)

def clz_Torappu_SandboxDevelopmentDataAddPositionY(builder, positionY):
    builder.PrependInt32Slot(2, positionY, 0)

def clz_Torappu_SandboxDevelopmentDataAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_SandboxDevelopmentDataAddNextNodeIds(builder, nextNodeIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeIds), 0)

def clz_Torappu_SandboxDevelopmentDataStartNextNodeIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxDevelopmentDataAddBuffLimitedId(builder, buffLimitedId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buffLimitedId), 0)

def clz_Torappu_SandboxDevelopmentDataAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(6, tokenCost, 0)

def clz_Torappu_SandboxDevelopmentDataAddCanBuffResearch(builder, canBuffResearch):
    builder.PrependBoolSlot(7, canBuffResearch, 0)

def clz_Torappu_SandboxDevelopmentDataAddBuffResearchDesc(builder, buffResearchDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffResearchDesc), 0)

def clz_Torappu_SandboxDevelopmentDataAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_SandboxDevelopmentDataAddBuffIconId(builder, buffIconId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(buffIconId), 0)

def clz_Torappu_SandboxDevelopmentDataAddNodeTitle(builder, nodeTitle):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTitle), 0)

def clz_Torappu_SandboxDevelopmentDataAddBuffEffectDesc(builder, buffEffectDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(buffEffectDesc), 0)

def clz_Torappu_SandboxDevelopmentDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxDevelopmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxDevelopmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxDevelopmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxDevelopmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxDevelopmentData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxDevelopmentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxDevelopmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxDevelopmentDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxDevelopmentDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxDevelopmentDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxDevelopmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxDevelopmentLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxDevelopmentLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxDevelopmentLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxDevelopmentLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxDevelopmentLimitData
    def BuffLimitedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentLimitData
    def PositionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentLimitData
    def BuffCostLimitedCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxDevelopmentLimitDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxDevelopmentLimitDataAddBuffLimitedId(builder, buffLimitedId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffLimitedId), 0)

def clz_Torappu_SandboxDevelopmentLimitDataAddPositionX(builder, positionX):
    builder.PrependInt32Slot(1, positionX, 0)

def clz_Torappu_SandboxDevelopmentLimitDataAddBuffCostLimitedCount(builder, buffCostLimitedCount):
    builder.PrependInt32Slot(2, buffCostLimitedCount, 0)

def clz_Torappu_SandboxDevelopmentLimitDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxDevelopmentLimitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxDevelopmentLimitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxDevelopmentLimitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxDevelopmentLimitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxDevelopmentLimitData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxDevelopmentLimitData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxDevelopmentLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxDevelopmentLimitDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxDevelopmentLimitDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxDevelopmentLimitDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxDevelopmentLimitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxItemToastData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxItemToastData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxItemToastData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxItemToastData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxItemToastData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemToastData
    def ToastDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemToastData
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxItemToastDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxItemToastDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(0, itemType, 0)

def clz_Torappu_SandboxItemToastDataAddToastDesc(builder, toastDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(toastDesc), 0)

def clz_Torappu_SandboxItemToastDataAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def clz_Torappu_SandboxItemToastDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxItemToastData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxDevelopmentLineSegmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxDevelopmentLineSegmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxDevelopmentLineSegmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def FromNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def PassingNodeIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def PassingNodeIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def PassingNodeIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def FromAxisPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def FromAxisPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def ToAxisPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDevelopmentLineSegmentData
    def ToAxisPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxDevelopmentLineSegmentDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddFromNodeId(builder, fromNodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fromNodeId), 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddPassingNodeIds(builder, passingNodeIds):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(passingNodeIds), 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataStartPassingNodeIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddFromAxisPosX(builder, fromAxisPosX):
    builder.PrependInt32Slot(2, fromAxisPosX, 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddFromAxisPosY(builder, fromAxisPosY):
    builder.PrependInt32Slot(3, fromAxisPosY, 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddToAxisPosX(builder, toAxisPosX):
    builder.PrependInt32Slot(4, toAxisPosX, 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataAddToAxisPosY(builder, toAxisPosY):
    builder.PrependInt32Slot(5, toAxisPosY, 0)

def clz_Torappu_SandboxDevelopmentLineSegmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxRewardItemConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxRewardItemConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxRewardItemConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxRewardItemConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxRewardItemConfigData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxRewardItemConfigData
    def RewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxRewardItemConfigDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxRewardItemConfigDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_SandboxRewardItemConfigDataAddRewardType(builder, rewardType):
    builder.PrependInt32Slot(1, rewardType, 0)

def clz_Torappu_SandboxRewardItemConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxRewardData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxRewardItemConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_SandboxRewardDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxRewardDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_SandboxRewardDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxRewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxRewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxTrapRewardConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxTrapRewardConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxTrapRewardConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxTrapRewardConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxTrapRewardConfigData
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxTrapRewardConfigData
    def RewardItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxTrapRewardConfigData
    def RewardItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxTrapRewardConfigData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxTrapRewardConfigDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxTrapRewardConfigDataAddDropType(builder, dropType):
    builder.PrependInt32Slot(0, dropType, 0)

def clz_Torappu_SandboxTrapRewardConfigDataAddRewardItemId(builder, rewardItemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItemId), 0)

def clz_Torappu_SandboxTrapRewardConfigDataAddRewardItemType(builder, rewardItemType):
    builder.PrependInt32Slot(2, rewardItemType, 0)

def clz_Torappu_SandboxTrapRewardConfigDataAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_SandboxTrapRewardConfigDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxTrapRewardConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxTrapRewardConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxTrapRewardConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxTrapRewardConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxTrapRewardConfigData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxTrapRewardConfigData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxTrapRewardConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxTrapRewardConfigDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxTrapRewardConfigDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxTrapRewardConfigDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxTrapRewardConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxRewardCommonConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxRewardCommonConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxRewardCommonConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxRewardCommonConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxRewardCommonConfig
    def RewardItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxRewardCommonConfig
    def RewardItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxRewardCommonConfig
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxRewardCommonConfigStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxRewardCommonConfigAddRewardItemId(builder, rewardItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItemId), 0)

def clz_Torappu_SandboxRewardCommonConfigAddRewardItemType(builder, rewardItemType):
    builder.PrependInt32Slot(1, rewardItemType, 0)

def clz_Torappu_SandboxRewardCommonConfigAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_SandboxRewardCommonConfigEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxRewardCommonConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxRewardCommonConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxRewardCommonConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxRewardCommonConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxRewardCommonConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxRewardCommonConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxRewardCommonConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxRewardCommonConfigStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxRewardCommonConfigAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxRewardCommonConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxRewardCommonConfigEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxRewardConfigGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxRewardConfigGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxRewardConfigGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxRewardConfigGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxRewardConfigGroupData
    def StagePreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def StagePreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def StagePreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageDefaultPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageDefaultPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageDefaultPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def StageRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def RushRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def TrapRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxTrapRewardConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def TrapRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def TrapRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def EnemyRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxRewardCommonConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def EnemyRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def EnemyRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def KeyWordData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxRewardConfigGroupData
    def KeyWordDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxRewardConfigGroupData
    def KeyWordDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_SandboxRewardConfigGroupDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxRewardConfigGroupDataAddStagePreviewRewardDict(builder, stagePreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stagePreviewRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartStagePreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddStageDefaultPreviewRewardDict(builder, stageDefaultPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageDefaultPreviewRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartStageDefaultPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddRushPreviewRewardDict(builder, rushPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rushPreviewRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartRushPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddStageRewardDict(builder, stageRewardDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartStageRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddRushRewardDict(builder, rushRewardDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rushRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartRushRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddTrapRewardDict(builder, trapRewardDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(trapRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartTrapRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddEnemyRewardDict(builder, enemyRewardDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyRewardDict), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartEnemyRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataAddKeyWordData(builder, keyWordData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(keyWordData), 0)

def clz_Torappu_SandboxRewardConfigGroupDataStartKeyWordDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxRewardConfigGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxStaminaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxStaminaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxStaminaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxStaminaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxStaminaData
    def LevelUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxStaminaData
    def StaminaUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxStaminaDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxStaminaDataAddLevelUpperLimit(builder, levelUpperLimit):
    builder.PrependInt32Slot(0, levelUpperLimit, 0)

def clz_Torappu_SandboxStaminaDataAddStaminaUpperLimit(builder, staminaUpperLimit):
    builder.PrependInt32Slot(1, staminaUpperLimit, 0)

def clz_Torappu_SandboxStaminaDataEnd(builder):
    return builder.EndObject()



class dict__int__list_clz_Torappu_SandboxStaminaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_clz_Torappu_SandboxStaminaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_clz_Torappu_SandboxStaminaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_clz_Torappu_SandboxStaminaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_clz_Torappu_SandboxStaminaData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_clz_Torappu_SandboxStaminaData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxStaminaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_clz_Torappu_SandboxStaminaData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_clz_Torappu_SandboxStaminaData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_clz_Torappu_SandboxStaminaDataStart(builder):
    builder.StartObject(2)

def dict__int__list_clz_Torappu_SandboxStaminaDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_clz_Torappu_SandboxStaminaDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_clz_Torappu_SandboxStaminaDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_clz_Torappu_SandboxStaminaDataEnd(builder):
    return builder.EndObject()



class dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_clz_Torappu_SandboxStaminaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaDataStart(builder):
    builder.StartObject(2)

def dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxNodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxNodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxNodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxNodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxNodeTypeData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxNodeTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeTypeData
    def SubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeTypeData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxNodeTypeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxNodeTypeDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(0, nodeType, 0)

def clz_Torappu_SandboxNodeTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxNodeTypeDataAddSubName(builder, subName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(subName), 0)

def clz_Torappu_SandboxNodeTypeDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxNodeTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxNodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxNodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxNodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxNodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxNodeUpgradeData
    def NodeUpdradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeUpgradeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeUpgradeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeUpgradeData
    def UpgradeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxNodeUpgradeData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxNodeUpgradeData
    def ItemSubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxNodeUpgradeData
    def ItemCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxNodeUpgradeData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxNodeUpgradeDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxNodeUpgradeDataAddNodeUpdradeId(builder, nodeUpdradeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpdradeId), 0)

def clz_Torappu_SandboxNodeUpgradeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxNodeUpgradeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxNodeUpgradeDataAddUpgradeDesc(builder, upgradeDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeDesc), 0)

def clz_Torappu_SandboxNodeUpgradeDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(4, itemType, 0)

def clz_Torappu_SandboxNodeUpgradeDataAddItemSubType(builder, itemSubType):
    builder.PrependInt32Slot(5, itemSubType, 0)

def clz_Torappu_SandboxNodeUpgradeDataAddItemCnt(builder, itemCnt):
    builder.PrependInt32Slot(6, itemCnt, 0)

def clz_Torappu_SandboxNodeUpgradeDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(7, itemRarity, 0)

def clz_Torappu_SandboxNodeUpgradeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxNodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxNodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxNodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxNodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxNodeUpgradeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxNodeUpgradeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxNodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxNodeUpgradeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxNodeUpgradeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxNodeUpgradeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxNodeUpgradeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxWeatherData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxWeatherData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxWeatherData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxWeatherData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxWeatherData
    def WeatherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def WeatherType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxWeatherData
    def WeatherLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxWeatherData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def WeatherTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def WeatherTypeIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxWeatherData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxWeatherDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SandboxWeatherDataAddWeatherId(builder, weatherId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weatherId), 0)

def clz_Torappu_SandboxWeatherDataAddWeatherType(builder, weatherType):
    builder.PrependInt32Slot(1, weatherType, 0)

def clz_Torappu_SandboxWeatherDataAddWeatherLevel(builder, weatherLevel):
    builder.PrependInt32Slot(2, weatherLevel, 0)

def clz_Torappu_SandboxWeatherDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxWeatherDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxWeatherDataAddWeatherTypeName(builder, weatherTypeName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(weatherTypeName), 0)

def clz_Torappu_SandboxWeatherDataAddWeatherTypeIconId(builder, weatherTypeIconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(weatherTypeIconId), 0)

def clz_Torappu_SandboxWeatherDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_SandboxWeatherDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxWeatherDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxWeatherData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxWeatherData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxWeatherData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxWeatherData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxWeatherData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxWeatherData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxWeatherData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxWeatherDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxWeatherDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxWeatherDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxWeatherDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxStageData
    def ActionCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxStageData
    def PowerCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxStageDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_SandboxStageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_SandboxStageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_SandboxStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxStageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_SandboxStageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxStageDataAddActionCost(builder, actionCost):
    builder.PrependInt32Slot(6, actionCost, 0)

def clz_Torappu_SandboxStageDataAddPowerCost(builder, powerCost):
    builder.PrependInt32Slot(7, powerCost, 0)

def clz_Torappu_SandboxStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxEventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxEventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxEventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxEventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxEventData
    def EventSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventData
    def HasThumbtack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_SandboxEventDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxEventDataAddEventSceneId(builder, eventSceneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventSceneId), 0)

def clz_Torappu_SandboxEventDataAddHasThumbtack(builder, hasThumbtack):
    builder.PrependBoolSlot(1, hasThumbtack, 0)

def clz_Torappu_SandboxEventDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxEventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxEventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxEventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxEventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxEventData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxEventData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxEventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxEventDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxEventDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxEventDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxEventDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxEventSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxEventSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxEventSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxEventSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxEventSceneData
    def ChoiceSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventSceneData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxEventSceneData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventSceneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventSceneData
    def Choices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxEventSceneData
    def ChoicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxEventSceneData
    def ChoicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_SandboxEventSceneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxEventSceneDataAddChoiceSceneId(builder, choiceSceneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(choiceSceneId), 0)

def clz_Torappu_SandboxEventSceneDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxEventSceneDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxEventSceneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxEventSceneDataAddChoices(builder, choices):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(choices), 0)

def clz_Torappu_SandboxEventSceneDataStartChoicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxEventSceneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxEventSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxEventSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxEventSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxEventSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxEventSceneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxEventSceneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxEventSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxEventSceneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxEventSceneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxEventSceneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxEventSceneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxEventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxEventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxEventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxEventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxEventChoiceData
    def ChoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventChoiceData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxEventChoiceData
    def CostAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxEventChoiceData
    def FinishScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxEventChoiceData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxEventChoiceData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxEventChoiceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxEventChoiceDataAddChoiceId(builder, choiceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId), 0)

def clz_Torappu_SandboxEventChoiceDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxEventChoiceDataAddCostAction(builder, costAction):
    builder.PrependInt32Slot(2, costAction, 0)

def clz_Torappu_SandboxEventChoiceDataAddFinishScene(builder, finishScene):
    builder.PrependBoolSlot(3, finishScene, 0)

def clz_Torappu_SandboxEventChoiceDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxEventChoiceDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxEventChoiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxEventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxEventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxEventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxEventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxEventChoiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxEventChoiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxEventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxEventChoiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxEventChoiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxEventChoiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxEventChoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxEventTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxEventTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxEventTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxEventTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxEventTypeData
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxEventTypeData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxEventTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxEventTypeDataAddEventType(builder, eventType):
    builder.PrependInt32Slot(0, eventType, 0)

def clz_Torappu_SandboxEventTypeDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxEventTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxEventTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxMissionData
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMissionData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMissionData
    def EffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxMissionData
    def CostAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxMissionData
    def CharCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxMissionData
    def ProfessionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxMissionData
    def ProfessionIdsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxMissionData
    def ProfessionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxMissionData
    def ProfessionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxMissionData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxMissionData
    def CostStamina(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxMissionDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxMissionDataAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_SandboxMissionDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxMissionDataAddEffectDesc(builder, effectDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectDesc), 0)

def clz_Torappu_SandboxMissionDataAddCostAction(builder, costAction):
    builder.PrependInt32Slot(3, costAction, 0)

def clz_Torappu_SandboxMissionDataAddCharCnt(builder, charCnt):
    builder.PrependInt32Slot(4, charCnt, 0)

def clz_Torappu_SandboxMissionDataAddProfessionIds(builder, professionIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(professionIds), 0)

def clz_Torappu_SandboxMissionDataStartProfessionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxMissionDataAddProfession(builder, profession):
    builder.PrependInt32Slot(6, profession, 0)

def clz_Torappu_SandboxMissionDataAddCostStamina(builder, costStamina):
    builder.PrependInt32Slot(7, costStamina, 0)

def clz_Torappu_SandboxMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxUnitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxUnitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxUnitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxUnitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxUnitData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxUnitData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxUnitDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxUnitDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxUnitDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxUnitDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxUnitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxUnitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxUnitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxUnitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxUnitData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxUnitData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxUnitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxUnitDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxUnitDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxUnitDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxUnitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxDailyDescTemplateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxDailyDescTemplateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxDailyDescTemplateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxDailyDescTemplateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxDailyDescTemplateData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxDailyDescTemplateData
    def TemplateDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxDailyDescTemplateData
    def TemplateDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxDailyDescTemplateData
    def TemplateDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_SandboxDailyDescTemplateDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxDailyDescTemplateDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_SandboxDailyDescTemplateDataAddTemplateDesc(builder, templateDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(templateDesc), 0)

def clz_Torappu_SandboxDailyDescTemplateDataStartTemplateDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxDailyDescTemplateDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxDailyDescTemplateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Battle_Sandbox_RushEnemyConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Battle_Sandbox_RushEnemyConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Battle_Sandbox_RushEnemyConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Battle_Sandbox_RushEnemyConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Battle_Sandbox_RushEnemyConfig
    def EnemyKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyConfig
    def BranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyConfig
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyConfig
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Battle_Sandbox_RushEnemyConfigStart(builder):
    builder.StartObject(4)

def clz_Torappu_Battle_Sandbox_RushEnemyConfigAddEnemyKey(builder, enemyKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyKey), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyConfigAddBranchId(builder, branchId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(branchId), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyConfigAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_Battle_Sandbox_RushEnemyConfigAddInterval(builder, interval):
    builder.PrependFloat32Slot(3, interval, 0.0)

def clz_Torappu_Battle_Sandbox_RushEnemyConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Battle_Sandbox_RushEnemyGroupConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def EnemyGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Enemy(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Battle_Sandbox_RushEnemyConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def EnemyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def EnemyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def DynamicEnemy(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def DynamicEnemyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def DynamicEnemyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigStart(builder):
    builder.StartObject(4)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddEnemyGroupKey(builder, enemyGroupKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyGroupKey), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddWeight(builder, weight):
    builder.PrependInt32Slot(1, weight, 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddEnemy(builder, enemy):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enemy), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigStartEnemyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddDynamicEnemy(builder, dynamicEnemy):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicEnemy), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigStartDynamicEnemyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRefStart(builder):
    builder.StartObject(2)

def clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRefAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRefAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRefEnd(builder):
    return builder.EndObject()



class clz_Torappu_Battle_Sandbox_RushEnemyGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Battle_Sandbox_RushEnemyGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Battle_Sandbox_RushEnemyGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyGroupConfigs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxEnemyRushType__list_clz_Torappu_Battle_Sandbox_RushEnemyGroupConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyGroupConfigsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyGroupConfigsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyDbRef(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Battle_Sandbox_RushEnemyGroup_RushEnemyDBRef()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyDbRefLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Battle_Sandbox_RushEnemyGroup
    def RushEnemyDbRefIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Battle_Sandbox_RushEnemyGroupStart(builder):
    builder.StartObject(2)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupAddRushEnemyGroupConfigs(builder, rushEnemyGroupConfigs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyGroupConfigs), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupStartRushEnemyGroupConfigsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupAddRushEnemyDbRef(builder, rushEnemyDbRef):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyDbRef), 0)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupStartRushEnemyDbRefVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Battle_Sandbox_RushEnemyGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData_Selector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData_Selector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData_Selector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData_Selector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData_Selector
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def CharIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_RuneData_SelectorStart(builder):
    builder.StartObject(10)

def clz_Torappu_RuneData_SelectorAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(0, professionMask, 0)

def clz_Torappu_RuneData_SelectorAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(1, buildableMask, 0)

def clz_Torappu_RuneData_SelectorAddCharIdFilter(builder, charIdFilter):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartCharIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdFilter(builder, enemyIdFilter):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdExcludeFilter(builder, enemyIdExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSkillIdFilter(builder, skillIdFilter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(skillIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartSkillIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddTileKeyFilter(builder, tileKeyFilter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tileKeyFilter), 0)

def clz_Torappu_RuneData_SelectorStartTileKeyFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddGroupTagFilter(builder, groupTagFilter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(groupTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartGroupTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagFilter(builder, filterTagFilter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSubProfessionExcludeFilter(builder, subProfessionExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartSubProfessionExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneData
    def Selector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneData_Selector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RuneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RuneDataAddSelector(builder, selector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selector), 0)

def clz_Torappu_RuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_PackedRuneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Points(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RuneTable_PackedRuneData
    def MutexGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RuneTable_PackedRuneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddPoints(builder, points):
    builder.PrependFloat32Slot(1, points, 0.0)

def clz_Torappu_RuneTable_PackedRuneDataAddMutexGroupKey(builder, mutexGroupKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mutexGroupKey), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_PackedRuneDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LegacyInLevelRuneData
    def DifficultyMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask):
    builder.PrependInt32Slot(0, difficultyMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(2, professionMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(3, buildableMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxActTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxActTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxActTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxActTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxActTable
    def MapConstTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxMapConstTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BaseConstTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxBaseConstTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BattleLoadingTips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BattleLoadingTipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def BattleLoadingTipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxActTable
    def FoodProduceDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxFoodProduceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def FoodProduceDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def FoodProduceDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxActTable
    def FoodmatDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxFoodmatBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def FoodmatDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def FoodmatDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxActTable
    def FoodmatBuffDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxFoodmatBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def FoodmatBuffDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def FoodmatBuffDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxActTable
    def FoodStaminaDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxFoodStaminaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def FoodStaminaDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def FoodStaminaDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SandboxActTable
    def BuildProduceDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxBuildProduceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BuildProduceDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def BuildProduceDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SandboxActTable
    def BuildGoldRatioDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxBuildGoldRatioData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BuildGoldRatioDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def BuildGoldRatioDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_SandboxActTable
    def BuildingItemDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxBuildingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BuildingItemDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def BuildingItemDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_SandboxActTable
    def BuildProduceUnlockDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxBuildProduceUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def BuildProduceUnlockDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def BuildProduceUnlockDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_SandboxActTable
    def CraftItemDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxCraftItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def CraftItemDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def CraftItemDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_SandboxActTable
    def ItemTrapDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxItemTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def ItemTrapDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def ItemTrapDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_SandboxActTable
    def TrapDeployLimitDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def TrapDeployLimitDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def TrapDeployLimitDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_SandboxActTable
    def DevelopmentDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxDevelopmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def DevelopmentDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def DevelopmentDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_SandboxActTable
    def DevelopmentLimitDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxDevelopmentLimitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def DevelopmentLimitDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def DevelopmentLimitDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_SandboxActTable
    def ItemToastDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxItemType__clz_Torappu_SandboxItemToastData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def ItemToastDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def ItemToastDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_SandboxActTable
    def DevelopmentLineSegmentDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxDevelopmentLineSegmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def DevelopmentLineSegmentDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def DevelopmentLineSegmentDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_SandboxActTable
    def RewardConfigDatas(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxRewardConfigGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def CharStaminaMapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_dict__int__list_clz_Torappu_SandboxStaminaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def CharStaminaMappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def CharStaminaMappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # clz_Torappu_SandboxActTable
    def NodeTypeDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxNodeType__clz_Torappu_SandboxNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def NodeTypeDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def NodeTypeDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # clz_Torappu_SandboxActTable
    def NodeUpgradeDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxNodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def NodeUpgradeDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def NodeUpgradeDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # clz_Torappu_SandboxActTable
    def WeatherDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxWeatherData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def WeatherDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def WeatherDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # clz_Torappu_SandboxActTable
    def StageDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def StageDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def StageDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # clz_Torappu_SandboxActTable
    def EventDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxEventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def EventDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def EventDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_SandboxActTable
    def EventSceneDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxEventSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def EventSceneDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def EventSceneDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_SandboxActTable
    def EventChoiceDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxEventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def EventChoiceDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def EventChoiceDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # clz_Torappu_SandboxActTable
    def EventTypeDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxEventType__clz_Torappu_SandboxEventTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def EventTypeDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def EventTypeDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # clz_Torappu_SandboxActTable
    def MissionDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def MissionDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def MissionDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_SandboxActTable
    def UnitData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxUnitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def UnitDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def UnitDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_SandboxActTable
    def DailyDescTemplateDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxDailyDescTemplateType__clz_Torappu_SandboxDailyDescTemplateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def DailyDescTemplateDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def DailyDescTemplateDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # clz_Torappu_SandboxActTable
    def RushAvgDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def RushAvgDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def RushAvgDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # clz_Torappu_SandboxActTable
    def RushEnemyGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Battle_Sandbox_RushEnemyGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def RuneDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def RuneDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def RuneDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # clz_Torappu_SandboxActTable
    def ItemRuneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxActTable
    def ItemRuneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxActTable
    def ItemRuneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

def clz_Torappu_SandboxActTableStart(builder):
    builder.StartObject(35)

def clz_Torappu_SandboxActTableAddMapConstTable(builder, mapConstTable):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapConstTable), 0)

def clz_Torappu_SandboxActTableAddBaseConstTable(builder, baseConstTable):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(baseConstTable), 0)

def clz_Torappu_SandboxActTableAddBattleLoadingTips(builder, battleLoadingTips):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(battleLoadingTips), 0)

def clz_Torappu_SandboxActTableStartBattleLoadingTipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddFoodProduceDatas(builder, foodProduceDatas):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(foodProduceDatas), 0)

def clz_Torappu_SandboxActTableStartFoodProduceDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddFoodmatDatas(builder, foodmatDatas):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(foodmatDatas), 0)

def clz_Torappu_SandboxActTableStartFoodmatDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddFoodmatBuffDatas(builder, foodmatBuffDatas):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(foodmatBuffDatas), 0)

def clz_Torappu_SandboxActTableStartFoodmatBuffDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddFoodStaminaDatas(builder, foodStaminaDatas):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(foodStaminaDatas), 0)

def clz_Torappu_SandboxActTableStartFoodStaminaDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddBuildProduceDatas(builder, buildProduceDatas):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buildProduceDatas), 0)

def clz_Torappu_SandboxActTableStartBuildProduceDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddBuildGoldRatioDatas(builder, buildGoldRatioDatas):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buildGoldRatioDatas), 0)

def clz_Torappu_SandboxActTableStartBuildGoldRatioDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddBuildingItemDatas(builder, buildingItemDatas):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(buildingItemDatas), 0)

def clz_Torappu_SandboxActTableStartBuildingItemDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddBuildProduceUnlockDatas(builder, buildProduceUnlockDatas):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(buildProduceUnlockDatas), 0)

def clz_Torappu_SandboxActTableStartBuildProduceUnlockDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddCraftItemDatas(builder, craftItemDatas):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(craftItemDatas), 0)

def clz_Torappu_SandboxActTableStartCraftItemDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddItemTrapDatas(builder, itemTrapDatas):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(itemTrapDatas), 0)

def clz_Torappu_SandboxActTableStartItemTrapDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddTrapDeployLimitDatas(builder, trapDeployLimitDatas):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(trapDeployLimitDatas), 0)

def clz_Torappu_SandboxActTableStartTrapDeployLimitDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddDevelopmentDatas(builder, developmentDatas):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(developmentDatas), 0)

def clz_Torappu_SandboxActTableStartDevelopmentDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddDevelopmentLimitDatas(builder, developmentLimitDatas):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(developmentLimitDatas), 0)

def clz_Torappu_SandboxActTableStartDevelopmentLimitDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddItemToastDatas(builder, itemToastDatas):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(itemToastDatas), 0)

def clz_Torappu_SandboxActTableStartItemToastDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddDevelopmentLineSegmentDatas(builder, developmentLineSegmentDatas):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(developmentLineSegmentDatas), 0)

def clz_Torappu_SandboxActTableStartDevelopmentLineSegmentDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddRewardConfigDatas(builder, rewardConfigDatas):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(rewardConfigDatas), 0)

def clz_Torappu_SandboxActTableAddCharStaminaMapping(builder, charStaminaMapping):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(charStaminaMapping), 0)

def clz_Torappu_SandboxActTableStartCharStaminaMappingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddNodeTypeDatas(builder, nodeTypeDatas):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTypeDatas), 0)

def clz_Torappu_SandboxActTableStartNodeTypeDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddNodeUpgradeDatas(builder, nodeUpgradeDatas):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpgradeDatas), 0)

def clz_Torappu_SandboxActTableStartNodeUpgradeDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddWeatherDatas(builder, weatherDatas):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(weatherDatas), 0)

def clz_Torappu_SandboxActTableStartWeatherDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddStageDatas(builder, stageDatas):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(stageDatas), 0)

def clz_Torappu_SandboxActTableStartStageDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddEventDatas(builder, eventDatas):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(eventDatas), 0)

def clz_Torappu_SandboxActTableStartEventDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddEventSceneDatas(builder, eventSceneDatas):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(eventSceneDatas), 0)

def clz_Torappu_SandboxActTableStartEventSceneDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddEventChoiceDatas(builder, eventChoiceDatas):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(eventChoiceDatas), 0)

def clz_Torappu_SandboxActTableStartEventChoiceDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddEventTypeDatas(builder, eventTypeDatas):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(eventTypeDatas), 0)

def clz_Torappu_SandboxActTableStartEventTypeDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddMissionDatas(builder, missionDatas):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(missionDatas), 0)

def clz_Torappu_SandboxActTableStartMissionDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddUnitData(builder, unitData):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(unitData), 0)

def clz_Torappu_SandboxActTableStartUnitDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddDailyDescTemplateDatas(builder, dailyDescTemplateDatas):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(dailyDescTemplateDatas), 0)

def clz_Torappu_SandboxActTableStartDailyDescTemplateDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddRushAvgDict(builder, rushAvgDict):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(rushAvgDict), 0)

def clz_Torappu_SandboxActTableStartRushAvgDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddRushEnemyGroup(builder, rushEnemyGroup):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyGroup), 0)

def clz_Torappu_SandboxActTableAddRuneDatas(builder, runeDatas):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(runeDatas), 0)

def clz_Torappu_SandboxActTableStartRuneDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableAddItemRuneList(builder, itemRuneList):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(itemRuneList), 0)

def clz_Torappu_SandboxActTableStartItemRuneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxActTableEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxActTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxActTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxActTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxActTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxActTable
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxActTable
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxActTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxActTableStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxActTableAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxActTableAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxActTableEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemData
    def ItemUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxItemData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemData
    def RecommendTypeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxItemData
    def RecommendTypeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxItemData
    def RecommendTypeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxItemData
    def RecommendTypeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SandboxItemData
    def RecommendPriority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxItemData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxItemDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SandboxItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxItemDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_SandboxItemDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_SandboxItemDataAddItemUsage(builder, itemUsage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemUsage), 0)

def clz_Torappu_SandboxItemDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_SandboxItemDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(5, itemRarity, 0)

def clz_Torappu_SandboxItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(6, sortId, 0)

def clz_Torappu_SandboxItemDataAddRecommendTypeList(builder, recommendTypeList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(recommendTypeList), 0)

def clz_Torappu_SandboxItemDataStartRecommendTypeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxItemDataAddRecommendPriority(builder, recommendPriority):
    builder.PrependInt32Slot(8, recommendPriority, 0)

def clz_Torappu_SandboxItemDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_SandboxItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxTable
    def SandboxActTables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxActTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxTable
    def SandboxActTablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxTable
    def SandboxActTablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxTable
    def ItemDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxTable
    def ItemDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxTable
    def ItemDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_SandboxTableStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxTableAddSandboxActTables(builder, sandboxActTables):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sandboxActTables), 0)

def clz_Torappu_SandboxTableStartSandboxActTablesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxTableAddItemDatas(builder, itemDatas):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemDatas), 0)

def clz_Torappu_SandboxTableStartItemDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_SandboxTable
