# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_RarityRank(object):
    TIER_1 = 0
    TIER_2 = 1
    TIER_3 = 2
    TIER_4 = 3
    TIER_5 = 4
    TIER_6 = 5
    E_NUM = 6


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_CharacterData_PotentialRank_TypeEnum(object):
    BUFF = 0
    CUSTOM = 1


class enum__Torappu_AbnormalFlag(object):
    STUNNED = 0
    SP_RECOVER_STOPPED = 1
    TARGET_FREE = 2
    BLOCK_FREE = 3
    HIDDEN = 4
    INVINCIBLE = 5
    UNDEADABLE = 6
    HEAL_FREE = 7
    UNBALANCE_IMMUNE = 8
    INVISIBLE = 9
    UNUSED_PLACEHOLDER_1 = 10
    DISARMED = 11
    SILENCED = 12
    UNMOVABLE = 13
    UNUSED_PLACEHOLDER_2 = 14
    ALLY_TARGET_FREE = 15
    FROZEN = 16
    CAMOUFLAGE = 17
    FORCE_DISARMED = 18
    STUNNED_NO_AMPLIFY_DAMAGE = 19
    DISABLE_COMBAT = 20
    ELEMENT_FREE_ALL = 21
    UNMOVABLE_PRIVATE = 22
    COLD = 23
    SKILL_NOT_ACTIVATABLE = 24
    LEVITATE = 25
    DURANCE = 26
    NOT_WITHDRAWABLE = 27
    OUT_OF_GROUND = 28
    SP_MODIFY_STOPPED = 29
    ANTI_STATUS_RESISTABLE = 30
    DISARMED_COMBAT = 31
    TOWER_TARGET_FREE = 32
    FEARED = 33
    SKILL_ACTIVABLE_IN_ABNORMAL = 34
    E_NUM = 35


class enum__Torappu_AbnormalCombo(object):
    SLEEPING = 0
    SHELTERING = 1
    E_NUM = 2


class enum__Torappu_AttributeType(object):
    MAX_HP = 0
    ATK = 1
    DEF = 2
    MAGIC_RESISTANCE = 3
    COST = 4
    BLOCK_CNT = 5
    MOVE_SPEED = 6
    ATTACK_SPEED = 7
    BASE_ATTACK_TIME = 8
    RESERVED_0 = 9
    RESERVED_1 = 10
    RESERVED_2 = 11
    RESERVED_3 = 12
    HP_RECOVERY_PER_SEC = 13
    SP_RECOVERY_PER_SEC = 14
    ABILITY_RANGE_FORWARD_EXTEND = 15
    MAX_DEPLOY_COUNT = 16
    DEF_PENETRATE = 17
    MAGIC_RESIST_PENETRATE = 18
    HP_RECOVERY_PER_SEC_BY_MAX_HP_RATIO = 19
    TAUNT_LEVEL = 20
    RESPAWN_TIME = 21
    MAX_DECK_STACK_CNT = 22
    MASS_LEVEL = 23
    BASE_FORCE_LEVEL = 24
    DEF_PENETRATE_FIXED = 25
    ONE_MINUS_STATUS_RESISTANCE = 26
    MAGIC_RESIST_PENETRATE_FIXED = 27
    MAX_EP = 28
    EP_RECOVERY_PER_SEC = 29
    SP_RECOVER_RATIO = 30
    EP_DAMAGE_RESISTANCE = 31
    EP_RESISTANCE = 32
    DAMAGE_HITRATE_PHYSICAL = 33
    DAMAGE_HITRATE_MAGICAL = 34
    E_NUM = 35


class enum__Torappu_AttributeModifierData_AttributeModifier_FormulaItemType(object):
    ADDITION = 0
    MULTIPLIER = 1
    FINAL_ADDITION = 2
    FINAL_SCALER = 3


class enum__Torappu_PlayerBattleRank(object):
    ERR_ZERO = 0
    FAIL = 1
    PASS = 2
    COMPLETE = 3


class clz_Torappu_CharPatchData_PatchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharPatchData_PatchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharPatchData_PatchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharPatchData_PatchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharPatchData_PatchInfo
    def TmplIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_CharPatchData_PatchInfo
    def TmplIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData_PatchInfo
    def TmplIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_CharPatchData_PatchInfo
    def Default(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CharPatchData_PatchInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharPatchData_PatchInfoAddTmplIds(builder, tmplIds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tmplIds), 0)

def clz_Torappu_CharPatchData_PatchInfoStartTmplIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchData_PatchInfoAddDefault(builder, default):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(default), 0)

def clz_Torappu_CharPatchData_PatchInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharPatchData_PatchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharPatchData_PatchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharPatchData_PatchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharPatchData_PatchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharPatchData_PatchInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharPatchData_PatchInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharPatchData_PatchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharPatchData_PatchInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharPatchData_PatchInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharPatchData_PatchInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharPatchData_PatchInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_UnlockCondition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_UnlockCondition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_UnlockCondition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_UnlockCondition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_UnlockCondition
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_UnlockCondition
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_UnlockConditionStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_UnlockConditionAddPhase(builder, phase):
    builder.PrependInt32Slot(0, phase, 0)

def clz_Torappu_CharacterData_UnlockConditionAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterData_UnlockConditionEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_TraitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_TraitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_TraitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_TraitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_TraitData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_TraitData
    def RequiredPotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_TraitData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_TraitData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_TraitData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_CharacterData_TraitData
    def OverrideDescripton(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_TraitData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_TraitData
    def RangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CharacterData_TraitDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_CharacterData_TraitDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_CharacterData_TraitDataAddRequiredPotentialRank(builder, requiredPotentialRank):
    builder.PrependInt32Slot(1, requiredPotentialRank, 0)

def clz_Torappu_CharacterData_TraitDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_CharacterData_TraitDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_TraitDataAddOverrideDescripton(builder, overrideDescripton):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(overrideDescripton), 0)

def clz_Torappu_CharacterData_TraitDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_CharacterData_TraitDataAddRangeId(builder, rangeId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rangeId), 0)

def clz_Torappu_CharacterData_TraitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_TraitDataBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_TraitDataBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_TraitDataBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_TraitDataBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_TraitDataBundle
    def Candidates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_TraitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_TraitDataBundle
    def CandidatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_TraitDataBundle
    def CandidatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_CharacterData_TraitDataBundleStart(builder):
    builder.StartObject(1)

def clz_Torappu_CharacterData_TraitDataBundleAddCandidates(builder, candidates):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(candidates), 0)

def clz_Torappu_CharacterData_TraitDataBundleStartCandidatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_TraitDataBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributesData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributesData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributesData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributesData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributesData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Def_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MaxDeckStackCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_AttributesDataStart(builder):
    builder.StartObject(24)

def clz_Torappu_AttributesDataAddMaxHp(builder, maxHp):
    builder.PrependInt32Slot(0, maxHp, 0)

def clz_Torappu_AttributesDataAddAtk(builder, atk):
    builder.PrependInt32Slot(1, atk, 0)

def clz_Torappu_AttributesDataAddDef_(builder, def_):
    builder.PrependInt32Slot(2, def_, 0)

def clz_Torappu_AttributesDataAddMagicResistance(builder, magicResistance):
    builder.PrependFloat32Slot(3, magicResistance, 0.0)

def clz_Torappu_AttributesDataAddCost(builder, cost):
    builder.PrependInt32Slot(4, cost, 0)

def clz_Torappu_AttributesDataAddBlockCnt(builder, blockCnt):
    builder.PrependInt32Slot(5, blockCnt, 0)

def clz_Torappu_AttributesDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependFloat32Slot(6, moveSpeed, 0.0)

def clz_Torappu_AttributesDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependFloat32Slot(7, attackSpeed, 0.0)

def clz_Torappu_AttributesDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependFloat32Slot(8, baseAttackTime, 0.0)

def clz_Torappu_AttributesDataAddRespawnTime(builder, respawnTime):
    builder.PrependInt32Slot(9, respawnTime, 0)

def clz_Torappu_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependFloat32Slot(10, hpRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependFloat32Slot(11, spRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependInt32Slot(12, maxDeployCount, 0)

def clz_Torappu_AttributesDataAddMaxDeckStackCnt(builder, maxDeckStackCnt):
    builder.PrependInt32Slot(13, maxDeckStackCnt, 0)

def clz_Torappu_AttributesDataAddTauntLevel(builder, tauntLevel):
    builder.PrependInt32Slot(14, tauntLevel, 0)

def clz_Torappu_AttributesDataAddMassLevel(builder, massLevel):
    builder.PrependInt32Slot(15, massLevel, 0)

def clz_Torappu_AttributesDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependInt32Slot(16, baseForceLevel, 0)

def clz_Torappu_AttributesDataAddStunImmune(builder, stunImmune):
    builder.PrependBoolSlot(17, stunImmune, 0)

def clz_Torappu_AttributesDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependBoolSlot(18, silenceImmune, 0)

def clz_Torappu_AttributesDataAddSleepImmune(builder, sleepImmune):
    builder.PrependBoolSlot(19, sleepImmune, 0)

def clz_Torappu_AttributesDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependBoolSlot(20, frozenImmune, 0)

def clz_Torappu_AttributesDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependBoolSlot(21, levitateImmune, 0)

def clz_Torappu_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependBoolSlot(22, disarmedCombatImmune, 0)

def clz_Torappu_AttributesDataAddFearedImmune(builder, fearedImmune):
    builder.PrependBoolSlot(23, fearedImmune, 0)

def clz_Torappu_AttributesDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_Start(builder):
    builder.StartObject(2)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_AddLevel(builder, level):
    builder.PrependInt32Slot(0, level, 0)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_AddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_End(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_PhaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_PhaseData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_PhaseData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_PhaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_PhaseData
    def CharacterPrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_PhaseData
    def RangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_PhaseData
    def MaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_PhaseData
    def AttributesKeyFrames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesData_Torappu_AttributesData_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_PhaseData
    def AttributesKeyFramesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_PhaseData
    def AttributesKeyFramesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_CharacterData_PhaseData
    def EvolveCost(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_PhaseData
    def EvolveCostLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_PhaseData
    def EvolveCostIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_CharacterData_PhaseDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_CharacterData_PhaseDataAddCharacterPrefabKey(builder, characterPrefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterPrefabKey), 0)

def clz_Torappu_CharacterData_PhaseDataAddRangeId(builder, rangeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rangeId), 0)

def clz_Torappu_CharacterData_PhaseDataAddMaxLevel(builder, maxLevel):
    builder.PrependInt32Slot(2, maxLevel, 0)

def clz_Torappu_CharacterData_PhaseDataAddAttributesKeyFrames(builder, attributesKeyFrames):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributesKeyFrames), 0)

def clz_Torappu_CharacterData_PhaseDataStartAttributesKeyFramesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_PhaseDataAddEvolveCost(builder, evolveCost):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(evolveCost), 0)

def clz_Torappu_CharacterData_PhaseDataStartEvolveCostVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_PhaseDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_MainSkill_SpecializeLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_MainSkill_SpecializeLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_MainSkill_SpecializeLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def UnlockCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def LvlUpTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def LevelUpCost(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def LevelUpCostLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_MainSkill_SpecializeLevelData
    def LevelUpCostIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataAddUnlockCond(builder, unlockCond):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCond), 0)

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataAddLvlUpTime(builder, lvlUpTime):
    builder.PrependInt32Slot(1, lvlUpTime, 0)

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataAddLevelUpCost(builder, levelUpCost):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(levelUpCost), 0)

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataStartLevelUpCostVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_MainSkill_SpecializeLevelDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_MainSkill(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_MainSkill()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_MainSkill(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_MainSkill
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_MainSkill
    def SkillId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_MainSkill
    def OverridePrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_MainSkill
    def OverrideTokenKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_MainSkill
    def LevelUpCostCond(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_MainSkill_SpecializeLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_MainSkill
    def LevelUpCostCondLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_MainSkill
    def LevelUpCostCondIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_CharacterData_MainSkill
    def UnlockCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_CharacterData_MainSkillStart(builder):
    builder.StartObject(5)

def clz_Torappu_CharacterData_MainSkillAddSkillId(builder, skillId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(skillId), 0)

def clz_Torappu_CharacterData_MainSkillAddOverridePrefabKey(builder, overridePrefabKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(overridePrefabKey), 0)

def clz_Torappu_CharacterData_MainSkillAddOverrideTokenKey(builder, overrideTokenKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(overrideTokenKey), 0)

def clz_Torappu_CharacterData_MainSkillAddLevelUpCostCond(builder, levelUpCostCond):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(levelUpCostCond), 0)

def clz_Torappu_CharacterData_MainSkillStartLevelUpCostCondVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_MainSkillAddUnlockCond(builder, unlockCond):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCond), 0)

def clz_Torappu_CharacterData_MainSkillEnd(builder):
    return builder.EndObject()



class dict__string__bool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__bool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__bool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__bool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__bool
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__bool
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def dict__string__boolStart(builder):
    builder.StartObject(2)

def dict__string__boolAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__boolAddValue(builder, value):
    builder.PrependBoolSlot(1, value, 0)

def dict__string__boolEnd(builder):
    return builder.EndObject()



class clz_Torappu_TalentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TalentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TalentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TalentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TalentData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TalentData
    def RequiredPotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TalentData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TalentData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TalentData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TalentData
    def RangeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TalentData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TalentData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TalentData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_TalentData
    def TokenKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TalentData
    def IsHideTalent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_TalentDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_TalentDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_TalentDataAddRequiredPotentialRank(builder, requiredPotentialRank):
    builder.PrependInt32Slot(1, requiredPotentialRank, 0)

def clz_Torappu_TalentDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_TalentDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_TalentDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_TalentDataAddRangeId(builder, rangeId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rangeId), 0)

def clz_Torappu_TalentDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_TalentDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TalentDataAddTokenKey(builder, tokenKey):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tokenKey), 0)

def clz_Torappu_TalentDataAddIsHideTalent(builder, isHideTalent):
    builder.PrependBoolSlot(8, isHideTalent, 0)

def clz_Torappu_TalentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_TalentDataBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_TalentDataBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_TalentDataBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_TalentDataBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_TalentDataBundle
    def Candidates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TalentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_TalentDataBundle
    def CandidatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_TalentDataBundle
    def CandidatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_CharacterData_TalentDataBundleStart(builder):
    builder.StartObject(1)

def clz_Torappu_CharacterData_TalentDataBundleAddCandidates(builder, candidates):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(candidates), 0)

def clz_Torappu_CharacterData_TalentDataBundleStartCandidatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_TalentDataBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributeModifierData_AttributeModifier(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributeModifierData_AttributeModifier()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributeModifierData_AttributeModifier(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributeModifierData_AttributeModifier
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributeModifierData_AttributeModifier
    def AttributeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributeModifierData_AttributeModifier
    def FormulaItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributeModifierData_AttributeModifier
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributeModifierData_AttributeModifier
    def LoadFromBlackboard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributeModifierData_AttributeModifier
    def FetchBaseValueFromSourceEntity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_AttributeModifierData_AttributeModifierStart(builder):
    builder.StartObject(5)

def clz_Torappu_AttributeModifierData_AttributeModifierAddAttributeType(builder, attributeType):
    builder.PrependInt32Slot(0, attributeType, 0)

def clz_Torappu_AttributeModifierData_AttributeModifierAddFormulaItem(builder, formulaItem):
    builder.PrependInt32Slot(1, formulaItem, 0)

def clz_Torappu_AttributeModifierData_AttributeModifierAddValue(builder, value):
    builder.PrependFloat32Slot(2, value, 0.0)

def clz_Torappu_AttributeModifierData_AttributeModifierAddLoadFromBlackboard(builder, loadFromBlackboard):
    builder.PrependBoolSlot(3, loadFromBlackboard, 0)

def clz_Torappu_AttributeModifierData_AttributeModifierAddFetchBaseValueFromSourceEntity(builder, fetchBaseValueFromSourceEntity):
    builder.PrependBoolSlot(4, fetchBaseValueFromSourceEntity, 0)

def clz_Torappu_AttributeModifierData_AttributeModifierEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributeModifierData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributeModifierData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributeModifierData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributeModifierData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributeModifierData
    def AbnormalFlags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalFlagsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalFlagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalFlagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_AttributeModifierData
    def AbnormalImmunes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalImmunesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalImmunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalImmunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_AttributeModifierData
    def AbnormalAntis(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalAntisAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalAntisLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalAntisIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_AttributeModifierData
    def AbnormalCombos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalCombosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalCombosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalCombosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_AttributeModifierData
    def AbnormalComboImmunes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalComboImmunesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalComboImmunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AbnormalComboImmunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_AttributeModifierData
    def AttributeModifiers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_AttributeModifierData_AttributeModifier()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AttributeModifierData
    def AttributeModifiersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AttributeModifierData
    def AttributeModifiersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_AttributeModifierDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_AttributeModifierDataAddAbnormalFlags(builder, abnormalFlags):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(abnormalFlags), 0)

def clz_Torappu_AttributeModifierDataStartAbnormalFlagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataAddAbnormalImmunes(builder, abnormalImmunes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(abnormalImmunes), 0)

def clz_Torappu_AttributeModifierDataStartAbnormalImmunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataAddAbnormalAntis(builder, abnormalAntis):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(abnormalAntis), 0)

def clz_Torappu_AttributeModifierDataStartAbnormalAntisVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataAddAbnormalCombos(builder, abnormalCombos):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(abnormalCombos), 0)

def clz_Torappu_AttributeModifierDataStartAbnormalCombosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataAddAbnormalComboImmunes(builder, abnormalComboImmunes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(abnormalComboImmunes), 0)

def clz_Torappu_AttributeModifierDataStartAbnormalComboImmunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataAddAttributeModifiers(builder, attributeModifiers):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(attributeModifiers), 0)

def clz_Torappu_AttributeModifierDataStartAttributeModifiersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AttributeModifierDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ExternalBuff(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ExternalBuff()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ExternalBuff(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ExternalBuff
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ExternalBuff
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AttributeModifierData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ExternalBuffStart(builder):
    builder.StartObject(1)

def clz_Torappu_ExternalBuffAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_ExternalBuffEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_PotentialRank(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_PotentialRank()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_PotentialRank(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_PotentialRank
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_PotentialRank
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_PotentialRank
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_PotentialRank
    def Buff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ExternalBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_PotentialRank
    def EquivalentCost(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_PotentialRank
    def EquivalentCostLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_PotentialRank
    def EquivalentCostIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_CharacterData_PotentialRankStart(builder):
    builder.StartObject(4)

def clz_Torappu_CharacterData_PotentialRankAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_CharacterData_PotentialRankAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_CharacterData_PotentialRankAddBuff(builder, buff):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buff), 0)

def clz_Torappu_CharacterData_PotentialRankAddEquivalentCost(builder, equivalentCost):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(equivalentCost), 0)

def clz_Torappu_CharacterData_PotentialRankStartEquivalentCostVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_PotentialRankEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributesDeltaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributesDeltaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributesDeltaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributesDeltaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributesDeltaData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def Def_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesDeltaData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def MaxDeckStackCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesDeltaData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesDeltaData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_AttributesDeltaDataStart(builder):
    builder.StartObject(24)

def clz_Torappu_AttributesDeltaDataAddMaxHp(builder, maxHp):
    builder.PrependInt32Slot(0, maxHp, 0)

def clz_Torappu_AttributesDeltaDataAddAtk(builder, atk):
    builder.PrependInt32Slot(1, atk, 0)

def clz_Torappu_AttributesDeltaDataAddDef_(builder, def_):
    builder.PrependInt32Slot(2, def_, 0)

def clz_Torappu_AttributesDeltaDataAddMagicResistance(builder, magicResistance):
    builder.PrependFloat32Slot(3, magicResistance, 0.0)

def clz_Torappu_AttributesDeltaDataAddCost(builder, cost):
    builder.PrependInt32Slot(4, cost, 0)

def clz_Torappu_AttributesDeltaDataAddBlockCnt(builder, blockCnt):
    builder.PrependInt32Slot(5, blockCnt, 0)

def clz_Torappu_AttributesDeltaDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependFloat32Slot(6, moveSpeed, 0.0)

def clz_Torappu_AttributesDeltaDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependFloat32Slot(7, attackSpeed, 0.0)

def clz_Torappu_AttributesDeltaDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependFloat32Slot(8, baseAttackTime, 0.0)

def clz_Torappu_AttributesDeltaDataAddRespawnTime(builder, respawnTime):
    builder.PrependInt32Slot(9, respawnTime, 0)

def clz_Torappu_AttributesDeltaDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependFloat32Slot(10, hpRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDeltaDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependFloat32Slot(11, spRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDeltaDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependInt32Slot(12, maxDeployCount, 0)

def clz_Torappu_AttributesDeltaDataAddMaxDeckStackCnt(builder, maxDeckStackCnt):
    builder.PrependInt32Slot(13, maxDeckStackCnt, 0)

def clz_Torappu_AttributesDeltaDataAddTauntLevel(builder, tauntLevel):
    builder.PrependInt32Slot(14, tauntLevel, 0)

def clz_Torappu_AttributesDeltaDataAddMassLevel(builder, massLevel):
    builder.PrependInt32Slot(15, massLevel, 0)

def clz_Torappu_AttributesDeltaDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependInt32Slot(16, baseForceLevel, 0)

def clz_Torappu_AttributesDeltaDataAddStunImmune(builder, stunImmune):
    builder.PrependBoolSlot(17, stunImmune, 0)

def clz_Torappu_AttributesDeltaDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependBoolSlot(18, silenceImmune, 0)

def clz_Torappu_AttributesDeltaDataAddSleepImmune(builder, sleepImmune):
    builder.PrependBoolSlot(19, sleepImmune, 0)

def clz_Torappu_AttributesDeltaDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependBoolSlot(20, frozenImmune, 0)

def clz_Torappu_AttributesDeltaDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependBoolSlot(21, levitateImmune, 0)

def clz_Torappu_AttributesDeltaDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependBoolSlot(22, disarmedCombatImmune, 0)

def clz_Torappu_AttributesDeltaDataAddFearedImmune(builder, fearedImmune):
    builder.PrependBoolSlot(23, fearedImmune, 0)

def clz_Torappu_AttributesDeltaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AttributesDeltaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_Start(builder):
    builder.StartObject(2)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_AddLevel(builder, level):
    builder.PrependInt32Slot(0, level, 0)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_AddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_End(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_SkillLevelCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_SkillLevelCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_SkillLevelCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_SkillLevelCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_SkillLevelCost
    def UnlockCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_SkillLevelCost
    def LvlUpCost(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData_SkillLevelCost
    def LvlUpCostLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData_SkillLevelCost
    def LvlUpCostIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_CharacterData_SkillLevelCostStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_SkillLevelCostAddUnlockCond(builder, unlockCond):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCond), 0)

def clz_Torappu_CharacterData_SkillLevelCostAddLvlUpCost(builder, lvlUpCost):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lvlUpCost), 0)

def clz_Torappu_CharacterData_SkillLevelCostStartLvlUpCostVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterData_SkillLevelCostEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def CanUseGeneralPotentialItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_CharacterData
    def CanUseActivityPotentialItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_CharacterData
    def PotentialItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def ActivityPotentialItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def ClassicPotentialItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def NationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def DisplayNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def Appellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData
    def TagList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_CharacterData
    def TagListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def TagListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_CharacterData
    def ItemUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def ItemObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def IsNotObtainable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_CharacterData
    def IsSpChar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_CharacterData
    def MaxPotentialLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData
    def SubProfessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData
    def Trait(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_TraitDataBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_PhaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_CharacterData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_MainSkill()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_CharacterData
    def DisplayTokenDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__bool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def DisplayTokenDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def DisplayTokenDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # clz_Torappu_CharacterData
    def Talents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_TalentDataBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def TalentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def TalentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # clz_Torappu_CharacterData
    def PotentialRanks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_PotentialRank()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def PotentialRanksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def PotentialRanksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_CharacterData
    def FavorKeyFrames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_KeyFrames_2_KeyFrame_Torappu_AttributesDeltaData_Torappu_AttributesData_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def FavorKeyFramesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def FavorKeyFramesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_CharacterData
    def AllSkillLvlup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_SkillLevelCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharacterData
    def AllSkillLvlupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharacterData
    def AllSkillLvlupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

def clz_Torappu_CharacterDataStart(builder):
    builder.StartObject(31)

def clz_Torappu_CharacterDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_CharacterDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_CharacterDataAddCanUseGeneralPotentialItem(builder, canUseGeneralPotentialItem):
    builder.PrependBoolSlot(2, canUseGeneralPotentialItem, 0)

def clz_Torappu_CharacterDataAddCanUseActivityPotentialItem(builder, canUseActivityPotentialItem):
    builder.PrependBoolSlot(3, canUseActivityPotentialItem, 0)

def clz_Torappu_CharacterDataAddPotentialItemId(builder, potentialItemId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(potentialItemId), 0)

def clz_Torappu_CharacterDataAddActivityPotentialItemId(builder, activityPotentialItemId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(activityPotentialItemId), 0)

def clz_Torappu_CharacterDataAddClassicPotentialItemId(builder, classicPotentialItemId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(classicPotentialItemId), 0)

def clz_Torappu_CharacterDataAddNationId(builder, nationId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(nationId), 0)

def clz_Torappu_CharacterDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_CharacterDataAddTeamId(builder, teamId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(teamId), 0)

def clz_Torappu_CharacterDataAddDisplayNumber(builder, displayNumber):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(displayNumber), 0)

def clz_Torappu_CharacterDataAddAppellation(builder, appellation):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(appellation), 0)

def clz_Torappu_CharacterDataAddPosition(builder, position):
    builder.PrependInt32Slot(12, position, 0)

def clz_Torappu_CharacterDataAddTagList(builder, tagList):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(tagList), 0)

def clz_Torappu_CharacterDataStartTagListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddItemUsage(builder, itemUsage):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(itemUsage), 0)

def clz_Torappu_CharacterDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_CharacterDataAddItemObtainApproach(builder, itemObtainApproach):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(itemObtainApproach), 0)

def clz_Torappu_CharacterDataAddIsNotObtainable(builder, isNotObtainable):
    builder.PrependBoolSlot(17, isNotObtainable, 0)

def clz_Torappu_CharacterDataAddIsSpChar(builder, isSpChar):
    builder.PrependBoolSlot(18, isSpChar, 0)

def clz_Torappu_CharacterDataAddMaxPotentialLevel(builder, maxPotentialLevel):
    builder.PrependInt32Slot(19, maxPotentialLevel, 0)

def clz_Torappu_CharacterDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(20, rarity, 0)

def clz_Torappu_CharacterDataAddProfession(builder, profession):
    builder.PrependInt32Slot(21, profession, 0)

def clz_Torappu_CharacterDataAddSubProfessionId(builder, subProfessionId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionId), 0)

def clz_Torappu_CharacterDataAddTrait(builder, trait):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(trait), 0)

def clz_Torappu_CharacterDataAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_CharacterDataStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_CharacterDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddDisplayTokenDict(builder, displayTokenDict):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(displayTokenDict), 0)

def clz_Torappu_CharacterDataStartDisplayTokenDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddTalents(builder, talents):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(talents), 0)

def clz_Torappu_CharacterDataStartTalentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddPotentialRanks(builder, potentialRanks):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(potentialRanks), 0)

def clz_Torappu_CharacterDataStartPotentialRanksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddFavorKeyFrames(builder, favorKeyFrames):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(favorKeyFrames), 0)

def clz_Torappu_CharacterDataStartFavorKeyFramesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataAddAllSkillLvlup(builder, allSkillLvlup):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(allSkillLvlup), 0)

def clz_Torappu_CharacterDataStartAllSkillLvlupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharacterDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharacterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharacterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharacterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharacterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharacterData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharacterData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharacterDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharacterDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharacterDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharacterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharPatchData_UnlockCond_Item(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharPatchData_UnlockCond_Item()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharPatchData_UnlockCond_Item(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharPatchData_UnlockCond_Item
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharPatchData_UnlockCond_Item
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharPatchData_UnlockCond_Item
    def CompleteState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharPatchData_UnlockCond_Item
    def UnlockTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharPatchData_UnlockCond_ItemStart(builder):
    builder.StartObject(3)

def clz_Torappu_CharPatchData_UnlockCond_ItemAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_CharPatchData_UnlockCond_ItemAddCompleteState(builder, completeState):
    builder.PrependInt32Slot(1, completeState, 0)

def clz_Torappu_CharPatchData_UnlockCond_ItemAddUnlockTs(builder, unlockTs):
    builder.PrependInt64Slot(2, unlockTs, 0)

def clz_Torappu_CharPatchData_UnlockCond_ItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharPatchData_UnlockCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharPatchData_UnlockCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharPatchData_UnlockCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharPatchData_UnlockCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharPatchData_UnlockCond
    def Conds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharPatchData_UnlockCond_Item()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharPatchData_UnlockCond
    def CondsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData_UnlockCond
    def CondsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_CharPatchData_UnlockCondStart(builder):
    builder.StartObject(1)

def clz_Torappu_CharPatchData_UnlockCondAddConds(builder, conds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(conds), 0)

def clz_Torappu_CharPatchData_UnlockCondStartCondsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchData_UnlockCondEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharPatchData_UnlockCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharPatchData_UnlockCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharPatchData_UnlockCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharPatchData_UnlockCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharPatchData_UnlockCond
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharPatchData_UnlockCond
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharPatchData_UnlockCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharPatchData_UnlockCondStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharPatchData_UnlockCondAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharPatchData_UnlockCondAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharPatchData_UnlockCondEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharPatchData_PatchDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharPatchData_PatchDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharPatchData_PatchDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharPatchData_PatchDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharPatchData_PatchDetailInfo
    def PatchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharPatchData_PatchDetailInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharPatchData_PatchDetailInfo
    def InfoParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharPatchData_PatchDetailInfo
    def TransSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharPatchData_PatchDetailInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_CharPatchData_PatchDetailInfoAddPatchId(builder, patchId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(patchId), 0)

def clz_Torappu_CharPatchData_PatchDetailInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_CharPatchData_PatchDetailInfoAddInfoParam(builder, infoParam):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(infoParam), 0)

def clz_Torappu_CharPatchData_PatchDetailInfoAddTransSortId(builder, transSortId):
    builder.PrependInt32Slot(3, transSortId, 0)

def clz_Torappu_CharPatchData_PatchDetailInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharPatchData_PatchDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharPatchData_PatchDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharPatchData_PatchDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharPatchData_PatchDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharPatchData_PatchDetailInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharPatchData_PatchDetailInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharPatchData_PatchDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharPatchData_PatchDetailInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharPatchData_PatchDetailInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharPatchData_PatchDetailInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharPatchData_PatchDetailInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharPatchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharPatchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharPatchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharPatchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharPatchData
    def Infos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharPatchData_PatchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharPatchData
    def InfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData
    def InfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_CharPatchData
    def PatchChars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharacterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharPatchData
    def PatchCharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData
    def PatchCharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_CharPatchData
    def UnlockConds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharPatchData_UnlockCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharPatchData
    def UnlockCondsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData
    def UnlockCondsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_CharPatchData
    def PatchDetailInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharPatchData_PatchDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharPatchData
    def PatchDetailInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharPatchData
    def PatchDetailInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_CharPatchDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_CharPatchDataAddInfos(builder, infos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(infos), 0)

def clz_Torappu_CharPatchDataStartInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchDataAddPatchChars(builder, patchChars):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(patchChars), 0)

def clz_Torappu_CharPatchDataStartPatchCharsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchDataAddUnlockConds(builder, unlockConds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockConds), 0)

def clz_Torappu_CharPatchDataStartUnlockCondsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchDataAddPatchDetailInfoList(builder, patchDetailInfoList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(patchDetailInfoList), 0)

def clz_Torappu_CharPatchDataStartPatchDetailInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharPatchDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_CharPatchData
