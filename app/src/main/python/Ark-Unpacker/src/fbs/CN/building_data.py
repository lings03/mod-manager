# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BuildingData_RoomType(object):
    NONE = 0
    CONTROL = 1
    POWER = 2
    MANUFACTURE = 4
    SHOP = 8
    DORMITORY = 16
    MEETING = 32
    HIRE = 64
    ELEVATOR = 128
    CORRIDOR = 256
    TRADING = 512
    WORKSHOP = 1024
    TRAINING = 2048
    FUNCTIONAL = 3710
    ALL = 4095


class enum__Torappu_BuildingData_RoomCategory(object):
    NONE = 0
    FUNCTION = 1
    OUTPUT = 2
    CUSTOM = 4
    ELEVATOR = 8
    CORRIDOR = 16
    SPECIAL = 32
    ALL = 63


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_BuildingData_LayoutData_StoreyData_Type(object):
    UPGROUND = 0
    DOWNGROUND = 1


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_BuildingData_BuffCategory(object):
    NONE = 0
    FUNCTION = 1
    OUTPUT = 2
    RECOVERY = 3


class enum__Torappu_BuildingData_FurnitureInteract(object):
    NONE = 0
    ANIMATOR = 1
    MUSIC = 2


class enum__Torappu_BuildingData_FurnitureType(object):
    FLOOR = 0
    CARPET = 1
    SEATING = 2
    BEDDING = 3
    TABLE = 4
    CABINET = 5
    DECORATION = 6
    WALLPAPER = 7
    WALLDECO = 8
    WALLLAMP = 9
    CEILING = 10
    CEILINGLAMP = 11


class enum__Torappu_BuildingData_FurnitureSubType(object):
    NONE = 0
    CHAIR = 1
    SOFA = 2
    BARSTOOL = 3
    STOOL = 4
    BENCH = 5
    ORTHER_S = 6
    POSTER = 7
    CURTAIN = 8
    BOARD_WD = 9
    SHELF = 10
    INSTRUMENT_WD = 11
    ART_WD = 12
    PLAQUE = 13
    CONTRACT = 14
    ANNIHILATION = 15
    ORTHER_WD = 16
    FLOORLAMP = 17
    PLANT = 18
    PARTITION = 19
    COOKING = 20
    CATERING = 21
    DEVICE = 22
    INSTRUMENT_D = 23
    ART_D = 24
    BOARD_D = 25
    ENTERTAINMENT = 26
    STORAGE = 27
    DRESSING = 28
    WARM = 29
    WASH = 30
    ORTHER_D = 31
    COLUMN = 32
    DECORATION_C = 33
    CURTAIN_C = 34
    DEVICE_C = 35
    CONTRACT_2 = 36
    LIGHT = 37
    ORTHER_C = 38


class enum__Torappu_BuildingData_FurnitureLocation(object):
    NONE = 0
    WALL = 1
    FLOOR = 2
    CARPET = 3
    CEILING = 4
    POSTER = 5
    CEILINGDECAL = 6


class enum__Torappu_BuildingData_FurnitureCategory(object):
    FURNITURE = 0
    WALL = 1
    FLOOR = 2


class enum__Torappu_BuildingData_DiyUIType(object):
    MENU = 0
    THEME = 1
    FURNITURE = 2
    FURNITURE_IN_THEME = 3
    RECENT_THEME = 4
    RECENT_FURNITURE = 5
    PRESET = 6


class enum__Torappu_BuildingData_DiyUISortOrder(object):
    DESC = 0
    ASC = 1


class enum__Torappu_BuildingData_FormulaItemType(object):
    NONE = 0
    F_EVOLVE = 1
    F_BUILDING = 2
    F_GOLD = 3
    F_DIAMOND = 4
    F_FURNITURE = 5
    F_EXP = 6
    F_ASC = 7
    F_SKILL = 8


class dict__string__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__intStart(builder):
    builder.StartObject(2)

def dict__string__intAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomUnlockCond_CondItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomUnlockCond_CondItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomUnlockCond_CondItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_RoomUnlockCond_CondItemStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_RoomUnlockCond_CondItemAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_BuildingData_RoomUnlockCond_CondItemAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_BuildingData_RoomUnlockCond_CondItemAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_BuildingData_RoomUnlockCond_CondItemEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomUnlockCond_CondItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItemStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItemAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItemAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomUnlockCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomUnlockCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomUnlockCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomUnlockCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomUnlockCond
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomUnlockCond
    def Number(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_BuildingData_RoomUnlockCond_CondItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomUnlockCond
    def NumberLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomUnlockCond
    def NumberIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_RoomUnlockCondStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_RoomUnlockCondAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_RoomUnlockCondAddNumber(builder, number):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)

def clz_Torappu_BuildingData_RoomUnlockCondStartNumberVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomUnlockCondEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_RoomUnlockCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_RoomUnlockCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_RoomUnlockCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_RoomUnlockCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_RoomUnlockCond
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_RoomUnlockCond
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomUnlockCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_RoomUnlockCondStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_RoomUnlockCondAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_RoomUnlockCondAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_RoomUnlockCondEnd(builder):
    return builder.EndObject()



class clz_Torappu_GridPosition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GridPosition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GridPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GridPosition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GridPosition
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GridPosition
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GridPositionStart(builder):
    builder.StartObject(2)

def clz_Torappu_GridPositionAddRow(builder, row):
    builder.PrependInt32Slot(0, row, 0)

def clz_Torappu_GridPositionAddCol(builder, col):
    builder.PrependInt32Slot(1, col, 0)

def clz_Torappu_GridPositionEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomData_BuildCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomData_BuildCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomData_BuildCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomData_BuildCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomData_BuildCost
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomData_BuildCost
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomData_BuildCost
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_RoomData_BuildCost
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData_BuildCost
    def Labor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_RoomData_BuildCostStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_RoomData_BuildCostAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_BuildingData_RoomData_BuildCostStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomData_BuildCostAddTime(builder, time):
    builder.PrependInt64Slot(1, time, 0)

def clz_Torappu_BuildingData_RoomData_BuildCostAddLabor(builder, labor):
    builder.PrependInt32Slot(2, labor, 0)

def clz_Torappu_BuildingData_RoomData_BuildCostEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomData_PhaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomData_PhaseData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomData_PhaseData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomData_PhaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def OverrideName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def OverridePrefabId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def UnlockCondId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def BuildCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomData_BuildCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def Electricity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def MaxStationedNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData_PhaseData
    def ManpowerCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_RoomData_PhaseDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddOverrideName(builder, overrideName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(overrideName), 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddOverridePrefabId(builder, overridePrefabId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(overridePrefabId), 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddUnlockCondId(builder, unlockCondId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondId), 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddBuildCost(builder, buildCost):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(buildCost), 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddElectricity(builder, electricity):
    builder.PrependInt32Slot(4, electricity, 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddMaxStationedNum(builder, maxStationedNum):
    builder.PrependInt32Slot(5, maxStationedNum, 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataAddManpowerCost(builder, manpowerCost):
    builder.PrependInt64Slot(6, manpowerCost, 0)

def clz_Torappu_BuildingData_RoomData_PhaseDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData
    def DefaultPrefabId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_RoomData
    def CanLevelDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BuildingData_RoomData
    def MaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_RoomData
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomData
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_RoomData_PhaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomData
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomData
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_BuildingData_RoomDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_BuildingData_RoomDataAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def clz_Torappu_BuildingData_RoomDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_RoomDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_BuildingData_RoomDataAddDefaultPrefabId(builder, defaultPrefabId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultPrefabId), 0)

def clz_Torappu_BuildingData_RoomDataAddCanLevelDown(builder, canLevelDown):
    builder.PrependBoolSlot(4, canLevelDown, 0)

def clz_Torappu_BuildingData_RoomDataAddMaxCount(builder, maxCount):
    builder.PrependInt32Slot(5, maxCount, 0)

def clz_Torappu_BuildingData_RoomDataAddCategory(builder, category):
    builder.PrependInt32Slot(6, category, 0)

def clz_Torappu_BuildingData_RoomDataAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def clz_Torappu_BuildingData_RoomDataAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_RoomDataStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_RoomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_RoomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_RoomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_RoomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_RoomData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_RoomData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_RoomDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_RoomDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_RoomDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_RoomDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_LayoutData_RoomSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_LayoutData_RoomSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_LayoutData_RoomSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def CleanCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def CostLabor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def ProvideLabor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_LayoutData_RoomSlot
    def StoreyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_LayoutData_RoomSlotStart(builder):
    builder.StartObject(8)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddCleanCostId(builder, cleanCostId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cleanCostId), 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddCostLabor(builder, costLabor):
    builder.PrependInt32Slot(2, costLabor, 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddProvideLabor(builder, provideLabor):
    builder.PrependInt32Slot(3, provideLabor, 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddCategory(builder, category):
    builder.PrependInt32Slot(6, category, 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotAddStoreyId(builder, storeyId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(storeyId), 0)

def clz_Torappu_BuildingData_LayoutData_RoomSlotEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_LayoutData_RoomSlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlotEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostStart(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCostEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_LayoutData_SlotCleanCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_LayoutData_SlotCleanCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_LayoutData_SlotCleanCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Number(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_BuildingData_LayoutData_SlotCleanCost_CountCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def NumberLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def NumberIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_LayoutData_SlotCleanCostStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCostAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCostAddNumber(builder, number):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(number), 0)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCostStartNumberVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_LayoutData_SlotCleanCostEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_LayoutData_SlotCleanCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCostEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_LayoutData_StoreyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_LayoutData_StoreyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_LayoutData_StoreyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_LayoutData_StoreyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_LayoutData_StoreyData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_LayoutData_StoreyData
    def YOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_LayoutData_StoreyData
    def UnlockControlLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_LayoutData_StoreyData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_LayoutData_StoreyDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_LayoutData_StoreyDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_LayoutData_StoreyDataAddYOffset(builder, yOffset):
    builder.PrependInt32Slot(1, yOffset, 0)

def clz_Torappu_BuildingData_LayoutData_StoreyDataAddUnlockControlLevel(builder, unlockControlLevel):
    builder.PrependInt32Slot(2, unlockControlLevel, 0)

def clz_Torappu_BuildingData_LayoutData_StoreyDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_BuildingData_LayoutData_StoreyDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_LayoutData_StoreyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_LayoutData_StoreyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_LayoutData_StoreyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_LayoutData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_LayoutData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_LayoutData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_LayoutData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_LayoutData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_LayoutData
    def Slots(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_LayoutData_RoomSlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData
    def SlotsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_LayoutData
    def SlotsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_BuildingData_LayoutData
    def CleanCosts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_LayoutData_SlotCleanCost()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData
    def CleanCostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_LayoutData
    def CleanCostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_BuildingData_LayoutData
    def Storeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_LayoutData_StoreyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_LayoutData
    def StoreysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_LayoutData
    def StoreysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_BuildingData_LayoutDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_LayoutDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_LayoutDataAddSlots(builder, slots):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(slots), 0)

def clz_Torappu_BuildingData_LayoutDataStartSlotsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_LayoutDataAddCleanCosts(builder, cleanCosts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cleanCosts), 0)

def clz_Torappu_BuildingData_LayoutDataStartCleanCostsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_LayoutDataAddStoreys(builder, storeys):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storeys), 0)

def clz_Torappu_BuildingData_LayoutDataStartStoreysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_LayoutDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_LayoutData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_LayoutData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_LayoutData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_LayoutData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_LayoutData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_LayoutData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_LayoutData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_LayoutDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_LayoutDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_LayoutDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_LayoutDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_PrefabInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_PrefabInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_PrefabInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_PrefabInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_PrefabInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_PrefabInfo
    def BlueprintRoomOverrideId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_PrefabInfo
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_PrefabInfo
    def FloorGridSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_PrefabInfo
    def BackWallGridSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_PrefabInfo
    def ObstacleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_PrefabInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_BuildingData_PrefabInfoAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_PrefabInfoAddBlueprintRoomOverrideId(builder, blueprintRoomOverrideId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blueprintRoomOverrideId), 0)

def clz_Torappu_BuildingData_PrefabInfoAddSize(builder, size):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)

def clz_Torappu_BuildingData_PrefabInfoAddFloorGridSize(builder, floorGridSize):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(floorGridSize), 0)

def clz_Torappu_BuildingData_PrefabInfoAddBackWallGridSize(builder, backWallGridSize):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(backWallGridSize), 0)

def clz_Torappu_BuildingData_PrefabInfoAddObstacleId(builder, obstacleId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(obstacleId), 0)

def clz_Torappu_BuildingData_PrefabInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_PrefabInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_PrefabInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_PrefabInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_PrefabInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_PrefabInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_PrefabInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_PrefabInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_PrefabInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_PrefabInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_PrefabInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_PrefabInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ControlRoomPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ControlRoomPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ControlRoomPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ControlRoomPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def clz_Torappu_BuildingData_ControlRoomPhaseStart(builder):
    builder.StartObject(0)

def clz_Torappu_BuildingData_ControlRoomPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ControlRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ControlRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ControlRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ControlRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ControlRoomBean
    def BasicCostBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ControlRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ControlRoomPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ControlRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ControlRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_ControlRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ControlRoomBeanAddBasicCostBuff(builder, basicCostBuff):
    builder.PrependInt32Slot(0, basicCostBuff, 0)

def clz_Torappu_BuildingData_ControlRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_ControlRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ControlRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ManufactPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ManufactPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ManufactPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ManufactPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ManufactPhase
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_ManufactPhase
    def OutputCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ManufactPhaseStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ManufactPhaseAddSpeed(builder, speed):
    builder.PrependFloat32Slot(0, speed, 0.0)

def clz_Torappu_BuildingData_ManufactPhaseAddOutputCapacity(builder, outputCapacity):
    builder.PrependInt32Slot(1, outputCapacity, 0)

def clz_Torappu_BuildingData_ManufactPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ManufactRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ManufactRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ManufactRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ManufactRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ManufactRoomBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_ManufactRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ManufactPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ManufactRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ManufactRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_ManufactRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ManufactRoomBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_ManufactRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_ManufactRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ManufactRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ShopPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ShopPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ShopPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ShopPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ShopPhase
    def CounterNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ShopPhase
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_ShopPhase
    def MoneyCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ShopPhaseStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_ShopPhaseAddCounterNum(builder, counterNum):
    builder.PrependInt32Slot(0, counterNum, 0)

def clz_Torappu_BuildingData_ShopPhaseAddSpeed(builder, speed):
    builder.PrependFloat32Slot(1, speed, 0.0)

def clz_Torappu_BuildingData_ShopPhaseAddMoneyCapacity(builder, moneyCapacity):
    builder.PrependInt32Slot(2, moneyCapacity, 0)

def clz_Torappu_BuildingData_ShopPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ShopPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_Start(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_AddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_StartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_End(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_HirePhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_HirePhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_HirePhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_HirePhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_HirePhase
    def EconomizeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_HirePhase
    def ResSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_HirePhase
    def RefreshTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_HirePhaseStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_HirePhaseAddEconomizeRate(builder, economizeRate):
    builder.PrependFloat32Slot(0, economizeRate, 0.0)

def clz_Torappu_BuildingData_HirePhaseAddResSpeed(builder, resSpeed):
    builder.PrependInt32Slot(1, resSpeed, 0)

def clz_Torappu_BuildingData_HirePhaseAddRefreshTimes(builder, refreshTimes):
    builder.PrependInt32Slot(2, refreshTimes, 0)

def clz_Torappu_BuildingData_HirePhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_HireRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_HireRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_HireRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_HireRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_HireRoomBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_HireRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_HirePhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_HireRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_HireRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_HireRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_HireRoomBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_HireRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_HireRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_HireRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_DormPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_DormPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_DormPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_DormPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_DormPhase
    def ManpowerRecover(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_DormPhase
    def DecorationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_DormPhaseStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_DormPhaseAddManpowerRecover(builder, manpowerRecover):
    builder.PrependInt32Slot(0, manpowerRecover, 0)

def clz_Torappu_BuildingData_DormPhaseAddDecorationLimit(builder, decorationLimit):
    builder.PrependInt32Slot(1, decorationLimit, 0)

def clz_Torappu_BuildingData_DormPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_DormPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_Start(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_AddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_StartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_End(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_MeetingPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_MeetingPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_MeetingPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_MeetingPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_MeetingPhase
    def FriendSlotInc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_MeetingPhase
    def MaxVisitorNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_MeetingPhase
    def GatheringSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_MeetingPhaseStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_MeetingPhaseAddFriendSlotInc(builder, friendSlotInc):
    builder.PrependInt32Slot(0, friendSlotInc, 0)

def clz_Torappu_BuildingData_MeetingPhaseAddMaxVisitorNum(builder, maxVisitorNum):
    builder.PrependInt32Slot(1, maxVisitorNum, 0)

def clz_Torappu_BuildingData_MeetingPhaseAddGatheringSpeed(builder, gatheringSpeed):
    builder.PrependInt32Slot(2, gatheringSpeed, 0)

def clz_Torappu_BuildingData_MeetingPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_MeetingRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_MeetingRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_MeetingRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_MeetingRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_MeetingRoomBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_MeetingRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_MeetingPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_MeetingRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_MeetingRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_MeetingRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_MeetingRoomBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_MeetingRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_MeetingRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_MeetingRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_TradingPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_TradingPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_TradingPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_TradingPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_TradingPhase
    def OrderSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_TradingPhase
    def OrderLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_TradingPhase
    def OrderRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_TradingPhaseStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_TradingPhaseAddOrderSpeed(builder, orderSpeed):
    builder.PrependFloat32Slot(0, orderSpeed, 0.0)

def clz_Torappu_BuildingData_TradingPhaseAddOrderLimit(builder, orderLimit):
    builder.PrependInt32Slot(1, orderLimit, 0)

def clz_Torappu_BuildingData_TradingPhaseAddOrderRarity(builder, orderRarity):
    builder.PrependInt32Slot(2, orderRarity, 0)

def clz_Torappu_BuildingData_TradingPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_TradingRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_TradingRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_TradingRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_TradingRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_TradingRoomBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_TradingRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_TradingPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_TradingRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_TradingRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_TradingRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_TradingRoomBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_TradingRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_TradingRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_TradingRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_WorkshopPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_WorkshopPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_WorkshopPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_WorkshopPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_WorkshopPhase
    def ManpowerFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_BuildingData_WorkshopPhaseStart(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_WorkshopPhaseAddManpowerFactor(builder, manpowerFactor):
    builder.PrependFloat32Slot(0, manpowerFactor, 0.0)

def clz_Torappu_BuildingData_WorkshopPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_WorkshopPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_Start(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_AddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_StartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_End(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_TrainingPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_TrainingPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_TrainingPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_TrainingPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_TrainingPhase
    def SpecSkillLvlLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_TrainingPhaseStart(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_TrainingPhaseAddSpecSkillLvlLimit(builder, specSkillLvlLimit):
    builder.PrependInt32Slot(0, specSkillLvlLimit, 0)

def clz_Torappu_BuildingData_TrainingPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_TrainingBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_TrainingBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_TrainingBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_TrainingBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_TrainingBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_TrainingBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_TrainingPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_TrainingBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_TrainingBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_TrainingBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_TrainingBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_TrainingBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_TrainingBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_TrainingBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_PowerPhase(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_PowerPhase()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_PowerPhase(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_PowerPhase
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def clz_Torappu_BuildingData_PowerPhaseStart(builder):
    builder.StartObject(0)

def clz_Torappu_BuildingData_PowerPhaseEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_PowerRoomBean(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_PowerRoomBean()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_PowerRoomBean(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_PowerRoomBean
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_PowerRoomBean
    def BasicSpeedBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_PowerRoomBean
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_PowerPhase()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_PowerRoomBean
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_PowerRoomBean
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_PowerRoomBeanStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_PowerRoomBeanAddBasicSpeedBuff(builder, basicSpeedBuff):
    builder.PrependFloat32Slot(0, basicSpeedBuff, 0.0)

def clz_Torappu_BuildingData_PowerRoomBeanAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_BuildingData_PowerRoomBeanStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_PowerRoomBeanEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_UnlockCondition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_UnlockCondition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_UnlockCondition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_UnlockCondition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_UnlockCondition
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterData_UnlockCondition
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_UnlockConditionStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_UnlockConditionAddPhase(builder, phase):
    builder.PrependInt32Slot(0, phase, 0)

def clz_Torappu_CharacterData_UnlockConditionAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterData_UnlockConditionEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem
    def Cond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterData_UnlockCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemAddCond(builder, cond):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cond), 0)

def clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_BuildingBuffCharSlot(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_BuildingBuffCharSlot()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_BuildingBuffCharSlot(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_BuildingBuffCharSlot
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_BuildingBuffCharSlot
    def BuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_BuildingBuffCharSlot_SlotItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_BuildingBuffCharSlot
    def BuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_BuildingBuffCharSlot
    def BuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_BuildingData_BuildingBuffCharSlotStart(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_BuildingBuffCharSlotAddBuffData(builder, buffData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffData), 0)

def clz_Torappu_BuildingData_BuildingBuffCharSlotStartBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_BuildingBuffCharSlotEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_BuildingCharacter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_BuildingCharacter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_BuildingCharacter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_BuildingCharacter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_BuildingCharacter
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingCharacter
    def MaxManpower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_BuildingCharacter
    def BuffChar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_BuildingBuffCharSlot()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_BuildingCharacter
    def BuffCharLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_BuildingCharacter
    def BuffCharIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_BuildingData_BuildingCharacterStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_BuildingCharacterAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_BuildingData_BuildingCharacterAddMaxManpower(builder, maxManpower):
    builder.PrependInt64Slot(1, maxManpower, 0)

def clz_Torappu_BuildingData_BuildingCharacterAddBuffChar(builder, buffChar):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffChar), 0)

def clz_Torappu_BuildingData_BuildingCharacterStartBuffCharVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_BuildingCharacterEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_BuildingCharacter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_BuildingCharacter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_BuildingCharacter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_BuildingCharacter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_BuildingCharacter
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_BuildingCharacter
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_BuildingCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_BuildingCharacterStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_BuildingCharacterAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_BuildingCharacterAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_BuildingCharacterEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_BuildingBuff(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_BuildingBuff()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_BuildingBuff(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_BuildingBuff
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_BuildingBuff
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def BuffIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def SkillIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_BuildingBuff
    def BuffColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def TextColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_BuildingBuff
    def BuffCategory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_BuildingBuff
    def RoomType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_BuildingBuff
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_BuildingBuffStart(builder):
    builder.StartObject(10)

def clz_Torappu_BuildingData_BuildingBuffAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_BuildingData_BuildingBuffAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_BuildingData_BuildingBuffAddBuffIcon(builder, buffIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffIcon), 0)

def clz_Torappu_BuildingData_BuildingBuffAddSkillIcon(builder, skillIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(skillIcon), 0)

def clz_Torappu_BuildingData_BuildingBuffAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_BuildingData_BuildingBuffAddBuffColor(builder, buffColor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buffColor), 0)

def clz_Torappu_BuildingData_BuildingBuffAddTextColor(builder, textColor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(textColor), 0)

def clz_Torappu_BuildingData_BuildingBuffAddBuffCategory(builder, buffCategory):
    builder.PrependInt32Slot(7, buffCategory, 0)

def clz_Torappu_BuildingData_BuildingBuffAddRoomType(builder, roomType):
    builder.PrependInt32Slot(8, roomType, 0)

def clz_Torappu_BuildingData_BuildingBuffAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_BuildingData_BuildingBuffEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_BuildingBuff(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_BuildingBuff()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_BuildingBuff(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_BuildingBuff
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_BuildingBuff
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_BuildingBuff
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_BuildingBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_BuildingBuffStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_BuildingBuffAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_BuildingBuffAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_BuildingBuffEnd(builder):
    return builder.EndObject()



class dict__string__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__string__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_stringStart(builder):
    builder.StartObject(2)

def dict__string__list_stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_WorkshopExtraWeightItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_WorkshopExtraWeightItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_WorkshopExtraWeightItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_WorkshopExtraWeightItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_WorkshopExtraWeightItem
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopExtraWeightItem
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_WorkshopExtraWeightItem
    def ItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_WorkshopExtraWeightItemStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_WorkshopExtraWeightItemAddWeight(builder, weight):
    builder.PrependInt32Slot(0, weight, 0)

def clz_Torappu_BuildingData_WorkshopExtraWeightItemAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_BuildingData_WorkshopExtraWeightItemAddItemCount(builder, itemCount):
    builder.PrependInt32Slot(2, itemCount, 0)

def clz_Torappu_BuildingData_WorkshopExtraWeightItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_FurnitureData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_FurnitureData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_FurnitureData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def InteractType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def MusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ValidOnRotate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def EnableRotate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ThemeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Depth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Comfort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedProductId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedProductCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedByProductPercentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedByProductGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_WorkshopExtraWeightItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedByProductGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def ProcessedByProductGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def CanBeDestroy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def IsOnly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureData
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_CustomData_FurnitureDataStart(builder):
    builder.StartObject(29)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddInteractType(builder, interactType):
    builder.PrependInt32Slot(4, interactType, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddMusicId(builder, musicId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(musicId), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddType(builder, type):
    builder.PrependInt32Slot(6, type, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddSubType(builder, subType):
    builder.PrependInt32Slot(7, subType, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddLocation(builder, location):
    builder.PrependInt32Slot(8, location, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddCategory(builder, category):
    builder.PrependInt32Slot(9, category, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddValidOnRotate(builder, validOnRotate):
    builder.PrependBoolSlot(10, validOnRotate, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddEnableRotate(builder, enableRotate):
    builder.PrependBoolSlot(11, enableRotate, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(12, rarity, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddThemeId(builder, themeId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(themeId), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddWidth(builder, width):
    builder.PrependInt32Slot(15, width, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddDepth(builder, depth):
    builder.PrependInt32Slot(16, depth, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddHeight(builder, height):
    builder.PrependInt32Slot(17, height, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddComfort(builder, comfort):
    builder.PrependInt32Slot(18, comfort, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddProcessedProductId(builder, processedProductId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(processedProductId), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddProcessedProductCount(builder, processedProductCount):
    builder.PrependInt32Slot(23, processedProductCount, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddProcessedByProductPercentage(builder, processedByProductPercentage):
    builder.PrependInt32Slot(24, processedByProductPercentage, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddProcessedByProductGroup(builder, processedByProductGroup):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(processedByProductGroup), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataStartProcessedByProductGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddCanBeDestroy(builder, canBeDestroy):
    builder.PrependBoolSlot(26, canBeDestroy, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddIsOnly(builder, isOnly):
    builder.PrependInt32Slot(27, isOnly, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataAddQuantity(builder, quantity):
    builder.PrependInt32Slot(28, quantity, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_CustomData_FurnitureData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_FurnitureData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_CustomData_FurnitureDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_CustomData_FurnitureDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_FurnitureDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_FurnitureDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem
    def FurnitureId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem
    def Pos0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem
    def Pos1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem
    def Dir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemAddFurnitureId(builder, furnitureId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureId), 0)

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemAddPos0(builder, pos0):
    builder.PrependInt32Slot(1, pos0, 0)

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemAddPos1(builder, pos1):
    builder.PrependInt32Slot(2, pos1, 0)

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemAddDir(builder, dir):
    builder.PrependInt32Slot(3, dir, 0)

def clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_ThemeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_ThemeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_ThemeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def ThemeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def QuickSetup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_CustomData_ThemeQuickSetupItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def QuickSetupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def QuickSetupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def Furnitures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def FurnituresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_ThemeData
    def FurnituresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_BuildingData_CustomData_ThemeDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddThemeType(builder, themeType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(themeType), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddQuickSetup(builder, quickSetup):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(quickSetup), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataStartQuickSetupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_ThemeDataAddFurnitures(builder, furnitures):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(furnitures), 0)

def clz_Torappu_BuildingData_CustomData_ThemeDataStartFurnituresVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_ThemeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_CustomData_ThemeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_CustomData_ThemeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_CustomData_ThemeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_CustomData_ThemeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_CustomData_ThemeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_CustomData_ThemeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_ThemeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_CustomData_ThemeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_CustomData_ThemeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_ThemeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_ThemeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_GroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_GroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_GroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_GroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_GroupData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_GroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_GroupData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_GroupData
    def ThemeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_GroupData
    def Comfort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_GroupData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_GroupData
    def Furniture(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BuildingData_CustomData_GroupData
    def FurnitureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_GroupData
    def FurnitureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_BuildingData_CustomData_GroupDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_BuildingData_CustomData_GroupDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddThemeId(builder, themeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(themeId), 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddComfort(builder, comfort):
    builder.PrependInt32Slot(4, comfort, 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddCount(builder, count):
    builder.PrependInt32Slot(5, count, 0)

def clz_Torappu_BuildingData_CustomData_GroupDataAddFurniture(builder, furniture):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(furniture), 0)

def clz_Torappu_BuildingData_CustomData_GroupDataStartFurnitureVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_GroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_CustomData_GroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_CustomData_GroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_CustomData_GroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_CustomData_GroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_CustomData_GroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_CustomData_GroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_GroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_CustomData_GroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_CustomData_GroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_GroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_GroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_FurnitureTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_FurnitureTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_FurnitureTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_CustomData_FurnitureTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_CustomData_FurnitureTypeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_FurnitureTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_FurnitureSubTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddSubType(builder, subType):
    builder.PrependInt32Slot(0, subType, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def FurnitureId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def XOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def YOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def DefaultPrefabId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddFurnitureId(builder, furnitureId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furnitureId), 0)

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddXOffset(builder, xOffset):
    builder.PrependInt32Slot(1, xOffset, 0)

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddYOffset(builder, yOffset):
    builder.PrependInt32Slot(2, yOffset, 0)

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddDefaultPrefabId(builder, defaultPrefabId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultPrefabId), 0)

def clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_InteractItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_InteractItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_InteractItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_InteractItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_InteractItem
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_BuildingData_CustomData_InteractItemStart(builder):
    builder.StartObject(1)

def clz_Torappu_BuildingData_CustomData_InteractItemAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_BuildingData_CustomData_InteractItemEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_CustomData_InteractItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItemStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItemAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItemAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItemStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def Sequences(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def SequencesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def SequencesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def StableSequence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData
    def StableSequenceOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataAddSequences(builder, sequences):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sequences), 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataStartSequencesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataAddStableSequence(builder, stableSequence):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stableSequence), 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataAddStableSequenceOrder(builder, stableSequenceOrder):
    builder.PrependInt32Slot(3, stableSequenceOrder, 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def DiyUitype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def ExpandState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def DefaultTemplateIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def DefaultTemplateOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Templates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData_DiyUISortTemplateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def TemplatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def TemplatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddDiyUitype(builder, diyUitype):
    builder.PrependInt32Slot(0, diyUitype, 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddExpandState(builder, expandState):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(expandState), 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddDefaultTemplateIndex(builder, defaultTemplateIndex):
    builder.PrependInt32Slot(2, defaultTemplateIndex, 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddDefaultTemplateOrder(builder, defaultTemplateOrder):
    builder.PrependInt32Slot(3, defaultTemplateOrder, 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddTemplates(builder, templates):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(templates), 0)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataStartTemplatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CustomData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CustomData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CustomData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CustomData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CustomData
    def Furnitures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_CustomData_FurnitureData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def FurnituresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def FurnituresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def Themes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_CustomData_ThemeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def ThemesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def ThemesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_CustomData_GroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def Types(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_BuildingData_FurnitureType__clz_Torappu_BuildingData_CustomData_FurnitureTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def TypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def TypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def SubTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_BuildingData_FurnitureSubType__clz_Torappu_BuildingData_CustomData_FurnitureSubTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def SubTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def SubTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def DefaultFurnitures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_BuildingData_CustomData_DormitoryDefaultFurnitureItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def DefaultFurnituresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def DefaultFurnituresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def InteractGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_BuildingData_CustomData_InteractItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def InteractGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def InteractGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_BuildingData_CustomData
    def DiyUisortTemplates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_BuildingData_DiyUIType__list_dict__string__clz_Torappu_BuildingData_CustomData_DiyUISortTemplateListData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CustomData
    def DiyUisortTemplatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CustomData
    def DiyUisortTemplatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_BuildingData_CustomDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_BuildingData_CustomDataAddFurnitures(builder, furnitures):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furnitures), 0)

def clz_Torappu_BuildingData_CustomDataStartFurnituresVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddThemes(builder, themes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(themes), 0)

def clz_Torappu_BuildingData_CustomDataStartThemesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def clz_Torappu_BuildingData_CustomDataStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddTypes(builder, types):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(types), 0)

def clz_Torappu_BuildingData_CustomDataStartTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddSubTypes(builder, subTypes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subTypes), 0)

def clz_Torappu_BuildingData_CustomDataStartSubTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddDefaultFurnitures(builder, defaultFurnitures):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defaultFurnitures), 0)

def clz_Torappu_BuildingData_CustomDataStartDefaultFurnituresVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddInteractGroups(builder, interactGroups):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(interactGroups), 0)

def clz_Torappu_BuildingData_CustomDataStartInteractGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataAddDiyUisortTemplates(builder, diyUisortTemplates):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(diyUisortTemplates), 0)

def clz_Torappu_BuildingData_CustomDataStartDiyUisortTemplatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CustomDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ManufactFormula_UnlockRoom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ManufactFormula_UnlockRoom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ManufactFormula_UnlockRoom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ManufactFormula_UnlockRoom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ManufactFormula_UnlockRoom
    def RoomId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula_UnlockRoom
    def RoomLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula_UnlockRoom
    def RoomCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ManufactFormula_UnlockRoomStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_ManufactFormula_UnlockRoomAddRoomId(builder, roomId):
    builder.PrependInt32Slot(0, roomId, 0)

def clz_Torappu_BuildingData_ManufactFormula_UnlockRoomAddRoomLevel(builder, roomLevel):
    builder.PrependInt32Slot(1, roomLevel, 0)

def clz_Torappu_BuildingData_ManufactFormula_UnlockRoomAddRoomCount(builder, roomCount):
    builder.PrependInt32Slot(2, roomCount, 0)

def clz_Torappu_BuildingData_ManufactFormula_UnlockRoomEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ManufactFormula_UnlockStage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ManufactFormula_UnlockStage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ManufactFormula_UnlockStage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ManufactFormula_UnlockStage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ManufactFormula_UnlockStage
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ManufactFormula_UnlockStage
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ManufactFormula_UnlockStageStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ManufactFormula_UnlockStageAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_BuildingData_ManufactFormula_UnlockStageAddRank(builder, rank):
    builder.PrependInt32Slot(1, rank, 0)

def clz_Torappu_BuildingData_ManufactFormula_UnlockStageEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ManufactFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ManufactFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ManufactFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ManufactFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ManufactFormula
    def FormulaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def CostPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def FormulaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def BuffType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def Costs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def CostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def CostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireRooms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ManufactFormula_UnlockRoom()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireRoomsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireRoomsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireStages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ManufactFormula_UnlockStage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireStagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ManufactFormula
    def RequireStagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_BuildingData_ManufactFormulaStart(builder):
    builder.StartObject(10)

def clz_Torappu_BuildingData_ManufactFormulaAddFormulaId(builder, formulaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(formulaId), 0)

def clz_Torappu_BuildingData_ManufactFormulaAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_BuildingData_ManufactFormulaAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_BuildingData_ManufactFormulaAddWeight(builder, weight):
    builder.PrependInt32Slot(3, weight, 0)

def clz_Torappu_BuildingData_ManufactFormulaAddCostPoint(builder, costPoint):
    builder.PrependInt64Slot(4, costPoint, 0)

def clz_Torappu_BuildingData_ManufactFormulaAddFormulaType(builder, formulaType):
    builder.PrependInt32Slot(5, formulaType, 0)

def clz_Torappu_BuildingData_ManufactFormulaAddBuffType(builder, buffType):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(buffType), 0)

def clz_Torappu_BuildingData_ManufactFormulaAddCosts(builder, costs):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(costs), 0)

def clz_Torappu_BuildingData_ManufactFormulaStartCostsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ManufactFormulaAddRequireRooms(builder, requireRooms):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(requireRooms), 0)

def clz_Torappu_BuildingData_ManufactFormulaStartRequireRoomsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ManufactFormulaAddRequireStages(builder, requireStages):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(requireStages), 0)

def clz_Torappu_BuildingData_ManufactFormulaStartRequireStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ManufactFormulaEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_ManufactFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_ManufactFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_ManufactFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_ManufactFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_ManufactFormula
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_ManufactFormula
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_ManufactFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_ManufactFormulaStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_ManufactFormulaAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_ManufactFormulaAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_ManufactFormulaEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ShopFormula_UnlockRoom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ShopFormula_UnlockRoom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ShopFormula_UnlockRoom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ShopFormula_UnlockRoom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ShopFormula_UnlockRoom
    def RoomId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ShopFormula_UnlockRoom
    def RoomLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_ShopFormula_UnlockRoomStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_ShopFormula_UnlockRoomAddRoomId(builder, roomId):
    builder.PrependInt32Slot(0, roomId, 0)

def clz_Torappu_BuildingData_ShopFormula_UnlockRoomAddRoomLevel(builder, roomLevel):
    builder.PrependInt32Slot(1, roomLevel, 0)

def clz_Torappu_BuildingData_ShopFormula_UnlockRoomEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_ShopFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_ShopFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_ShopFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_ShopFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_ShopFormula
    def FormulaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ShopFormula
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_ShopFormula
    def FormulaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ShopFormula
    def CostPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_ShopFormula
    def GainItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ShopFormula
    def RequireRooms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_ShopFormula_UnlockRoom()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_ShopFormula
    def RequireRoomsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_ShopFormula
    def RequireRoomsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_BuildingData_ShopFormulaStart(builder):
    builder.StartObject(6)

def clz_Torappu_BuildingData_ShopFormulaAddFormulaId(builder, formulaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(formulaId), 0)

def clz_Torappu_BuildingData_ShopFormulaAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_BuildingData_ShopFormulaAddFormulaType(builder, formulaType):
    builder.PrependInt32Slot(2, formulaType, 0)

def clz_Torappu_BuildingData_ShopFormulaAddCostPoint(builder, costPoint):
    builder.PrependInt64Slot(3, costPoint, 0)

def clz_Torappu_BuildingData_ShopFormulaAddGainItem(builder, gainItem):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(gainItem), 0)

def clz_Torappu_BuildingData_ShopFormulaAddRequireRooms(builder, requireRooms):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(requireRooms), 0)

def clz_Torappu_BuildingData_ShopFormulaStartRequireRoomsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_ShopFormulaEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_ShopFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_ShopFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_ShopFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_ShopFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_ShopFormula
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_ShopFormula
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_ShopFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_ShopFormulaStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_ShopFormulaAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_ShopFormulaAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_ShopFormulaEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_WorkshopFormula_UnlockRoom(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom
    def RoomId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom
    def RoomLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom
    def RoomCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_WorkshopFormula_UnlockRoomStart(builder):
    builder.StartObject(3)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockRoomAddRoomId(builder, roomId):
    builder.PrependInt32Slot(0, roomId, 0)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockRoomAddRoomLevel(builder, roomLevel):
    builder.PrependInt32Slot(1, roomLevel, 0)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockRoomAddRoomCount(builder, roomCount):
    builder.PrependInt32Slot(2, roomCount, 0)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockRoomEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_WorkshopFormula_UnlockStage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_WorkshopFormula_UnlockStage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_WorkshopFormula_UnlockStage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_WorkshopFormula_UnlockStage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_WorkshopFormula_UnlockStage
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_WorkshopFormula_UnlockStage
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_WorkshopFormula_UnlockStageStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockStageAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockStageAddRank(builder, rank):
    builder.PrependInt32Slot(1, rank, 0)

def clz_Torappu_BuildingData_WorkshopFormula_UnlockStageEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_WorkshopFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_WorkshopFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_WorkshopFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_WorkshopFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_WorkshopFormula
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def FormulaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def GoldCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def ApCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def FormulaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def BuffType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def ExtraOutcomeRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData_WorkshopFormula
    def ExtraOutcomeGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_WorkshopExtraWeightItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def ExtraOutcomeGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def ExtraOutcomeGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def Costs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def CostsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def CostsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireRooms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_WorkshopFormula_UnlockRoom()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireRoomsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireRoomsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireStages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_BuildingData_WorkshopFormula_UnlockStage()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireStagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_WorkshopFormula
    def RequireStagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_BuildingData_WorkshopFormulaStart(builder):
    builder.StartObject(14)

def clz_Torappu_BuildingData_WorkshopFormulaAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddFormulaId(builder, formulaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(formulaId), 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddRarity(builder, rarity):
    builder.PrependInt32Slot(2, rarity, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddCount(builder, count):
    builder.PrependInt32Slot(4, count, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddGoldCost(builder, goldCost):
    builder.PrependInt64Slot(5, goldCost, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddApCost(builder, apCost):
    builder.PrependInt64Slot(6, apCost, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddFormulaType(builder, formulaType):
    builder.PrependInt32Slot(7, formulaType, 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddBuffType(builder, buffType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffType), 0)

def clz_Torappu_BuildingData_WorkshopFormulaAddExtraOutcomeRate(builder, extraOutcomeRate):
    builder.PrependFloat32Slot(9, extraOutcomeRate, 0.0)

def clz_Torappu_BuildingData_WorkshopFormulaAddExtraOutcomeGroup(builder, extraOutcomeGroup):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(extraOutcomeGroup), 0)

def clz_Torappu_BuildingData_WorkshopFormulaStartExtraOutcomeGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_WorkshopFormulaAddCosts(builder, costs):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(costs), 0)

def clz_Torappu_BuildingData_WorkshopFormulaStartCostsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_WorkshopFormulaAddRequireRooms(builder, requireRooms):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(requireRooms), 0)

def clz_Torappu_BuildingData_WorkshopFormulaStartRequireRoomsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_WorkshopFormulaAddRequireStages(builder, requireStages):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(requireStages), 0)

def clz_Torappu_BuildingData_WorkshopFormulaStartRequireStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_WorkshopFormulaEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_BuildingData_WorkshopFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_BuildingData_WorkshopFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_BuildingData_WorkshopFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_BuildingData_WorkshopFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_BuildingData_WorkshopFormula
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_BuildingData_WorkshopFormula
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_WorkshopFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_BuildingData_WorkshopFormulaStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_BuildingData_WorkshopFormulaAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_BuildingData_WorkshopFormulaAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_BuildingData_WorkshopFormulaEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CreditFormula_ValueModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CreditFormula_ValueModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CreditFormula_ValueModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Basic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Addition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_BuildingData_CreditFormula_ValueModelStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_CreditFormula_ValueModelAddBasic(builder, basic):
    builder.PrependInt32Slot(0, basic, 0)

def clz_Torappu_BuildingData_CreditFormula_ValueModelAddAddition(builder, addition):
    builder.PrependInt32Slot(1, addition, 0)

def clz_Torappu_BuildingData_CreditFormula_ValueModelEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CreditFormula_ValueModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModelEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData_CreditFormula(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData_CreditFormula()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData_CreditFormula(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData_CreditFormula
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData_CreditFormula
    def Initiative(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CreditFormula
    def InitiativeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CreditFormula
    def InitiativeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_BuildingData_CreditFormula
    def Passive(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_BuildingData_CreditFormula_ValueModel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData_CreditFormula
    def PassiveLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData_CreditFormula
    def PassiveIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_BuildingData_CreditFormulaStart(builder):
    builder.StartObject(2)

def clz_Torappu_BuildingData_CreditFormulaAddInitiative(builder, initiative):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initiative), 0)

def clz_Torappu_BuildingData_CreditFormulaStartInitiativeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CreditFormulaAddPassive(builder, passive):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(passive), 0)

def clz_Torappu_BuildingData_CreditFormulaStartPassiveVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingData_CreditFormulaEnd(builder):
    return builder.EndObject()



class clz_Torappu_BuildingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_BuildingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_BuildingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_BuildingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_BuildingData
    def ControlSlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData
    def MeetingSlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData
    def InitMaxLabor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def LaborRecoverTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManufactInputCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ShopCounterCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ComfortLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def CreditInitiativeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def CreditPassiveLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def CreditComfortFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def CreditGuaranteed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def CreditCeiling(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManufactUnlockTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData
    def ShopUnlockTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_BuildingData
    def ManufactStationBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_BuildingData
    def ComfortManpowerRecoverFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManpowerDisplayFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ShopOutputRatio(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ShopOutputRatioLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def ShopOutputRatioIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_BuildingData
    def ShopStackRatio(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ShopStackRatioLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def ShopStackRatioIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_BuildingData
    def BasicFavorPerDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def HumanResourceLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def TiredApThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ProcessedCountRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def TradingStrategyUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def TradingReduceTimeUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def TradingLaborCostUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManufactReduceTimeUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManufactLaborCostUnit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def LaborAssistUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ApToLaborUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ApToLaborRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def SocialResourceLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def SocialSlotNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def FurniDuplicationLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def AssistFavorReport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def ManufactManpowerCostByNum(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_BuildingData
    def ManufactManpowerCostByNumAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_BuildingData
    def ManufactManpowerCostByNumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def ManufactManpowerCostByNumIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # clz_Torappu_BuildingData
    def TradingManpowerCostByNum(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_BuildingData
    def TradingManpowerCostByNumAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_BuildingData
    def TradingManpowerCostByNumLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def TradingManpowerCostByNumIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # clz_Torappu_BuildingData
    def TrainingBonusMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_BuildingData
    def RoomUnlockConds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_RoomUnlockCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def RoomUnlockCondsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def RoomUnlockCondsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # clz_Torappu_BuildingData
    def Rooms(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_RoomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def RoomsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def RoomsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # clz_Torappu_BuildingData
    def Layouts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_LayoutData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def LayoutsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def LayoutsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # clz_Torappu_BuildingData
    def Prefabs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_PrefabInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def PrefabsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def PrefabsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # clz_Torappu_BuildingData
    def ControlData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_ControlRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ManufactData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_ManufactRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ShopData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_ShopPhase_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def HireData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_HireRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def DormData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_DormPhase_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def MeetingData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_MeetingRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def TradingData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_TradingRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def WorkshopData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_RoomBean_1_Torappu_BuildingData_WorkshopPhase_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def TrainingData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_TrainingBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def PowerData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_PowerRoomBean()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def Chars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_BuildingCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def CharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def CharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # clz_Torappu_BuildingData
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_BuildingBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # clz_Torappu_BuildingData
    def WorkshopBonus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def WorkshopBonusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def WorkshopBonusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

    # clz_Torappu_BuildingData
    def CustomData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CustomData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ManufactFormulas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_ManufactFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ManufactFormulasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def ManufactFormulasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        return o == 0

    # clz_Torappu_BuildingData
    def ShopFormulas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_ShopFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def ShopFormulasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def ShopFormulasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        return o == 0

    # clz_Torappu_BuildingData
    def WorkshopFormulas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_BuildingData_WorkshopFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def WorkshopFormulasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def WorkshopFormulasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # clz_Torappu_BuildingData
    def CreditFormula(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_BuildingData_CreditFormula()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def GoldItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_BuildingData
    def GoldItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def GoldItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # clz_Torappu_BuildingData
    def AssistantUnlock(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_BuildingData
    def AssistantUnlockAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_BuildingData
    def AssistantUnlockLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_BuildingData
    def AssistantUnlockIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

def clz_Torappu_BuildingDataStart(builder):
    builder.StartObject(62)

def clz_Torappu_BuildingDataAddControlSlotId(builder, controlSlotId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(controlSlotId), 0)

def clz_Torappu_BuildingDataAddMeetingSlotId(builder, meetingSlotId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(meetingSlotId), 0)

def clz_Torappu_BuildingDataAddInitMaxLabor(builder, initMaxLabor):
    builder.PrependInt32Slot(2, initMaxLabor, 0)

def clz_Torappu_BuildingDataAddLaborRecoverTime(builder, laborRecoverTime):
    builder.PrependInt32Slot(3, laborRecoverTime, 0)

def clz_Torappu_BuildingDataAddManufactInputCapacity(builder, manufactInputCapacity):
    builder.PrependInt32Slot(4, manufactInputCapacity, 0)

def clz_Torappu_BuildingDataAddShopCounterCapacity(builder, shopCounterCapacity):
    builder.PrependInt32Slot(5, shopCounterCapacity, 0)

def clz_Torappu_BuildingDataAddComfortLimit(builder, comfortLimit):
    builder.PrependInt32Slot(6, comfortLimit, 0)

def clz_Torappu_BuildingDataAddCreditInitiativeLimit(builder, creditInitiativeLimit):
    builder.PrependInt32Slot(7, creditInitiativeLimit, 0)

def clz_Torappu_BuildingDataAddCreditPassiveLimit(builder, creditPassiveLimit):
    builder.PrependInt32Slot(8, creditPassiveLimit, 0)

def clz_Torappu_BuildingDataAddCreditComfortFactor(builder, creditComfortFactor):
    builder.PrependInt32Slot(9, creditComfortFactor, 0)

def clz_Torappu_BuildingDataAddCreditGuaranteed(builder, creditGuaranteed):
    builder.PrependInt32Slot(10, creditGuaranteed, 0)

def clz_Torappu_BuildingDataAddCreditCeiling(builder, creditCeiling):
    builder.PrependInt32Slot(11, creditCeiling, 0)

def clz_Torappu_BuildingDataAddManufactUnlockTips(builder, manufactUnlockTips):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(manufactUnlockTips), 0)

def clz_Torappu_BuildingDataAddShopUnlockTips(builder, shopUnlockTips):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(shopUnlockTips), 0)

def clz_Torappu_BuildingDataAddManufactStationBuff(builder, manufactStationBuff):
    builder.PrependFloat32Slot(14, manufactStationBuff, 0.0)

def clz_Torappu_BuildingDataAddComfortManpowerRecoverFactor(builder, comfortManpowerRecoverFactor):
    builder.PrependInt32Slot(15, comfortManpowerRecoverFactor, 0)

def clz_Torappu_BuildingDataAddManpowerDisplayFactor(builder, manpowerDisplayFactor):
    builder.PrependInt32Slot(16, manpowerDisplayFactor, 0)

def clz_Torappu_BuildingDataAddShopOutputRatio(builder, shopOutputRatio):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(shopOutputRatio), 0)

def clz_Torappu_BuildingDataStartShopOutputRatioVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddShopStackRatio(builder, shopStackRatio):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(shopStackRatio), 0)

def clz_Torappu_BuildingDataStartShopStackRatioVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddBasicFavorPerDay(builder, basicFavorPerDay):
    builder.PrependInt32Slot(19, basicFavorPerDay, 0)

def clz_Torappu_BuildingDataAddHumanResourceLimit(builder, humanResourceLimit):
    builder.PrependInt32Slot(20, humanResourceLimit, 0)

def clz_Torappu_BuildingDataAddTiredApThreshold(builder, tiredApThreshold):
    builder.PrependInt64Slot(21, tiredApThreshold, 0)

def clz_Torappu_BuildingDataAddProcessedCountRatio(builder, processedCountRatio):
    builder.PrependInt32Slot(22, processedCountRatio, 0)

def clz_Torappu_BuildingDataAddTradingStrategyUnlockLevel(builder, tradingStrategyUnlockLevel):
    builder.PrependInt32Slot(23, tradingStrategyUnlockLevel, 0)

def clz_Torappu_BuildingDataAddTradingReduceTimeUnit(builder, tradingReduceTimeUnit):
    builder.PrependInt32Slot(24, tradingReduceTimeUnit, 0)

def clz_Torappu_BuildingDataAddTradingLaborCostUnit(builder, tradingLaborCostUnit):
    builder.PrependInt32Slot(25, tradingLaborCostUnit, 0)

def clz_Torappu_BuildingDataAddManufactReduceTimeUnit(builder, manufactReduceTimeUnit):
    builder.PrependInt32Slot(26, manufactReduceTimeUnit, 0)

def clz_Torappu_BuildingDataAddManufactLaborCostUnit(builder, manufactLaborCostUnit):
    builder.PrependInt32Slot(27, manufactLaborCostUnit, 0)

def clz_Torappu_BuildingDataAddLaborAssistUnlockLevel(builder, laborAssistUnlockLevel):
    builder.PrependInt32Slot(28, laborAssistUnlockLevel, 0)

def clz_Torappu_BuildingDataAddApToLaborUnlockLevel(builder, apToLaborUnlockLevel):
    builder.PrependInt32Slot(29, apToLaborUnlockLevel, 0)

def clz_Torappu_BuildingDataAddApToLaborRatio(builder, apToLaborRatio):
    builder.PrependInt32Slot(30, apToLaborRatio, 0)

def clz_Torappu_BuildingDataAddSocialResourceLimit(builder, socialResourceLimit):
    builder.PrependInt32Slot(31, socialResourceLimit, 0)

def clz_Torappu_BuildingDataAddSocialSlotNum(builder, socialSlotNum):
    builder.PrependInt32Slot(32, socialSlotNum, 0)

def clz_Torappu_BuildingDataAddFurniDuplicationLimit(builder, furniDuplicationLimit):
    builder.PrependInt32Slot(33, furniDuplicationLimit, 0)

def clz_Torappu_BuildingDataAddAssistFavorReport(builder, assistFavorReport):
    builder.PrependInt64Slot(34, assistFavorReport, 0)

def clz_Torappu_BuildingDataAddManufactManpowerCostByNum(builder, manufactManpowerCostByNum):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(manufactManpowerCostByNum), 0)

def clz_Torappu_BuildingDataStartManufactManpowerCostByNumVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddTradingManpowerCostByNum(builder, tradingManpowerCostByNum):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(tradingManpowerCostByNum), 0)

def clz_Torappu_BuildingDataStartTradingManpowerCostByNumVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddTrainingBonusMax(builder, trainingBonusMax):
    builder.PrependInt32Slot(37, trainingBonusMax, 0)

def clz_Torappu_BuildingDataAddRoomUnlockConds(builder, roomUnlockConds):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(roomUnlockConds), 0)

def clz_Torappu_BuildingDataStartRoomUnlockCondsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddRooms(builder, rooms):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(rooms), 0)

def clz_Torappu_BuildingDataStartRoomsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddLayouts(builder, layouts):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(layouts), 0)

def clz_Torappu_BuildingDataStartLayoutsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddPrefabs(builder, prefabs):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(prefabs), 0)

def clz_Torappu_BuildingDataStartPrefabsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddControlData(builder, controlData):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(controlData), 0)

def clz_Torappu_BuildingDataAddManufactData(builder, manufactData):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(manufactData), 0)

def clz_Torappu_BuildingDataAddShopData(builder, shopData):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(shopData), 0)

def clz_Torappu_BuildingDataAddHireData(builder, hireData):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(hireData), 0)

def clz_Torappu_BuildingDataAddDormData(builder, dormData):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(dormData), 0)

def clz_Torappu_BuildingDataAddMeetingData(builder, meetingData):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(meetingData), 0)

def clz_Torappu_BuildingDataAddTradingData(builder, tradingData):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(tradingData), 0)

def clz_Torappu_BuildingDataAddWorkshopData(builder, workshopData):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(workshopData), 0)

def clz_Torappu_BuildingDataAddTrainingData(builder, trainingData):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(trainingData), 0)

def clz_Torappu_BuildingDataAddPowerData(builder, powerData):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(powerData), 0)

def clz_Torappu_BuildingDataAddChars(builder, chars):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(chars), 0)

def clz_Torappu_BuildingDataStartCharsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_BuildingDataStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddWorkshopBonus(builder, workshopBonus):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(workshopBonus), 0)

def clz_Torappu_BuildingDataStartWorkshopBonusVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddCustomData(builder, customData):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(customData), 0)

def clz_Torappu_BuildingDataAddManufactFormulas(builder, manufactFormulas):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(manufactFormulas), 0)

def clz_Torappu_BuildingDataStartManufactFormulasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddShopFormulas(builder, shopFormulas):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(shopFormulas), 0)

def clz_Torappu_BuildingDataStartShopFormulasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddWorkshopFormulas(builder, workshopFormulas):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(workshopFormulas), 0)

def clz_Torappu_BuildingDataStartWorkshopFormulasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddCreditFormula(builder, creditFormula):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(creditFormula), 0)

def clz_Torappu_BuildingDataAddGoldItems(builder, goldItems):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(goldItems), 0)

def clz_Torappu_BuildingDataStartGoldItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataAddAssistantUnlock(builder, assistantUnlock):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(assistantUnlock), 0)

def clz_Torappu_BuildingDataStartAssistantUnlockVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_BuildingDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_BuildingData
