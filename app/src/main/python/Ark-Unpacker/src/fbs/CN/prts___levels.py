# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BattleFunctionDisableMask(object):
    NONE = 0
    CARD_LIST = 1
    CHARACTER_MENU = 2
    CHARACTER_INFO = 4
    SYSTEM_MENU = 8
    PAUSE_BUTTON = 16
    SPEED_SWITCHER_BUTTON = 32
    BATTLE_STATUS = 64
    COST_PANEL = 128
    SLOW_MOTION = 256
    PAUSE_BUTTON_INTERACT = 512
    SYSTEM_MENU_INTERACT = 1024
    SPEED_SWITCHER_BUTTON_INTERACT = 2048
    ALL = 4095


class enum__Torappu_TileData_HeightType(object):
    LOWLAND = 0
    HIGHLAND = 1
    E_NUM = 2


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_MotionMask(object):
    NONE = 0
    WALK_ONLY = 1
    FLY_ONLY = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 1
    SIDE_B = 2
    NONE = 3


class enum__Torappu_Battle_AdvancedBuildableMask(object):
    NONE = 0
    DEFAULT = 1
    DEEP_SEA = 2
    TIDE_SEA = 4
    NIGHT = 8
    HIDE = 16
    WOODRD_HOLE = 32
    RIDGE_FIELD = 64


class enum__Torappu_SharedConsts_Direction(object):
    UP = 0
    RIGHT = 1
    DOWN = 2
    LEFT = 3
    E_NUM = 4
    INVALID = 4


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_MotionMode(object):
    WALK = 0
    FLY = 1
    E_NUM = 2


class enum__Torappu_CheckpointType(object):
    MOVE = 0
    WAIT_FOR_SECONDS = 1
    WAIT_FOR_PLAY_TIME = 2
    WAIT_CURRENT_FRAGMENT_TIME = 3
    WAIT_CURRENT_WAVE_TIME = 4
    DISAPPEAR = 5
    APPEAR_AT_POS = 6
    ALERT = 7
    PATROL_MOVE = 8
    WAIT_BOSSRUSH_WAVE = 9
    INVALID = 10


class enum__Torappu_SourceApplyWay(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_EnemyLevelType(object):
    NORMAL = 0
    ELITE = 1
    BOSS = 2
    E_NUM = 3


class enum__Torappu_SpType(object):
    NONE = 0
    INCREASE_WITH_TIME = 1
    INCREASE_WHEN_ATTACK = 2
    INCREASE_WHEN_TAKEN_DAMAGE = 4
    ATTACK_OR_DAMAGE = 6
    ALL = 7


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType(object):
    SPAWN = 0
    PREVIEW_CURSOR = 1
    STORY = 2
    TUTORIAL = 3
    PLAY_BGM = 4
    DISPLAY_ENEMY_INFO = 5
    ACTIVATE_PREDEFINED = 6
    PLAY_OPERA = 7
    TRIGGER_PREDEFINED = 8
    BATTLE_EVENTS = 9
    WITHDRAW_PREDEFINED = 10
    DIALOG = 11
    SHOW_ALL_HIDDEN_CARDS = 12
    E_NUM = 13


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType(object):
    ALWAYS = 0
    PER_DAY = 1
    NEVER = 2
    PER_SETTLE_DAY = 3
    PER_SEASON = 4


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType(object):
    ALWAYS = 0
    PER_DAY = 1
    NEVER = 2
    PER_SETTLE_DAY = 3
    PER_SEASON = 4


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_Options(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_Options()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_Options(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_Options
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_Options
    def CharacterLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxLifePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def InitialCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def CostIncreaseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def MoveMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def SteeringEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsHardTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsPredefinedCardsSelectable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def MaxPlayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def FunctionDisableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def clz_Torappu_LevelData_OptionsStart(builder):
    builder.StartObject(13)

def clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, characterLimit):
    builder.PrependInt32Slot(0, characterLimit, 0)

def clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, maxLifePoint):
    builder.PrependInt32Slot(1, maxLifePoint, 0)

def clz_Torappu_LevelData_OptionsAddInitialCost(builder, initialCost):
    builder.PrependInt32Slot(2, initialCost, 0)

def clz_Torappu_LevelData_OptionsAddMaxCost(builder, maxCost):
    builder.PrependInt32Slot(3, maxCost, 0)

def clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, costIncreaseTime):
    builder.PrependFloat32Slot(4, costIncreaseTime, 0.0)

def clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, moveMultiplier):
    builder.PrependFloat32Slot(5, moveMultiplier, 0.0)

def clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, steeringEnabled):
    builder.PrependBoolSlot(6, steeringEnabled, 0)

def clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, isTrainingLevel):
    builder.PrependBoolSlot(7, isTrainingLevel, 0)

def clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, isHardTrainingLevel):
    builder.PrependBoolSlot(8, isHardTrainingLevel, 0)

def clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable):
    builder.PrependBoolSlot(9, isPredefinedCardsSelectable, 0)

def clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, maxPlayTime):
    builder.PrependFloat32Slot(10, maxPlayTime, 0.0)

def clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, functionDisableMask):
    builder.PrependInt32Slot(11, functionDisableMask, 0)

def clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(configBlackBoard), 0)

def clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_OptionsEnd(builder):
    return builder.EndObject()



class hg__internal__MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hg__internal__MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshg__internal__MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # hg__internal__MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hg__internal__MapData
    def RowSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def ColumnSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def MatrixData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # hg__internal__MapData
    def MatrixDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # hg__internal__MapData
    def MatrixDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hg__internal__MapData
    def MatrixDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def hg__internal__MapDataStart(builder):
    builder.StartObject(3)

def hg__internal__MapDataAddRowSize(builder, rowSize):
    builder.PrependInt32Slot(0, rowSize, 0)

def hg__internal__MapDataAddColumnSize(builder, columnSize):
    builder.PrependInt32Slot(1, columnSize, 0)

def hg__internal__MapDataAddMatrixData(builder, matrixData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matrixData), 0)

def hg__internal__MapDataStartMatrixDataVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def hg__internal__MapDataEnd(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector3()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector3(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector3Start(builder):
    builder.StartObject(3)

def clz_UnityEngine_Vector3AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector3AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector3AddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def clz_UnityEngine_Vector3End(builder):
    return builder.EndObject()



class clz_Torappu_MapEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapEffectData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MapEffectData
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapEffectData
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapEffectDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_MapEffectDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_MapEffectDataAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def clz_Torappu_MapEffectDataAddDirection(builder, direction):
    builder.PrependInt32Slot(2, direction, 0)

def clz_Torappu_MapEffectDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TileData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TileData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TileData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TileData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TileData
    def TileKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TileData
    def HeightType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def BuildableType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PassableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_TileData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_TileDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_TileDataAddTileKey(builder, tileKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tileKey), 0)

def clz_Torappu_TileDataAddHeightType(builder, heightType):
    builder.PrependInt32Slot(1, heightType, 0)

def clz_Torappu_TileDataAddBuildableType(builder, buildableType):
    builder.PrependInt32Slot(2, buildableType, 0)

def clz_Torappu_TileDataAddPassableMask(builder, passableMask):
    builder.PrependInt32Slot(3, passableMask, 0)

def clz_Torappu_TileDataAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(4, playerSideMask, 0)

def clz_Torappu_TileDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_TileDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TileDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def clz_Torappu_TileDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TileDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_GridPosition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GridPosition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GridPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GridPosition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GridPosition
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GridPosition
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GridPositionStart(builder):
    builder.StartObject(2)

def clz_Torappu_GridPositionAddRow(builder, row):
    builder.PrependInt32Slot(0, row, 0)

def clz_Torappu_GridPositionAddCol(builder, col):
    builder.PrependInt32Slot(1, col, 0)

def clz_Torappu_GridPositionEnd(builder):
    return builder.EndObject()



class clz_Torappu_MapData_Edge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData_Edge()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData_Edge(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData_Edge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData_Edge
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData_Edge
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MapData_Edge
    def BlockMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapData_EdgeStart(builder):
    builder.StartObject(3)

def clz_Torappu_MapData_EdgeAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def clz_Torappu_MapData_EdgeAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def clz_Torappu_MapData_EdgeAddBlockMask(builder, blockMask):
    builder.PrependInt32Slot(2, blockMask, 0)

def clz_Torappu_MapData_EdgeEnd(builder):
    return builder.EndObject()



class clz_Torappu_MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def Tiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TileData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def TilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MapData
    def BlockEdges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapData_Edge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def BlockEdgesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def BlockEdgesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MapData
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MapData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MapData
    def LayerRects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def LayerRectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def LayerRectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_MapDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_MapDataAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def clz_Torappu_MapDataAddTiles(builder, tiles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tiles), 0)

def clz_Torappu_MapDataStartTilesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddBlockEdges(builder, blockEdges):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blockEdges), 0)

def clz_Torappu_MapDataStartBlockEdgesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def clz_Torappu_MapDataStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def clz_Torappu_MapDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddLayerRects(builder, layerRects):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(layerRects), 0)

def clz_Torappu_MapDataStartLayerRectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LegacyInLevelRuneData
    def DifficultyMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask):
    builder.PrependInt32Slot(0, difficultyMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(2, professionMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(3, buildableMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_GlobalBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_GlobalBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_GlobalBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_GlobalBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_GlobalBuffData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_GlobalBuffData
    def OverrideCameraEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def PassProfessionMaskFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_GlobalBuffData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def UseExtraData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_LevelData_GlobalBuffDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(overrideCameraEffect), 0)

def clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, passProfessionMaskFlag):
    builder.PrependBoolSlot(3, passProfessionMaskFlag, 0)

def clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(4, professionMask, 0)

def clz_Torappu_LevelData_GlobalBuffDataAddUseExtraData(builder, useExtraData):
    builder.PrependBoolSlot(5, useExtraData, 0)

def clz_Torappu_LevelData_GlobalBuffDataEnd(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector2
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector2
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector2Start(builder):
    builder.StartObject(2)

def clz_UnityEngine_Vector2AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector2AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector2End(builder):
    return builder.EndObject()



class clz_Torappu_RouteData_CheckpointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData_CheckpointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData_CheckpointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData_CheckpointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData_CheckpointData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData_CheckpointData
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RouteData_CheckpointData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def ReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def RandomizeReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData_CheckpointData
    def ReachDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_RouteData_CheckpointDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RouteData_CheckpointDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_RouteData_CheckpointDataAddTime(builder, time):
    builder.PrependFloat32Slot(1, time, 0.0)

def clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(reachOffset), 0)

def clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, randomizeReachOffset):
    builder.PrependBoolSlot(4, randomizeReachOffset, 0)

def clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, reachDistance):
    builder.PrependFloat32Slot(5, reachDistance, 0.0)

def clz_Torappu_RouteData_CheckpointDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RouteData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData
    def MotionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData
    def StartPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def EndPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnRandomRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def Checkpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData_CheckpointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def CheckpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RouteData
    def CheckpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RouteData
    def AllowDiagonalMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryTileCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryNodeCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryCheckPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RouteDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RouteDataAddMotionMode(builder, motionMode):
    builder.PrependInt32Slot(0, motionMode, 0)

def clz_Torappu_RouteDataAddStartPosition(builder, startPosition):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(startPosition), 0)

def clz_Torappu_RouteDataAddEndPosition(builder, endPosition):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endPosition), 0)

def clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spawnRandomRange), 0)

def clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spawnOffset), 0)

def clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(checkpoints), 0)

def clz_Torappu_RouteDataStartCheckpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RouteDataAddAllowDiagonalMove(builder, allowDiagonalMove):
    builder.PrependBoolSlot(6, allowDiagonalMove, 0)

def clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, visitEveryTileCenter):
    builder.PrependBoolSlot(7, visitEveryTileCenter, 0)

def clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, visitEveryNodeCenter):
    builder.PrependBoolSlot(8, visitEveryNodeCenter, 0)

def clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, visitEveryCheckPoint):
    builder.PrependBoolSlot(9, visitEveryCheckPoint, 0)

def clz_Torappu_RouteDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributesData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributesData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributesData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributesData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributesData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Def_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MaxDeckStackCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_AttributesDataStart(builder):
    builder.StartObject(24)

def clz_Torappu_AttributesDataAddMaxHp(builder, maxHp):
    builder.PrependInt32Slot(0, maxHp, 0)

def clz_Torappu_AttributesDataAddAtk(builder, atk):
    builder.PrependInt32Slot(1, atk, 0)

def clz_Torappu_AttributesDataAddDef_(builder, def_):
    builder.PrependInt32Slot(2, def_, 0)

def clz_Torappu_AttributesDataAddMagicResistance(builder, magicResistance):
    builder.PrependFloat32Slot(3, magicResistance, 0.0)

def clz_Torappu_AttributesDataAddCost(builder, cost):
    builder.PrependInt32Slot(4, cost, 0)

def clz_Torappu_AttributesDataAddBlockCnt(builder, blockCnt):
    builder.PrependInt32Slot(5, blockCnt, 0)

def clz_Torappu_AttributesDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependFloat32Slot(6, moveSpeed, 0.0)

def clz_Torappu_AttributesDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependFloat32Slot(7, attackSpeed, 0.0)

def clz_Torappu_AttributesDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependFloat32Slot(8, baseAttackTime, 0.0)

def clz_Torappu_AttributesDataAddRespawnTime(builder, respawnTime):
    builder.PrependInt32Slot(9, respawnTime, 0)

def clz_Torappu_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependFloat32Slot(10, hpRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependFloat32Slot(11, spRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependInt32Slot(12, maxDeployCount, 0)

def clz_Torappu_AttributesDataAddMaxDeckStackCnt(builder, maxDeckStackCnt):
    builder.PrependInt32Slot(13, maxDeckStackCnt, 0)

def clz_Torappu_AttributesDataAddTauntLevel(builder, tauntLevel):
    builder.PrependInt32Slot(14, tauntLevel, 0)

def clz_Torappu_AttributesDataAddMassLevel(builder, massLevel):
    builder.PrependInt32Slot(15, massLevel, 0)

def clz_Torappu_AttributesDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependInt32Slot(16, baseForceLevel, 0)

def clz_Torappu_AttributesDataAddStunImmune(builder, stunImmune):
    builder.PrependBoolSlot(17, stunImmune, 0)

def clz_Torappu_AttributesDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependBoolSlot(18, silenceImmune, 0)

def clz_Torappu_AttributesDataAddSleepImmune(builder, sleepImmune):
    builder.PrependBoolSlot(19, sleepImmune, 0)

def clz_Torappu_AttributesDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependBoolSlot(20, frozenImmune, 0)

def clz_Torappu_AttributesDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependBoolSlot(21, levitateImmune, 0)

def clz_Torappu_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependBoolSlot(22, disarmedCombatImmune, 0)

def clz_Torappu_AttributesDataAddFearedImmune(builder, fearedImmune):
    builder.PrependBoolSlot(23, fearedImmune, 0)

def clz_Torappu_AttributesDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyData_ESkillData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_ESkillData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_ESkillData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Cooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def InitCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def SpCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, priority):
    builder.PrependInt32Slot(1, priority, 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, cooldown):
    builder.PrependFloat32Slot(2, cooldown, 0.0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, initCooldown):
    builder.PrependFloat32Slot(3, initCooldown, 0.0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, spCost):
    builder.PrependInt32Slot(4, spCost, 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyData_ESpData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_ESpData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_ESpData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_ESpData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_ESpData
    def SpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def MaxSp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def InitSp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def Increment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_LevelData_EnemyData_ESpDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_EnemyData_ESpDataAddSpType(builder, spType):
    builder.PrependInt32Slot(0, spType, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddMaxSp(builder, maxSp):
    builder.PrependInt32Slot(1, maxSp, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddInitSp(builder, initSp):
    builder.PrependInt32Slot(2, initSp, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddIncrement(builder, increment):
    builder.PrependFloat32Slot(3, increment, 0.0)

def clz_Torappu_LevelData_EnemyData_ESpDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DynamicAbilityData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DynamicAbilityData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DynamicAbilityData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DynamicAbilityData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DynamicAbilityData
    def AtRoot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_DynamicAbilityData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DynamicAbilityData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DynamicAbilityData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DynamicAbilityData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_DynamicAbilityDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_DynamicAbilityDataAddAtRoot(builder, atRoot):
    builder.PrependBoolSlot(0, atRoot, 0)

def clz_Torappu_DynamicAbilityDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_DynamicAbilityDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_DynamicAbilityDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DynamicAbilityDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyData_RuntimeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_RuntimeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_RuntimeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def DynamicAbilities(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_DynamicAbilityData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def DynamicAbilitiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def DynamicAbilitiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def SkinData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def SkinDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData_RuntimeData
    def SkinDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_LevelData_EnemyData_RuntimeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_LevelData_EnemyData_RuntimeDataAddDynamicAbilities(builder, dynamicAbilities):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicAbilities), 0)

def clz_Torappu_LevelData_EnemyData_RuntimeDataStartDynamicAbilitiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyData_RuntimeDataAddSkinData(builder, skinData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(skinData), 0)

def clz_Torappu_LevelData_EnemyData_RuntimeDataStartSkinDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyData_RuntimeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def ApplyWay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def NotCountInTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_EnemyData
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def LifePointReduce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def RangeRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def NumOfExtraDrops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData_ESkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def SpData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_EnemyData_ESpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def MRuntimeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_EnemyData_RuntimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_EnemyDataStart(builder):
    builder.StartObject(18)

def clz_Torappu_LevelData_EnemyDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_LevelData_EnemyDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_LevelData_EnemyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, applyWay):
    builder.PrependInt32Slot(4, applyWay, 0)

def clz_Torappu_LevelData_EnemyDataAddMotion(builder, motion):
    builder.PrependInt32Slot(5, motion, 0)

def clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyTags), 0)

def clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, notCountInTotal):
    builder.PrependBoolSlot(7, notCountInTotal, 0)

def clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, lifePointReduce):
    builder.PrependInt32Slot(9, lifePointReduce, 0)

def clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, rangeRadius):
    builder.PrependFloat32Slot(10, rangeRadius, 0.0)

def clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops):
    builder.PrependInt32Slot(11, numOfExtraDrops, 0)

def clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, viewRadius):
    builder.PrependFloat32Slot(12, viewRadius, 0.0)

def clz_Torappu_LevelData_EnemyDataAddLevelType(builder, levelType):
    builder.PrependInt32Slot(13, levelType, 0)

def clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(talentBlackboard), 0)

def clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(spData), 0)

def clz_Torappu_LevelData_EnemyDataAddMRuntimeData(builder, mRuntimeData):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(mRuntimeData), 0)

def clz_Torappu_LevelData_EnemyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_String_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_String_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_String_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_String_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_String_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_String_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Undefinable_1_System_String_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_String_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_String_AddMValue(builder, mValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mValue), 0)

def clz_Torappu_Undefinable_1_System_String_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Int32_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Int32_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Int32_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Int32_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Int32_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Int32_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_System_Int32_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Int32_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Int32_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_System_Int32_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Single_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Single_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Single_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Single_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Single_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Single_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Undefinable_1_System_Single_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Single_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Single_AddMValue(builder, mValue):
    builder.PrependFloat32Slot(1, mValue, 0.0)

def clz_Torappu_Undefinable_1_System_Single_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Boolean_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Boolean_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Boolean_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Boolean_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Boolean_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Boolean_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Undefinable_1_System_Boolean_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Boolean_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Boolean_AddMValue(builder, mValue):
    builder.PrependBoolSlot(1, mValue, 0)

def clz_Torappu_Undefinable_1_System_Boolean_End(builder):
    return builder.EndObject()



class clz_Torappu_EnemyDatabase_AttributesData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EnemyDatabase_AttributesData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EnemyDatabase_AttributesData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EnemyDatabase_AttributesData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EnemyDatabase_AttributesData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Def_(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def EpDamageResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def EpResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DamageHitratePhysical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DamageHitrateMagical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_EnemyDatabase_AttributesDataStart(builder):
    builder.StartObject(27)

def clz_Torappu_EnemyDatabase_AttributesDataAddMaxHp(builder, maxHp):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(maxHp), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddAtk(builder, atk):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(atk), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDef_(builder, def_):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(def_), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMagicResistance(builder, magicResistance):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(magicResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddCost(builder, cost):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cost), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBlockCnt(builder, blockCnt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blockCnt), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(moveSpeed), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(attackSpeed), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(baseAttackTime), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddRespawnTime(builder, respawnTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(respawnTime), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(hpRecoveryPerSec), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(spRecoveryPerSec), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(maxDeployCount), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMassLevel(builder, massLevel):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(massLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(baseForceLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddTauntLevel(builder, tauntLevel):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(tauntLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddEpDamageResistance(builder, epDamageResistance):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(epDamageResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddEpResistance(builder, epResistance):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(epResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitratePhysical(builder, damageHitratePhysical):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(damageHitratePhysical), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitrateMagical(builder, damageHitrateMagical):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(damageHitrateMagical), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddStunImmune(builder, stunImmune):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(stunImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(silenceImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSleepImmune(builder, sleepImmune):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(sleepImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(frozenImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(levitateImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(disarmedCombatImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddFearedImmune(builder, fearedImmune):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(fearedImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_SourceApplyWay_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_MotionMode_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_MotionMode_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_MotionMode_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_MotionMode_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_String___(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_String___()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_String___(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_String___
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_String___
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_String___
    def MValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Undefinable_1_System_String___
    def MValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Undefinable_1_System_String___
    def MValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Undefinable_1_System_String___Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mValue), 0)

def clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Undefinable_1_System_String___End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_EnemyLevelType_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_End(builder):
    return builder.EndObject()



class clz_Torappu_EnemyDatabase_EnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EnemyDatabase_EnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EnemyDatabase_EnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EnemyDatabase_EnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EnemyDatabase_EnemyData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EnemyDatabase_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def ApplyWay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_MotionMode_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def EnemyTags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String___()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def LifePointReduce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def RangeRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def NumOfExtraDrops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def NotCountInTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData_ESkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def SpData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_EnemyData_ESpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_EnemyDatabase_EnemyDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_EnemyDatabase_EnemyDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddApplyWay(builder, applyWay):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(applyWay), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddMotion(builder, motion):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(motion), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddEnemyTags(builder, enemyTags):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyTags), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddLifePointReduce(builder, lifePointReduce):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lifePointReduce), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddLevelType(builder, levelType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(levelType), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddRangeRadius(builder, rangeRadius):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rangeRadius), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(numOfExtraDrops), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddViewRadius(builder, viewRadius):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(viewRadius), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddNotCountInTotal(builder, notCountInTotal):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(notCountInTotal), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddTalentBlackboard(builder, talentBlackboard):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(talentBlackboard), 0)

def clz_Torappu_EnemyDatabase_EnemyDataStartTalentBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EnemyDatabase_EnemyDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_EnemyDatabase_EnemyDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EnemyDatabase_EnemyDataAddSpData(builder, spData):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(spData), 0)

def clz_Torappu_EnemyDatabase_EnemyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyDataDbReference(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyDataDbReference()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyDataDbReference(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyDataDbReference
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyDataDbReference
    def UseDb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_EnemyDataDbReference
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyDataDbReference
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyDataDbReference
    def OverwrittenData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EnemyDatabase_EnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_EnemyDataDbReferenceStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddUseDb(builder, useDb):
    builder.PrependBoolSlot(0, useDb, 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddLevel(builder, level):
    builder.PrependInt32Slot(2, level, 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddOverwrittenData(builder, overwrittenData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(overwrittenData), 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceEnd(builder):
    return builder.EndObject()



class clz_System_Object(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_System_Object()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_System_Object(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_System_Object
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def clz_System_ObjectStart(builder):
    builder.StartObject(0)

def clz_System_ObjectEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_ActionID(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_ActionID()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_ActionID(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_ActionID
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_ActionID
    def WaveI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_ActionID
    def FragI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_ActionID
    def ActionI(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_LevelData_ActionIDStart(builder):
    builder.StartObject(3)

def clz_Torappu_LevelData_ActionIDAddWaveI(builder, waveI):
    builder.PrependInt32Slot(0, waveI, 0)

def clz_Torappu_LevelData_ActionIDAddFragI(builder, fragI):
    builder.PrependInt32Slot(1, fragI, 0)

def clz_Torappu_LevelData_ActionIDAddActionI(builder, actionI):
    builder.PrependInt32Slot(2, actionI, 0)

def clz_Torappu_LevelData_ActionIDEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_WaveData_FragmentData_ActionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData_ActionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ActionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ManagedByScheduler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RouteIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def BlockFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoPreviewRoute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoDisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def IsUnharmfulAndAlwaysCountAsKilled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def HiddenGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupPackKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RefreshType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def DontBlockWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def IsValid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ExtraMeta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_System_Object()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ActionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_ActionID()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder):
    builder.StartObject(21)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, actionType):
    builder.PrependInt32Slot(0, actionType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, managedByScheduler):
    builder.PrependBoolSlot(1, managedByScheduler, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(4, preDelay, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, interval):
    builder.PrependFloat32Slot(5, interval, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, routeIndex):
    builder.PrependInt32Slot(6, routeIndex, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, blockFragment):
    builder.PrependBoolSlot(7, blockFragment, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, autoPreviewRoute):
    builder.PrependBoolSlot(8, autoPreviewRoute, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo):
    builder.PrependBoolSlot(9, autoDisplayEnemyInfo, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled):
    builder.PrependBoolSlot(10, isUnharmfulAndAlwaysCountAsKilled, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenGroup), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupKey), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupPackKey), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, randomType):
    builder.PrependInt32Slot(14, randomType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, refreshType):
    builder.PrependInt32Slot(15, refreshType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, weight):
    builder.PrependInt32Slot(16, weight, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, dontBlockWave):
    builder.PrependBoolSlot(17, dontBlockWave, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsValid(builder, isValid):
    builder.PrependBoolSlot(18, isValid, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddExtraMeta(builder, extraMeta):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(extraMeta), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionId(builder, actionId):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(actionId), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_WaveData_FragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_LevelData_WaveData_FragmentDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_WaveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def PostDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def MaxTimeWaitingForNextWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def Fragments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData
    def FragmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData
    def FragmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_WaveData
    def AdvancedWaveTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_LevelData_WaveDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LevelData_WaveDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_WaveDataAddPostDelay(builder, postDelay):
    builder.PrependFloat32Slot(1, postDelay, 0.0)

def clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave):
    builder.PrependFloat32Slot(2, maxTimeWaitingForNextWave, 0.0)

def clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fragments), 0)

def clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(advancedWaveTag), 0)

def clz_Torappu_LevelData_WaveDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_BranchData_PhaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_BranchData_PhaseData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_BranchData_PhaseData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_BranchData_PhaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_BranchData_PhaseData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData_PhaseData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MRandomActionGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MRandomActionGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MRandomActionGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MActionWithRandomSpawn(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MActionWithRandomSpawnLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MActionWithRandomSpawnIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MValidActionPackKeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MValidActionPackKeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def MValidActionPackKeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LevelData_BranchData_PhaseDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LevelData_BranchData_PhaseDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_BranchData_PhaseDataAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def clz_Torappu_LevelData_BranchData_PhaseDataStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchData_PhaseDataAddMRandomActionGroups(builder, mRandomActionGroups):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mRandomActionGroups), 0)

def clz_Torappu_LevelData_BranchData_PhaseDataStartMRandomActionGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchData_PhaseDataAddMActionWithRandomSpawn(builder, mActionWithRandomSpawn):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mActionWithRandomSpawn), 0)

def clz_Torappu_LevelData_BranchData_PhaseDataStartMActionWithRandomSpawnVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchData_PhaseDataAddMValidActionPackKeys(builder, mValidActionPackKeys):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mValidActionPackKeys), 0)

def clz_Torappu_LevelData_BranchData_PhaseDataStartMValidActionPackKeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchData_PhaseDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_BranchData
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_BranchData_PhaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_LevelData_BranchDataAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_LevelData_BranchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_LevelData_BranchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_UniqueEquipPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_UniqueEquipPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_UniqueEquipPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_UniqueEquipPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_UniqueEquipPairStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterData_UniqueEquipPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterInst_Metadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterInst_Metadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterInst_Metadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterInst_Metadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterInst_Metadata
    def CharacterKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterInst_Metadata
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def FavorPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def PotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterInst_MetadataStart(builder):
    builder.StartObject(5)

def clz_Torappu_CharacterInst_MetadataAddCharacterKey(builder, characterKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterKey), 0)

def clz_Torappu_CharacterInst_MetadataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterInst_MetadataAddPhase(builder, phase):
    builder.PrependInt32Slot(2, phase, 0)

def clz_Torappu_CharacterInst_MetadataAddFavorPoint(builder, favorPoint):
    builder.PrependInt32Slot(3, favorPoint, 0)

def clz_Torappu_CharacterInst_MetadataAddPotentialRank(builder, potentialRank):
    builder.PrependInt32Slot(4, potentialRank, 0)

def clz_Torappu_CharacterInst_MetadataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_PredefinedData_PredefinedCharacter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCharacter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder):
    builder.StartObject(11)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, hidden):
    builder.PrependBoolSlot(2, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(6, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(7, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_PredefinedData_PredefinedCard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder):
    builder.StartObject(9)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, hidden):
    builder.PrependBoolSlot(0, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(4, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(5, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedTokenCard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def InitialCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStart(builder):
    builder.StartObject(10)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInitialCnt(builder, initialCnt):
    builder.PrependInt32Slot(0, initialCnt, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddHidden(builder, hidden):
    builder.PrependBoolSlot(1, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(5, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(6, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_PredefinedData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_LevelData_PredefinedDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterInsts), 0)

def clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tokenInsts), 0)

def clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(characterCards), 0)

def clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenCards), 0)

def clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_RuntimeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_RuntimeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_RuntimeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_RuntimeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_RuntimeData
    def ExtraLoadEnemies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyDataDbReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_RuntimeData
    def ExtraLoadEnemiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_RuntimeData
    def ExtraLoadEnemiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_LevelData_RuntimeDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_LevelData_RuntimeDataAddExtraLoadEnemies(builder, extraLoadEnemies):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(extraLoadEnemies), 0)

def clz_Torappu_LevelData_RuntimeDataStartExtraLoadEnemiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_RuntimeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_Options()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def BgmEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def EnvironmentSe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def TilesDisallowToLocateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_LevelData
    def GlobalBuffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_GlobalBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def GlobalBuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def GlobalBuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_LevelData
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_LevelData
    def ExtraRoutes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExtraRoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExtraRoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_LevelData
    def Enemies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_LevelData
    def EnemyDbRefs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyDataDbReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemyDbRefsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemyDbRefsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_LevelData
    def Waves(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def WavesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def WavesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_LevelData
    def Branches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def BranchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def BranchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData
    def Predefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def HardPredefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExcludeCharIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData
    def ExcludeCharIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExcludeCharIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_LevelData
    def RandomSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData
    def OperaConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def RuntimeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_RuntimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelDataStart(builder):
    builder.StartObject(21)

def clz_Torappu_LevelDataAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def clz_Torappu_LevelDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_LevelDataAddMapId(builder, mapId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapId), 0)

def clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bgmEvent), 0)

def clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(environmentSe), 0)

def clz_Torappu_LevelDataAddMapData(builder, mapData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mapData), 0)

def clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tilesDisallowToLocate), 0)

def clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_LevelDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(globalBuffs), 0)

def clz_Torappu_LevelDataStartGlobalBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRoutes(builder, routes):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)

def clz_Torappu_LevelDataStartRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(extraRoutes), 0)

def clz_Torappu_LevelDataStartExtraRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddEnemies(builder, enemies):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(enemies), 0)

def clz_Torappu_LevelDataStartEnemiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemyDbRefs), 0)

def clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddWaves(builder, waves):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(waves), 0)

def clz_Torappu_LevelDataStartWavesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddBranches(builder, branches):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(branches), 0)

def clz_Torappu_LevelDataStartBranchesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddPredefines(builder, predefines):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(predefines), 0)

def clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(hardPredefines), 0)

def clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(excludeCharIdList), 0)

def clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRandomSeed(builder, randomSeed):
    builder.PrependInt32Slot(18, randomSeed, 0)

def clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(operaConfig), 0)

def clz_Torappu_LevelDataAddRuntimeData(builder, runtimeData):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(runtimeData), 0)

def clz_Torappu_LevelDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_LevelData
