# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_MedalRarity(object):
    T1 = 0
    T1D5 = 1
    T2 = 2
    T2D5 = 3
    T3 = 4
    T3D5 = 5


class enum__Torappu_MedalExpireType(object):
    NONE = 0
    INIT = 1
    TEMP = 2
    PERM = 3


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class clz_Torappu_MedalExpireTime(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalExpireTime()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalExpireTime(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalExpireTime
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalExpireTime
    def Start(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalExpireTime
    def End(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalExpireTime
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MedalExpireTimeStart(builder):
    builder.StartObject(3)

def clz_Torappu_MedalExpireTimeAddStart(builder, start):
    builder.PrependInt64Slot(0, start, 0)

def clz_Torappu_MedalExpireTimeAddEnd(builder, end):
    builder.PrependInt64Slot(1, end, 0)

def clz_Torappu_MedalExpireTimeAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_MedalExpireTimeEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_MedalRewardGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalRewardGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalRewardGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalRewardGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalRewardGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalRewardGroupData
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalRewardGroupData
    def ItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalRewardGroupData
    def ItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalRewardGroupData
    def ItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_MedalRewardGroupDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_MedalRewardGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_MedalRewardGroupDataAddSlotId(builder, slotId):
    builder.PrependInt32Slot(1, slotId, 0)

def clz_Torappu_MedalRewardGroupDataAddItemList(builder, itemList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemList), 0)

def clz_Torappu_MedalRewardGroupDataStartItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalRewardGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MedalPerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalPerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalPerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalPerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalPerData
    def MedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def MedalName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def MedalType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalPerData
    def PreMedalIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MedalPerData
    def PreMedalIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalPerData
    def PreMedalIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MedalPerData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalPerData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MedalPerData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalPerData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_MedalPerData
    def GetMethod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def AdvancedMedal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def OriginMedal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalPerData
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalPerData
    def ExpireTimes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MedalExpireTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalPerData
    def ExpireTimesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalPerData
    def ExpireTimesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_MedalPerData
    def MedalRewardGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MedalRewardGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalPerData
    def MedalRewardGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalPerData
    def MedalRewardGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_MedalPerData
    def IsHidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_MedalPerDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_MedalPerDataAddMedalId(builder, medalId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(medalId), 0)

def clz_Torappu_MedalPerDataAddMedalName(builder, medalName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(medalName), 0)

def clz_Torappu_MedalPerDataAddMedalType(builder, medalType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(medalType), 0)

def clz_Torappu_MedalPerDataAddSlotId(builder, slotId):
    builder.PrependInt32Slot(3, slotId, 0)

def clz_Torappu_MedalPerDataAddPreMedalIdList(builder, preMedalIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(preMedalIdList), 0)

def clz_Torappu_MedalPerDataStartPreMedalIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalPerDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(5, rarity, 0)

def clz_Torappu_MedalPerDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_MedalPerDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_MedalPerDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalPerDataAddGetMethod(builder, getMethod):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(getMethod), 0)

def clz_Torappu_MedalPerDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_MedalPerDataAddAdvancedMedal(builder, advancedMedal):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(advancedMedal), 0)

def clz_Torappu_MedalPerDataAddOriginMedal(builder, originMedal):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(originMedal), 0)

def clz_Torappu_MedalPerDataAddDisplayTime(builder, displayTime):
    builder.PrependInt64Slot(12, displayTime, 0)

def clz_Torappu_MedalPerDataAddExpireTimes(builder, expireTimes):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(expireTimes), 0)

def clz_Torappu_MedalPerDataStartExpireTimesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalPerDataAddMedalRewardGroup(builder, medalRewardGroup):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(medalRewardGroup), 0)

def clz_Torappu_MedalPerDataStartMedalRewardGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalPerDataAddIsHidden(builder, isHidden):
    builder.PrependBoolSlot(15, isHidden, 0)

def clz_Torappu_MedalPerDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MedalGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalGroupData
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalGroupData
    def GroupDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalGroupData
    def MedalId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MedalGroupData
    def MedalIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalGroupData
    def MedalIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MedalGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalGroupData
    def GroupBackColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalGroupData
    def GroupGetTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalGroupData
    def SharedExpireTimes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MedalExpireTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalGroupData
    def SharedExpireTimesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalGroupData
    def SharedExpireTimesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_MedalGroupDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_MedalGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_MedalGroupDataAddGroupName(builder, groupName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)

def clz_Torappu_MedalGroupDataAddGroupDesc(builder, groupDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupDesc), 0)

def clz_Torappu_MedalGroupDataAddMedalId(builder, medalId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(medalId), 0)

def clz_Torappu_MedalGroupDataStartMedalIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_MedalGroupDataAddGroupBackColor(builder, groupBackColor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupBackColor), 0)

def clz_Torappu_MedalGroupDataAddGroupGetTime(builder, groupGetTime):
    builder.PrependInt64Slot(6, groupGetTime, 0)

def clz_Torappu_MedalGroupDataAddSharedExpireTimes(builder, sharedExpireTimes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(sharedExpireTimes), 0)

def clz_Torappu_MedalGroupDataStartSharedExpireTimesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MedalTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalTypeData
    def MedalGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalTypeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MedalTypeData
    def MedalName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MedalTypeData
    def GroupData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MedalGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalTypeData
    def GroupDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalTypeData
    def GroupDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_MedalTypeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_MedalTypeDataAddMedalGroupId(builder, medalGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(medalGroupId), 0)

def clz_Torappu_MedalTypeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_MedalTypeDataAddMedalName(builder, medalName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(medalName), 0)

def clz_Torappu_MedalTypeDataAddGroupData(builder, groupData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(groupData), 0)

def clz_Torappu_MedalTypeDataStartGroupDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MedalTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MedalTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MedalTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MedalTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MedalTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MedalTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MedalTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MedalTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MedalTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MedalTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MedalTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MedalData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MedalData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MedalData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MedalData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MedalData
    def MedalList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MedalPerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalData
    def MedalListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalData
    def MedalListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_MedalData
    def MedalTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MedalTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MedalData
    def MedalTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MedalData
    def MedalTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_MedalDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_MedalDataAddMedalList(builder, medalList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(medalList), 0)

def clz_Torappu_MedalDataStartMedalListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalDataAddMedalTypeData(builder, medalTypeData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(medalTypeData), 0)

def clz_Torappu_MedalDataStartMedalTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MedalDataEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_MedalData
