# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_ActivityType(object):
    DEFAULT = 0
    MISSION_ONLY = 1
    CHECKIN_ONLY = 2
    CHECKIN_ALL_PLAYER = 3
    TYPE_ACT3D0 = 4
    TYPE_ACT4D0 = 5
    TYPE_ACT5D0 = 6
    TYPE_ACT5D1 = 7
    COLLECTION = 8
    AVG_ONLY = 9
    TYPE_ACT9D0 = 10
    TYPE_ACT12SIDE = 11
    TYPE_ACT13SIDE = 12
    TYPE_ACT17SIDE = 13
    LOGIN_ONLY = 14
    MINISTORY = 15
    ROGUELIKE = 16
    PRAY_ONLY = 17
    MULTIPLAY = 18
    MULTIPLAY_VERIFY2 = 19
    TYPE_ACT17D7 = 20
    GRID_GACHA = 21
    GRID_GACHA_V2 = 22
    INTERLOCK = 23
    APRIL_FOOL = 24
    BOSS_RUSH = 25
    TYPE_ACT20SIDE = 26
    FLOAT_PARADE = 27
    TYPE_ACT21SIDE = 28
    MAIN_BUFF = 29
    TYPE_ACT24SIDE = 30
    FLIP_ONLY = 31
    TYPE_ACT25SIDE = 32
    CHECKIN_VS = 33
    SWITCH_ONLY = 34
    TYPE_ACT27SIDE = 35
    UNIQUE_ONLY = 36
    MAINLINE_BP = 37
    TYPE_ACT42D0 = 38
    TYPE_ACT29SIDE = 39
    BLESS_ONLY = 40
    CHECKIN_ACCESS = 41
    YEAR_5_GENERAL = 42
    TYPE_ACT35SIDE = 43
    VEC_BREAK = 44
    TYPE_ACT36SIDE = 45
    ENUM = 46


class enum__Torappu_ActivityDisplayType(object):
    NONE = 0
    SIDESTORY = 1
    BRANCHLINE = 2
    MINISTORY = 3


class enum__Torappu_ActivityCompleteType(object):
    SPECIAL = 0
    CAN_COMPLETE = 1
    CANNOT_COMPLETE = 2


class enum__Torappu_MissionType(object):
    UNKNOWN = 0
    MAIN = 1
    DAILY = 2
    WEEKLY = 3
    GUIDE = 4
    SUB = 5
    ACTIVITY = 6
    OPENSERVER = 7
    TOWERSEASON = 8


class enum__Torappu_MissionItemBgType(object):
    COMMON = 0
    Equipment = 1
    Char = 2


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_VersusCheckInData_TasteType(object):
    DRAW = 0
    SWEET = 1
    SALT = 2


class enum__Torappu_Act3D0Data_GoodType(object):
    NORMAL = 0
    SPECIAL = 1


class enum__Torappu_Act3D0Data_GachaBoxType(object):
    LIMITED = 0
    UNLIMITED = 1


class enum__Torappu_MileStoneInfo_GoodType(object):
    NORMAL = 0
    SPECIAL = 1


class enum__Torappu_Act5D1Data_GoodType(object):
    NORMAL = 0
    PROGRESS = 1


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 1
    SIDE_B = 2
    NONE = 3


class enum__Torappu_Act9D0Data_ActivityNewsLineType(object):
    TextContent = 0
    ImageContent = 1


class enum__Torappu_Act12SideData_ActZoneClass(object):
    NONE = 0
    NORMAL = 1
    HIGHLEVEL = 2
    SUB = 3


class enum__Torappu_Act12SideData_RecycleDialogType(object):
    NONE = 0
    EMPTY = 1
    LOW = 2
    MEDIUM = 3
    HIGH = 4
    GACHA = 5


class enum__Torappu_Act12SideData_RecycleAnimationState(object):
    NONE = 0
    NORMAL = 1
    SMILE = 2


class enum__Torappu_Act13SideData_PrestigeRank(object):
    D = 0
    C = 1
    B = 2
    A = 3
    S = 4


class enum__Torappu_ActArchiveType(object):
    NONE = 0
    TIMELINE = 1
    MUSIC = 2
    PIC = 3
    AVG = 4
    STORY = 5
    NEWS = 6
    BUFF = 7
    RELIC = 8
    CAPSULE = 9
    TRAP = 10
    CHAT = 11
    LANDMARK = 12
    LOG = 13
    ACTIVITY_ENTRY = 14
    DYNAMIC_MUSIC = 15
    DYNAMIC_PIC = 16
    ENDBOOK = 17
    DYNAMIC_STORY = 18
    TOTEM = 19
    CHAOS = 20
    CHALLENGE_BOOK = 21
    ACHIEVEMENT = 22
    QUEST = 23
    FRAGMENT = 24
    DISASTER = 25


class enum__Torappu_Act13SideData_UnlockCondition(object):
    NONE = 0
    PRESTIGE = 1
    STAGE = 2


class enum__Torappu_PlayerBattleRank(object):
    ERR_ZERO = 0
    FAIL = 1
    PASS = 2
    COMPLETE = 3


class enum__Torappu_Act13SideData_ActZoneClass(object):
    NONE = 0
    NORMAL = 1
    HIGHLEVEL = 2
    SUB = 3


class enum__Torappu_Act17sideData_NodeType(object):
    LANDMARK = 0
    STORY = 1
    BATTLE = 2
    ENDING = 3
    TREASURE = 4
    EVENT = 5
    TECH = 6
    CHOICE = 7


class enum__Torappu_Act17sideData_TrackPointType(object):
    NONE = 0
    MAIN = 1
    SUB = 2


class enum__Torappu_Act17sideData_TreasureType(object):
    SMALL = 0
    SPECIAL = 1


class enum__Torappu_Act17sideData_ArchiveItemUnlockCondition(object):
    NONE = 0
    STAGE = 1
    NODE = 2


class enum__Torappu_Act17sideData_ArchiveItemStageUnlockParam(object):
    NONE = 0
    PLAYED = 1
    PASS = 2
    COMPLETE = 3


class enum__Torappu_Act17sideData_ChapterIconType(object):
    NORMAL = 0
    EX = 1
    HARD = 2


class enum__Torappu_ActivityMultiplayVerify2Data_Act2VMultiRoomStepType(object):
    NONE = 0
    STAGE_CHOOSE = 1
    ENTRANCE = 2
    CHAR_PICK = 3
    SYS_ALLOC = 4
    SQUAD_CHECK = 5


class enum__Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityType(object):
    NONE = 0
    HIGH = 1
    LOW = 2
    TEMPORARY = 3
    ALL = 4


class enum__Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapType(object):
    NORMAL = 0
    FOOTBALL = 1
    DEFENCE = 2


class enum__Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyType(object):
    TRAINING = 0
    ORDINARY = 1
    DIFFICULTY = 2


class enum__Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatSceneType(object):
    NONE = 0
    ROOM = 1
    PICK = 2


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_PlayerAvatarGroupType(object):
    NONE = 0
    ASSISTANT = 1
    DEFAULT = 2
    SPECIAL = 3
    ACTIVITY = 4


class enum__Torappu_ActivityInterlockData_InterlockStageType(object):
    NONE = 0
    NORMAL = 1
    INTERLOCK = 2
    FINAL = 3


class enum__Torappu_ActivityBossRushData_BossRushStageType(object):
    NONE = 0
    NORMAL = 1
    TEAM = 2
    EX = 3
    SP = 4


class enum__Torappu_OccPer(object):
    ALWAYS = 0
    ALMOST = 1
    USUAL = 2
    OFTEN = 3
    SOMETIMES = 4
    NEVER = 5
    DEFINITELY_BUFF = 6


class enum__Torappu_StageDropType(object):
    NONE = 0
    ONCE = 1
    NORMAL = 2
    SPECIAL = 3
    ADDITIONAL = 4
    APRETURN = 5
    DIAMOND_MATERIAL = 6
    FUNITURE_DROP = 7
    COMPLETE = 8
    CHARM_DROP = 9
    OVERRIDE_DROP = 10
    ITEM_RETURN = 11


class enum__Torappu_Act24SideData_MeldingItemRarityType(object):
    NONE = 0
    RARITY_1 = 1
    RARITY_2 = 2
    RARITY_3 = 3
    RARITY_4 = 4
    RARITY_5 = 5
    RARITY_6 = 6


class enum__Torappu_Act24SideData_MeldingGoodDisplayType(object):
    NONE = 0
    RARE_1 = 1
    RARE_2 = 2
    RARE_3 = 3


class enum__Torappu_Act24SideData_MeldingGoodGachaType(object):
    NONE = 0
    LIMITED = 1
    UNLIMITED = 2


class enum__Torappu_Act24SideData_MissionType(object):
    NONE = 0
    HUNTING_TASK = 1
    COLLECTION_TASK = 2
    EXPLORATION_TASK = 3


class enum__Torappu_Act25SideData_Act25SideArchiveItemType(object):
    PIC = 0
    STORY = 1
    BATTLE_PERFORMANCE = 2
    KEY = 3
    ENUM = 4


class enum__Torappu_Act25SideData_Act25SideArchiveItemUnlockType(object):
    MISSION = 0
    STAGE = 1
    BUFF = 2


class enum__Torappu_Act25SideData_Act25sideTechType(object):
    TECH_1 = 0
    TECH_2 = 1
    TECH_3 = 2
    TECH_4 = 3
    TECH_NUM = 4


class enum__Torappu_Act42D0Data_Act42D0AreaDifficulty(object):
    NONE = 0
    NORMAL = 1
    HARD = 2


class enum__Torappu_Act29SideData_Act29SideOrcheType(object):
    ORCHE_1 = 0
    ORCHE_2 = 1
    ORCHE_3 = 2
    ENUM = 3


class enum__Torappu_Act29SideData_Act29SideProductType(object):
    PRODUCT_TYPE_1 = 0
    PRODUCT_TYPE_2 = 1
    PRODUCT_TYPE_3 = 2
    PRODUCT_TYPE_4 = 3
    PRODUCT_TYPE_5 = 4
    ENUM = 5


class enum__Torappu_Act29SideData_Act29SideInvestType(object):
    MAJOR = 0
    RARE = 1
    NORMAL = 2


class enum__Torappu_Act35SideData_DialogueType(object):
    NONE = 0
    ENTRY = 1
    BONUS = 2
    BUY = 3
    PROCESS = 4


class enum__Torappu_Act35SideData_DialogueNameBgType(object):
    NONE = 0
    GREEN = 1
    BLUE = 2


class enum__Torappu_ActVecBreakParticleType(object):
    NONE = 0
    NORMAL = 1
    HARD = 2


class enum__Torappu_ActivityThemeType(object):
    NONE = 0
    ACTIVITY = 1
    CRISIS = 2
    MAINLINE = 3
    ROGUELIKE = 4
    CRISISV2 = 5
    SANDBOX_PERM = 6


class enum__Torappu_AppearanceStyle(object):
    MAIN_NORMAL = 0
    MAIN_PREDEFINED = 1
    SUB = 2
    TRAINING = 3
    HIGH_DIFFICULTY = 4
    MIST_OPS = 5
    SPECIAL_STORY = 6


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class enum__Torappu_Act4funStageAttributeType(object):
    POS = 0
    NEG = 1


class enum__Torappu_Act4funSuperChatType(object):
    ROLLED = 0
    RELATED = 1


class enum__Torappu_NpcStrategy(object):
    DEFAULT = 0
    CHOOSE_WIN = 1
    CHOOSE_ODD = 2
    FOLLOW_FEWER = 3
    FOLLOW_MORE = 4


class enum__Torappu_CartComponents_CartAccessoryType(object):
    NONE = 0
    ROOF = 1
    HEADSTOCK = 2
    TRUNK = 3
    CAR_OS = 4


class enum__Torappu_CartComponents_CartAccessoryPos(object):
    NONE = 0
    ROOF = 1
    HEADSTOCK = 2
    TRUNK_01 = 3
    TRUNK_02 = 4
    CAR_OS_01 = 5
    CAR_OS_02 = 6


class enum__Torappu_SiracusaData_ZoneUnlockType(object):
    NONE = 0
    STAGE_UNLOCK = 1
    TASK_UNLOCK = 2


class enum__Torappu_SiracusaData_CardGainType(object):
    NONE = 0
    STAGE_GAIN = 1
    TASK_GAIN = 2


class enum__Torappu_SiracusaData_TaskRingLogicType(object):
    NONE = 0
    LINEAR = 1
    AND = 2
    OR = 3


class enum__Torappu_SiracusaData_TaskType(object):
    NONE = 0
    BATTLE = 1
    AVG = 2


class enum__Torappu_SiracusaData_NavigationType(object):
    NONE = 0
    AVG = 1
    LEVEL = 2
    CHAR_CARD = 3


class enum__Torappu_FifthAnnivExploreValueType(object):
    TEAMVALUE_1 = 0
    TEAMVALUE_2 = 1
    TEAMVALUE_3 = 2


class enum__Torappu_TemplateMissionBigRewardType(object):
    NONE = 0
    ILLUST_CHAR_REWARD = 1
    CUSTOM = 2


class enum__Torappu_TemplateMissionTitleType(object):
    NONE = 0
    COMMON = 1
    CUSTOM = 2


class enum__Torappu_TemplateMissionCoinInfoType(object):
    NONE = 0
    COMMON = 1
    CUSTOM = 2


class clz_Torappu_ActivityTable_BasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_BasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_BasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_BasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_BasicData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_BasicData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_BasicData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def RewardEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def DisplayOnHome(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_BasicData
    def HasStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_BasicData
    def TemplateShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_BasicData
    def MedalGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_BasicData
    def UngroupedMedalIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityTable_BasicData
    def UngroupedMedalIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def UngroupedMedalIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_ActivityTable_BasicData
    def IsReplicate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_BasicData
    def NeedFixedSync(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_BasicData
    def TrapDomainId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_BasicData
    def RecType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_BasicData
    def IsPageEntry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_ActivityTable_BasicDataStart(builder):
    builder.StartObject(17)

def clz_Torappu_ActivityTable_BasicDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityTable_BasicDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ActivityTable_BasicDataAddDisplayType(builder, displayType):
    builder.PrependInt32Slot(2, displayType, 0)

def clz_Torappu_ActivityTable_BasicDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityTable_BasicDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(4, startTime, 0)

def clz_Torappu_ActivityTable_BasicDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(5, endTime, 0)

def clz_Torappu_ActivityTable_BasicDataAddRewardEndTime(builder, rewardEndTime):
    builder.PrependInt64Slot(6, rewardEndTime, 0)

def clz_Torappu_ActivityTable_BasicDataAddDisplayOnHome(builder, displayOnHome):
    builder.PrependBoolSlot(7, displayOnHome, 0)

def clz_Torappu_ActivityTable_BasicDataAddHasStage(builder, hasStage):
    builder.PrependBoolSlot(8, hasStage, 0)

def clz_Torappu_ActivityTable_BasicDataAddTemplateShopId(builder, templateShopId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(templateShopId), 0)

def clz_Torappu_ActivityTable_BasicDataAddMedalGroupId(builder, medalGroupId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(medalGroupId), 0)

def clz_Torappu_ActivityTable_BasicDataAddUngroupedMedalIds(builder, ungroupedMedalIds):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(ungroupedMedalIds), 0)

def clz_Torappu_ActivityTable_BasicDataStartUngroupedMedalIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_BasicDataAddIsReplicate(builder, isReplicate):
    builder.PrependBoolSlot(12, isReplicate, 0)

def clz_Torappu_ActivityTable_BasicDataAddNeedFixedSync(builder, needFixedSync):
    builder.PrependBoolSlot(13, needFixedSync, 0)

def clz_Torappu_ActivityTable_BasicDataAddTrapDomainId(builder, trapDomainId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(trapDomainId), 0)

def clz_Torappu_ActivityTable_BasicDataAddRecType(builder, recType):
    builder.PrependInt32Slot(15, recType, 0)

def clz_Torappu_ActivityTable_BasicDataAddIsPageEntry(builder, isPageEntry):
    builder.PrependBoolSlot(16, isPageEntry, 0)

def clz_Torappu_ActivityTable_BasicDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_BasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_BasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_BasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_BasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_BasicData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_BasicData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_BasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_BasicDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_BasicDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_BasicDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_BasicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_HomeActivityConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_HomeActivityConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_HomeActivityConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_HomeActivityConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_HomeActivityConfig
    def ActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_HomeActivityConfig
    def IsPopupAfterCheckin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_HomeActivityConfig
    def ShowTopBarMenu(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_HomeActivityConfig
    def ActTopBarColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_HomeActivityConfig
    def ActTopBarText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityTable_HomeActivityConfigStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityTable_HomeActivityConfigAddActId(builder, actId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actId), 0)

def clz_Torappu_ActivityTable_HomeActivityConfigAddIsPopupAfterCheckin(builder, isPopupAfterCheckin):
    builder.PrependBoolSlot(1, isPopupAfterCheckin, 0)

def clz_Torappu_ActivityTable_HomeActivityConfigAddShowTopBarMenu(builder, showTopBarMenu):
    builder.PrependBoolSlot(2, showTopBarMenu, 0)

def clz_Torappu_ActivityTable_HomeActivityConfigAddActTopBarColor(builder, actTopBarColor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(actTopBarColor), 0)

def clz_Torappu_ActivityTable_HomeActivityConfigAddActTopBarText(builder, actTopBarText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actTopBarText), 0)

def clz_Torappu_ActivityTable_HomeActivityConfigEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_HomeActivityConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_HomeActivityConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_HomeActivityConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_HomeActivityConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_HomeActivityConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_HomeActivityConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_HomeActivityConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_HomeActivityConfigStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_HomeActivityConfigAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_HomeActivityConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_HomeActivityConfigEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionDisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionDisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionDisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionDisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionDisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionDisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionDisplayRewards
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionDisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_MissionDisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_MissionDisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDisplayRewardsAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_MissionDisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def ItemBgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def PreMissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_MissionData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_MissionData
    def MissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def ToPage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def PeriodicalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_MissionData
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def FoldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def HaveSubMissionToUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_MissionDataStart(builder):
    builder.StartObject(18)

def clz_Torappu_MissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_MissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_MissionDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_MissionDataAddItemBgType(builder, itemBgType):
    builder.PrependInt32Slot(4, itemBgType, 0)

def clz_Torappu_MissionDataAddPreMissionIds(builder, preMissionIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionIds), 0)

def clz_Torappu_MissionDataStartPreMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_MissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_MissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_MissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_MissionDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_MissionDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_MissionDataAddToPage(builder, toPage):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(toPage), 0)

def clz_Torappu_MissionDataAddPeriodicalPoint(builder, periodicalPoint):
    builder.PrependInt32Slot(13, periodicalPoint, 0)

def clz_Torappu_MissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddBackImagePath(builder, backImagePath):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)

def clz_Torappu_MissionDataAddFoldId(builder, foldId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(foldId), 0)

def clz_Torappu_MissionDataAddHaveSubMissionToUnlock(builder, haveSubMissionToUnlock):
    builder.PrependBoolSlot(17, haveSubMissionToUnlock, 0)

def clz_Torappu_MissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionGroup
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def PreMissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Period(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_MissionGroup
    def PeriodAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MissionGroup
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionGroup
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionGroup
    def MissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionGroup
    def MissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def MissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_MissionGroup
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(9)

def clz_Torappu_MissionGroupAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionGroupAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MissionGroupAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_MissionGroupAddPreMissionGroup(builder, preMissionGroup):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionGroup), 0)

def clz_Torappu_MissionGroupAddPeriod(builder, period):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(period), 0)

def clz_Torappu_MissionGroupStartPeriodVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionGroupStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddMissionIds(builder, missionIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionIds), 0)

def clz_Torappu_MissionGroupStartMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddStartTs(builder, startTs):
    builder.PrependInt64Slot(7, startTs, 0)

def clz_Torappu_MissionGroupAddEndTs(builder, endTs):
    builder.PrependInt64Slot(8, endTs, 0)

def clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultZoneData
    def ZoneIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultZoneData
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultZoneData
    def ZoneDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultZoneData
    def ItemDropList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_DefaultZoneData
    def ItemDropListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultZoneData
    def ItemDropListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_DefaultZoneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_DefaultZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_DefaultZoneDataAddZoneIndex(builder, zoneIndex):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIndex), 0)

def clz_Torappu_DefaultZoneDataAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def clz_Torappu_DefaultZoneDataAddZoneDesc(builder, zoneDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDesc), 0)

def clz_Torappu_DefaultZoneDataAddItemDropList(builder, itemDropList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemDropList), 0)

def clz_Torappu_DefaultZoneDataStartItemDropListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultShopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultShopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultShopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultShopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultShopData
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultShopData
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultShopData
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultShopData
    def AvailCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultShopData
    def OverrideName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultShopData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_DefaultShopDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_DefaultShopDataAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_DefaultShopDataAddSlotId(builder, slotId):
    builder.PrependInt32Slot(1, slotId, 0)

def clz_Torappu_DefaultShopDataAddPrice(builder, price):
    builder.PrependInt32Slot(2, price, 0)

def clz_Torappu_DefaultShopDataAddAvailCount(builder, availCount):
    builder.PrependInt32Slot(3, availCount, 0)

def clz_Torappu_DefaultShopDataAddOverrideName(builder, overrideName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(overrideName), 0)

def clz_Torappu_DefaultShopDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_DefaultShopDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultFirstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultFirstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultFirstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultFirstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultFirstData
    def ZoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_DefaultZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultFirstData
    def ZoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultFirstData
    def ZoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_DefaultFirstData
    def ShopList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_DefaultShopData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultFirstData
    def ShopListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultFirstData
    def ShopListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_DefaultFirstDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_DefaultFirstDataAddZoneList(builder, zoneList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneList), 0)

def clz_Torappu_DefaultFirstDataStartZoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultFirstDataAddShopList(builder, shopList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shopList), 0)

def clz_Torappu_DefaultFirstDataStartShopListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultFirstDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_DefaultFirstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_DefaultFirstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_DefaultFirstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_DefaultFirstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_DefaultFirstData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_DefaultFirstData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultFirstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_DefaultFirstDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_DefaultFirstDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_DefaultFirstDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_DefaultFirstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_CheckInDailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_CheckInDailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_CheckInDailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def ItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def ItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def ItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def KeyItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def ShowItemOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def IsDynItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddItemList(builder, itemList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemList), 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoStartItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddOrder(builder, order):
    builder.PrependInt32Slot(1, order, 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddColor(builder, color):
    builder.PrependInt32Slot(2, color, 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddKeyItem(builder, keyItem):
    builder.PrependInt32Slot(3, keyItem, 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddShowItemOrder(builder, showItemOrder):
    builder.PrependInt32Slot(4, showItemOrder, 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddIsDynItem(builder, isDynItem):
    builder.PrependBoolSlot(5, isDynItem, 0)

def clz_Torappu_DefaultCheckInData_CheckInDailyInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData_CheckInDailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfoEnd(builder):
    return builder.EndObject()



class dict__string__long(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__long()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__long(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__long
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__long
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__long
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def dict__string__longStart(builder):
    builder.StartObject(2)

def dict__string__longAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__longAddValue(builder, value):
    builder.PrependInt64Slot(1, value, 0)

def dict__string__longEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_DynCheckInDailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def QuestionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def PreOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def OptionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def OptionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def OptionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def ShowDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def SpOrderIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def SpOrderDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def SpOrderCompleteDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoStart(builder):
    builder.StartObject(7)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddQuestionDesc(builder, questionDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(questionDesc), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddPreOption(builder, preOption):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(preOption), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddOptionList(builder, optionList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(optionList), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoStartOptionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddShowDay(builder, showDay):
    builder.PrependInt32Slot(3, showDay, 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddSpOrderIconId(builder, spOrderIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spOrderIconId), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddSpOrderDesc(builder, spOrderDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(spOrderDesc), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddSpOrderCompleteDesc(builder, spOrderCompleteDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(spOrderCompleteDesc), 0)

def clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_OptionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_OptionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_OptionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_OptionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_OptionInfo
    def OptionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_OptionInfo
    def ShowImageId1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_OptionInfo
    def ShowImageId2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_OptionInfo
    def OptionCompleteDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_OptionInfo
    def IsStart(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_DefaultCheckInData_OptionInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_DefaultCheckInData_OptionInfoAddOptionDesc(builder, optionDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(optionDesc), 0)

def clz_Torappu_DefaultCheckInData_OptionInfoAddShowImageId1(builder, showImageId1):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(showImageId1), 0)

def clz_Torappu_DefaultCheckInData_OptionInfoAddShowImageId2(builder, showImageId2):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(showImageId2), 0)

def clz_Torappu_DefaultCheckInData_OptionInfoAddOptionCompleteDesc(builder, optionCompleteDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionCompleteDesc), 0)

def clz_Torappu_DefaultCheckInData_OptionInfoAddIsStart(builder, isStart):
    builder.PrependBoolSlot(4, isStart, 0)

def clz_Torappu_DefaultCheckInData_OptionInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_DefaultCheckInData_OptionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_DefaultCheckInData_OptionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_DefaultCheckInData_OptionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_DefaultCheckInData_OptionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_DefaultCheckInData_OptionInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_DefaultCheckInData_OptionInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData_OptionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_DefaultCheckInData_OptionInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_DefaultCheckInData_OptionInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_DefaultCheckInData_OptionInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_DefaultCheckInData_OptionInfoEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_ItemBundle
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_ItemBundle
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_ItemBundle
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_ItemBundle
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_ItemBundleAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_ItemBundleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_ItemBundleStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_DynamicCheckInConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_DynamicCheckInConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_DynamicCheckInConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_DynamicCheckInConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_DynamicCheckInConsts
    def FirstQuestionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInConsts
    def FirstQuestionTipsDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInConsts
    def ExpirationDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInConsts
    def FirstQuestionConfirmDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsStart(builder):
    builder.StartObject(4)

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsAddFirstQuestionDesc(builder, firstQuestionDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firstQuestionDesc), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsAddFirstQuestionTipsDesc(builder, firstQuestionTipsDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstQuestionTipsDesc), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsAddExpirationDesc(builder, expirationDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(expirationDesc), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsAddFirstQuestionConfirmDesc(builder, firstQuestionConfirmDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(firstQuestionConfirmDesc), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_DynamicCheckInData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_DynamicCheckInData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_DynamicCheckInData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynCheckInDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_DefaultCheckInData_DynCheckInDailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynCheckInDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynCheckInDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynOptionDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_DefaultCheckInData_OptionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynOptionDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynOptionDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynItemDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynItemDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def DynItemDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData_DynamicCheckInConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_DynamicCheckInData
    def InitOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataAddDynCheckInDict(builder, dynCheckInDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dynCheckInDict), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataStartDynCheckInDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataAddDynOptionDict(builder, dynOptionDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dynOptionDict), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataStartDynOptionDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataAddDynItemDict(builder, dynItemDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynItemDict), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataStartDynItemDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataAddInitOption(builder, initOption):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(initOption), 0)

def clz_Torappu_DefaultCheckInData_DynamicCheckInDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def Blessing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def AbsolutData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def AdTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def RelativeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def ItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def ItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo
    def ItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddOrder(builder, order):
    builder.PrependInt32Slot(0, order, 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddBlessing(builder, blessing):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blessing), 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddAbsolutData(builder, absolutData):
    builder.PrependInt64Slot(2, absolutData, 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddAdTip(builder, adTip):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(adTip), 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddRelativeData(builder, relativeData):
    builder.PrependInt32Slot(4, relativeData, 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoAddItemList(builder, itemList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(itemList), 0)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoStartItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_DefaultCheckInData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DefaultCheckInData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DefaultCheckInData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DefaultCheckInData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DefaultCheckInData
    def CheckInList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_DefaultCheckInData_CheckInDailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData
    def CheckInListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData
    def CheckInListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_DefaultCheckInData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_DefaultCheckInData
    def DynCheckInData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData_DynamicCheckInData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData
    def ExtraCheckinList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_DefaultCheckInData_ExtraCheckinDailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_DefaultCheckInData
    def ExtraCheckinListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_DefaultCheckInData
    def ExtraCheckinListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_DefaultCheckInDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_DefaultCheckInDataAddCheckInList(builder, checkInList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(checkInList), 0)

def clz_Torappu_DefaultCheckInDataStartCheckInListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_DefaultCheckInDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInDataAddDynCheckInData(builder, dynCheckInData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynCheckInData), 0)

def clz_Torappu_DefaultCheckInDataAddExtraCheckinList(builder, extraCheckinList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extraCheckinList), 0)

def clz_Torappu_DefaultCheckInDataStartExtraCheckinListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_DefaultCheckInDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_DefaultCheckInData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_DefaultCheckInData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_DefaultCheckInData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_DefaultCheckInData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_DefaultCheckInData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_DefaultCheckInData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DefaultCheckInData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_DefaultCheckInDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_DefaultCheckInDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_DefaultCheckInDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_DefaultCheckInDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AllPlayerCheckinData_DailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AllPlayerCheckinData_DailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AllPlayerCheckinData_DailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def ItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def ItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def ItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def KeyItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AllPlayerCheckinData_DailyInfo
    def ShowItemOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_AllPlayerCheckinData_DailyInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_AllPlayerCheckinData_DailyInfoAddItemList(builder, itemList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemList), 0)

def clz_Torappu_AllPlayerCheckinData_DailyInfoStartItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinData_DailyInfoAddOrder(builder, order):
    builder.PrependInt32Slot(1, order, 0)

def clz_Torappu_AllPlayerCheckinData_DailyInfoAddKeyItem(builder, keyItem):
    builder.PrependBoolSlot(2, keyItem, 0)

def clz_Torappu_AllPlayerCheckinData_DailyInfoAddShowItemOrder(builder, showItemOrder):
    builder.PrependInt32Slot(3, showItemOrder, 0)

def clz_Torappu_AllPlayerCheckinData_DailyInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AllPlayerCheckinData_DailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_AllPlayerCheckinData_PublicBehaviour(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AllPlayerCheckinData_PublicBehaviour()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AllPlayerCheckinData_PublicBehaviour(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def AllBehaviorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def AllBehaviorDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def RequiringValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def RequireRepeatCompletion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def RewardReceivedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourStart(builder):
    builder.StartObject(8)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddAllBehaviorId(builder, allBehaviorId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(allBehaviorId), 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddDisplayOrder(builder, displayOrder):
    builder.PrependInt32Slot(2, displayOrder, 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddAllBehaviorDesc(builder, allBehaviorDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(allBehaviorDesc), 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddRequiringValue(builder, requiringValue):
    builder.PrependInt32Slot(4, requiringValue, 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddRequireRepeatCompletion(builder, requireRepeatCompletion):
    builder.PrependBoolSlot(5, requireRepeatCompletion, 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddRewardReceivedDesc(builder, rewardReceivedDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardReceivedDesc), 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinData_PublicBehaviourEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AllPlayerCheckinData_PublicBehaviour()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviourStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviourAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviourEnd(builder):
    return builder.EndObject()



class clz_Torappu_AllPlayerCheckinData_PersonalBehaviour(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AllPlayerCheckinData_PersonalBehaviour()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AllPlayerCheckinData_PersonalBehaviour(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def PersonalBehaviorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def DisplayOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def RequireRepeatCompletion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourStart(builder):
    builder.StartObject(5)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddPersonalBehaviorId(builder, personalBehaviorId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(personalBehaviorId), 0)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddDisplayOrder(builder, displayOrder):
    builder.PrependInt32Slot(2, displayOrder, 0)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddRequireRepeatCompletion(builder, requireRepeatCompletion):
    builder.PrependBoolSlot(3, requireRepeatCompletion, 0)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_AllPlayerCheckinData_PersonalBehaviourEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AllPlayerCheckinData_PersonalBehaviour()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviourStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviourAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviourEnd(builder):
    return builder.EndObject()



class clz_Torappu_AllPlayerCheckinData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AllPlayerCheckinData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AllPlayerCheckinData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AllPlayerCheckinData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AllPlayerCheckinData_ConstData
    def CharacterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AllPlayerCheckinData_ConstData
    def SkinName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_AllPlayerCheckinData_ConstDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_AllPlayerCheckinData_ConstDataAddCharacterName(builder, characterName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterName), 0)

def clz_Torappu_AllPlayerCheckinData_ConstDataAddSkinName(builder, skinName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(skinName), 0)

def clz_Torappu_AllPlayerCheckinData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AllPlayerCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AllPlayerCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AllPlayerCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AllPlayerCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AllPlayerCheckinData
    def CheckInList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_AllPlayerCheckinData_DailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData
    def CheckInListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData
    def CheckInListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_AllPlayerCheckinData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_AllPlayerCheckinData
    def PubBhvs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_AllPlayerCheckinData_PublicBehaviour()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData
    def PubBhvsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData
    def PubBhvsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_AllPlayerCheckinData
    def PersonalBhvs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_AllPlayerCheckinData_PersonalBehaviour()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AllPlayerCheckinData
    def PersonalBhvsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AllPlayerCheckinData
    def PersonalBhvsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_AllPlayerCheckinData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AllPlayerCheckinData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_AllPlayerCheckinDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_AllPlayerCheckinDataAddCheckInList(builder, checkInList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(checkInList), 0)

def clz_Torappu_AllPlayerCheckinDataStartCheckInListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_AllPlayerCheckinDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinDataAddPubBhvs(builder, pubBhvs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pubBhvs), 0)

def clz_Torappu_AllPlayerCheckinDataStartPubBhvsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinDataAddPersonalBhvs(builder, personalBhvs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(personalBhvs), 0)

def clz_Torappu_AllPlayerCheckinDataStartPersonalBhvsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AllPlayerCheckinDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_AllPlayerCheckinDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_AllPlayerCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_AllPlayerCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_AllPlayerCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_AllPlayerCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_AllPlayerCheckinData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_AllPlayerCheckinData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AllPlayerCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_AllPlayerCheckinDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_AllPlayerCheckinDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_AllPlayerCheckinDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_AllPlayerCheckinDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VersusCheckInData_DailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VersusCheckInData_DailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VersusCheckInData_DailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VersusCheckInData_DailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VersusCheckInData_DailyInfo
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData_DailyInfo
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData_DailyInfo
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_VersusCheckInData_DailyInfo
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_VersusCheckInData_DailyInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_VersusCheckInData_DailyInfoAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_VersusCheckInData_DailyInfoStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInData_DailyInfoAddOrder(builder, order):
    builder.PrependInt32Slot(1, order, 0)

def clz_Torappu_VersusCheckInData_DailyInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_VersusCheckInData_DailyInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_VersusCheckInData_DailyInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_VersusCheckInData_DailyInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_VersusCheckInData_DailyInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_VersusCheckInData_DailyInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_VersusCheckInData_DailyInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VersusCheckInData_DailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_VersusCheckInData_DailyInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_VersusCheckInData_DailyInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_VersusCheckInData_DailyInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_VersusCheckInData_DailyInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_VersusCheckInData_VoteData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VersusCheckInData_VoteData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VersusCheckInData_VoteData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VersusCheckInData_VoteData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VersusCheckInData_VoteData
    def PlSweetNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData_VoteData
    def PlSaltyNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData_VoteData
    def PlTaste(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_VersusCheckInData_VoteDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_VersusCheckInData_VoteDataAddPlSweetNum(builder, plSweetNum):
    builder.PrependInt32Slot(0, plSweetNum, 0)

def clz_Torappu_VersusCheckInData_VoteDataAddPlSaltyNum(builder, plSaltyNum):
    builder.PrependInt32Slot(1, plSaltyNum, 0)

def clz_Torappu_VersusCheckInData_VoteDataAddPlTaste(builder, plTaste):
    builder.PrependInt32Slot(2, plTaste, 0)

def clz_Torappu_VersusCheckInData_VoteDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VersusCheckInData_TasteInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VersusCheckInData_TasteInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VersusCheckInData_TasteInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VersusCheckInData_TasteInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VersusCheckInData_TasteInfoData
    def PlTaste(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData_TasteInfoData
    def TasteType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData_TasteInfoData
    def TasteText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_VersusCheckInData_TasteInfoDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_VersusCheckInData_TasteInfoDataAddPlTaste(builder, plTaste):
    builder.PrependInt32Slot(0, plTaste, 0)

def clz_Torappu_VersusCheckInData_TasteInfoDataAddTasteType(builder, tasteType):
    builder.PrependInt32Slot(1, tasteType, 0)

def clz_Torappu_VersusCheckInData_TasteInfoDataAddTasteText(builder, tasteText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tasteText), 0)

def clz_Torappu_VersusCheckInData_TasteInfoDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_VersusCheckInData_TasteInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_VersusCheckInData_TasteInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_VersusCheckInData_TasteInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_VersusCheckInData_TasteInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_VersusCheckInData_TasteInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_VersusCheckInData_TasteInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VersusCheckInData_TasteInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_VersusCheckInData_TasteInfoDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_VersusCheckInData_TasteInfoDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_VersusCheckInData_TasteInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_VersusCheckInData_TasteInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VersusCheckInData_TasteRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VersusCheckInData_TasteRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VersusCheckInData_TasteRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VersusCheckInData_TasteRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VersusCheckInData_TasteRewardData
    def TasteType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData_TasteRewardData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_VersusCheckInData_TasteRewardDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_VersusCheckInData_TasteRewardDataAddTasteType(builder, tasteType):
    builder.PrependInt32Slot(0, tasteType, 0)

def clz_Torappu_VersusCheckInData_TasteRewardDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_VersusCheckInData_TasteRewardDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VersusCheckInData_TasteRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VersusCheckInData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VersusCheckInData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VersusCheckInData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VersusCheckInData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VersusCheckInData
    def CheckInDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_VersusCheckInData_DailyInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData
    def CheckInDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData
    def CheckInDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_VersusCheckInData
    def VoteTasteList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_VersusCheckInData_VoteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData
    def VoteTasteListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData
    def VoteTasteListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_VersusCheckInData
    def TasteInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_VersusCheckInData_TasteInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData
    def TasteInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData
    def TasteInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_VersusCheckInData
    def TasteRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VersusCheckInData_TasteType__clz_Torappu_VersusCheckInData_TasteRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData
    def TasteRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData
    def TasteRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_VersusCheckInData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VersusCheckInData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VersusCheckInData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_VersusCheckInData
    def VersusTotalDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VersusCheckInData
    def RuleText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_VersusCheckInDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_VersusCheckInDataAddCheckInDict(builder, checkInDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(checkInDict), 0)

def clz_Torappu_VersusCheckInDataStartCheckInDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInDataAddVoteTasteList(builder, voteTasteList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voteTasteList), 0)

def clz_Torappu_VersusCheckInDataStartVoteTasteListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInDataAddTasteInfoDict(builder, tasteInfoDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tasteInfoDict), 0)

def clz_Torappu_VersusCheckInDataStartTasteInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInDataAddTasteRewardDict(builder, tasteRewardDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tasteRewardDict), 0)

def clz_Torappu_VersusCheckInDataStartTasteRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_VersusCheckInDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VersusCheckInDataAddVersusTotalDays(builder, versusTotalDays):
    builder.PrependInt32Slot(5, versusTotalDays, 0)

def clz_Torappu_VersusCheckInDataAddRuleText(builder, ruleText):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ruleText), 0)

def clz_Torappu_VersusCheckInDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_VersusCheckInData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_VersusCheckInData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_VersusCheckInData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_VersusCheckInData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_VersusCheckInData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_VersusCheckInData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VersusCheckInData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_VersusCheckInDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_VersusCheckInDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_VersusCheckInDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_VersusCheckInDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_CampBasicInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_CampBasicInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_CampBasicInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_CampBasicInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_CampBasicInfo
    def CampId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_CampBasicInfo
    def CampName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_CampBasicInfo
    def CampDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_CampBasicInfo
    def RewardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act3D0Data_CampBasicInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act3D0Data_CampBasicInfoAddCampId(builder, campId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(campId), 0)

def clz_Torappu_Act3D0Data_CampBasicInfoAddCampName(builder, campName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(campName), 0)

def clz_Torappu_Act3D0Data_CampBasicInfoAddCampDesc(builder, campDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(campDesc), 0)

def clz_Torappu_Act3D0Data_CampBasicInfoAddRewardDesc(builder, rewardDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardDesc), 0)

def clz_Torappu_Act3D0Data_CampBasicInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_CampBasicInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_CampBasicInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_CampBasicInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_CampBasicInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_CampBasicInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_CampBasicInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_CampBasicInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_CampBasicInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_CampBasicInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_CampBasicInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_CampBasicInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def ItemInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def GoodType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def PerCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def TotalCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddItemInfo(builder, itemInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemInfo), 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddGoodType(builder, goodType):
    builder.PrependInt32Slot(2, goodType, 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddPerCount(builder, perCount):
    builder.PrependInt32Slot(3, perCount, 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddTotalCount(builder, totalCount):
    builder.PrependInt32Slot(4, totalCount, 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddWeight(builder, weight):
    builder.PrependInt32Slot(5, weight, 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(7, orderId, 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_LimitedPoolDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_LimitedPoolDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_LimitedPoolDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def PoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def PoolItemInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act3D0Data_LimitedPoolDetailInfo_PoolItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def PoolItemInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def PoolItemInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfoAddPoolId(builder, poolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poolId), 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfoAddPoolItemInfo(builder, poolItemInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(poolItemInfo), 0)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfoStartPoolItemInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0Data_LimitedPoolDetailInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_LimitedPoolDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def GoodType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def ItemInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def PerCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddGoodType(builder, goodType):
    builder.PrependInt32Slot(1, goodType, 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddItemInfo(builder, itemInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemInfo), 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddPerCount(builder, perCount):
    builder.PrependInt32Slot(3, perCount, 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddWeight(builder, weight):
    builder.PrependInt32Slot(4, weight, 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(6, orderId, 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_InfinitePoolDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_InfinitePoolDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_InfinitePoolDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def PoolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def PoolItemInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act3D0Data_InfinitePoolDetailInfo_PoolItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def PoolItemInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def PoolItemInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfoAddPoolId(builder, poolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poolId), 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfoAddPoolItemInfo(builder, poolItemInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(poolItemInfo), 0)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfoStartPoolItemInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0Data_InfinitePoolDetailInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_InfinitePoolDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfoEnd(builder):
    return builder.EndObject()



class dict__string__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__intStart(builder):
    builder.StartObject(2)

def dict__string__intAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_InfinitePoolPercent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_InfinitePoolPercent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_InfinitePoolPercent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_InfinitePoolPercent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_InfinitePoolPercent
    def PercentDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_InfinitePoolPercent
    def PercentDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data_InfinitePoolPercent
    def PercentDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_Act3D0Data_InfinitePoolPercentStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act3D0Data_InfinitePoolPercentAddPercentDict(builder, percentDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(percentDict), 0)

def clz_Torappu_Act3D0Data_InfinitePoolPercentStartPercentDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0Data_InfinitePoolPercentEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_InfinitePoolPercent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercentStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercentAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercentAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercentEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ItemBundle
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ItemBundle
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ItemBundleAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ItemBundleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_CampItemMapInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_CampItemMapInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_CampItemMapInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_CampItemMapInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_CampItemMapInfo
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_CampItemMapInfo
    def ItemDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_CampItemMapInfo
    def ItemDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data_CampItemMapInfo
    def ItemDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act3D0Data_CampItemMapInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act3D0Data_CampItemMapInfoAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_Act3D0Data_CampItemMapInfoAddItemDict(builder, itemDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemDict), 0)

def clz_Torappu_Act3D0Data_CampItemMapInfoStartItemDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0Data_CampItemMapInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_CampItemMapInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_CampItemMapInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_CampItemMapInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_CampItemMapInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_CampItemMapInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_CampItemMapInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_ClueInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_ClueInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_ClueInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_ClueInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_ClueInfo
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_ClueInfo
    def CampId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_ClueInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_ClueInfo
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act3D0Data_ClueInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act3D0Data_ClueInfoAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act3D0Data_ClueInfoAddCampId(builder, campId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(campId), 0)

def clz_Torappu_Act3D0Data_ClueInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(2, orderId, 0)

def clz_Torappu_Act3D0Data_ClueInfoAddImageId(builder, imageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imageId), 0)

def clz_Torappu_Act3D0Data_ClueInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_ClueInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_ClueInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_ClueInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_ClueInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_ClueInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_ClueInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_ClueInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_ClueInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_ClueInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_ClueInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_ClueInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_MileStoneInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_MileStoneInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_MileStoneInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_MileStoneInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def MileStoneType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def NormalItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def SpecialItemDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def SpecialItemDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def SpecialItemDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act3D0Data_MileStoneInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act3D0Data_MileStoneInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act3D0Data_MileStoneInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act3D0Data_MileStoneInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_Act3D0Data_MileStoneInfoAddMileStoneType(builder, mileStoneType):
    builder.PrependInt32Slot(2, mileStoneType, 0)

def clz_Torappu_Act3D0Data_MileStoneInfoAddNormalItem(builder, normalItem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(normalItem), 0)

def clz_Torappu_Act3D0Data_MileStoneInfoAddSpecialItemDict(builder, specialItemDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(specialItemDict), 0)

def clz_Torappu_Act3D0Data_MileStoneInfoStartSpecialItemDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0Data_MileStoneInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(5, tokenNum, 0)

def clz_Torappu_Act3D0Data_MileStoneInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_GachaBoxInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_GachaBoxInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_GachaBoxInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def GachaBoxId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def BoxType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def KeyGoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def TokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def TokenNumOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def UnlockImg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_GachaBoxInfo
    def NextGachaBoxInfoId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act3D0Data_GachaBoxInfoStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddGachaBoxId(builder, gachaBoxId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gachaBoxId), 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddBoxType(builder, boxType):
    builder.PrependInt32Slot(1, boxType, 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddKeyGoodId(builder, keyGoodId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(keyGoodId), 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddTokenId(builder, tokenId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenId), 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddTokenNumOnce(builder, tokenNumOnce):
    builder.PrependInt32Slot(4, tokenNumOnce, 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddUnlockImg(builder, unlockImg):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockImg), 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoAddNextGachaBoxInfoId(builder, nextGachaBoxInfoId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nextGachaBoxInfoId), 0)

def clz_Torappu_Act3D0Data_GachaBoxInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_CampInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_CampInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_CampInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_CampInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_CampInfo
    def CampId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_CampInfo
    def CampChineseName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act3D0Data_CampInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act3D0Data_CampInfoAddCampId(builder, campId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(campId), 0)

def clz_Torappu_Act3D0Data_CampInfoAddCampChineseName(builder, campChineseName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(campChineseName), 0)

def clz_Torappu_Act3D0Data_CampInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_CampInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_CampInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_CampInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_CampInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_CampInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_CampInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_CampInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_CampInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_CampInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_CampInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_CampInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data_ZoneDescInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data_ZoneDescInfo
    def LockedText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act3D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act3D0Data_ZoneDescInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act3D0Data_ZoneDescInfoAddLockedText(builder, lockedText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lockedText), 0)

def clz_Torappu_Act3D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0Data_ZoneDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0Data_ZoneDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_CommonFavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CommonFavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CommonFavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CommonFavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CommonFavorUpInfo
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CommonFavorUpInfo
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CommonFavorUpInfo
    def DisplayEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CommonFavorUpInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_CommonFavorUpInfoAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_CommonFavorUpInfoAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(1, displayStartTime, 0)

def clz_Torappu_CommonFavorUpInfoAddDisplayEndTime(builder, displayEndTime):
    builder.PrependInt64Slot(2, displayEndTime, 0)

def clz_Torappu_CommonFavorUpInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CommonFavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CommonFavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CommonFavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CommonFavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CommonFavorUpInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CommonFavorUpInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CommonFavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CommonFavorUpInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CommonFavorUpInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CommonFavorUpInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CommonFavorUpInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act3D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act3D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act3D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act3D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act3D0Data
    def CampBasicInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_CampBasicInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def CampBasicInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def CampBasicInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act3D0Data
    def LimitedPoolList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_LimitedPoolDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def LimitedPoolListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def LimitedPoolListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act3D0Data
    def InfinitePoolList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_InfinitePoolDetailInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def InfinitePoolListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def InfinitePoolListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act3D0Data
    def InfinitePercent(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_InfinitePoolPercent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def InfinitePercentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def InfinitePercentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act3D0Data
    def CampItemMapInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_CampItemMapInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def CampItemMapInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def CampItemMapInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act3D0Data
    def ClueInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_ClueInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def ClueInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def ClueInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act3D0Data
    def MileStoneInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act3D0Data_MileStoneInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def MileStoneInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def MileStoneInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act3D0Data
    def MileStoneTokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data
    def CoinTokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data
    def EtTokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act3D0Data
    def GachaBoxInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act3D0Data_GachaBoxInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def GachaBoxInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def GachaBoxInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act3D0Data
    def CampInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_CampInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def CampInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def CampInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act3D0Data
    def ZoneDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def ZoneDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def ZoneDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_Act3D0Data
    def FavorUpList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CommonFavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act3D0Data
    def FavorUpListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act3D0Data
    def FavorUpListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_Act3D0DataStart(builder):
    builder.StartObject(14)

def clz_Torappu_Act3D0DataAddCampBasicInfo(builder, campBasicInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(campBasicInfo), 0)

def clz_Torappu_Act3D0DataStartCampBasicInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddLimitedPoolList(builder, limitedPoolList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limitedPoolList), 0)

def clz_Torappu_Act3D0DataStartLimitedPoolListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddInfinitePoolList(builder, infinitePoolList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(infinitePoolList), 0)

def clz_Torappu_Act3D0DataStartInfinitePoolListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddInfinitePercent(builder, infinitePercent):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(infinitePercent), 0)

def clz_Torappu_Act3D0DataStartInfinitePercentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddCampItemMapInfo(builder, campItemMapInfo):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(campItemMapInfo), 0)

def clz_Torappu_Act3D0DataStartCampItemMapInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddClueInfo(builder, clueInfo):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(clueInfo), 0)

def clz_Torappu_Act3D0DataStartClueInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddMileStoneInfo(builder, mileStoneInfo):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneInfo), 0)

def clz_Torappu_Act3D0DataStartMileStoneInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddMileStoneTokenId(builder, mileStoneTokenId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneTokenId), 0)

def clz_Torappu_Act3D0DataAddCoinTokenId(builder, coinTokenId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(coinTokenId), 0)

def clz_Torappu_Act3D0DataAddEtTokenId(builder, etTokenId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(etTokenId), 0)

def clz_Torappu_Act3D0DataAddGachaBoxInfo(builder, gachaBoxInfo):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(gachaBoxInfo), 0)

def clz_Torappu_Act3D0DataStartGachaBoxInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddCampInfo(builder, campInfo):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(campInfo), 0)

def clz_Torappu_Act3D0DataStartCampInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddZoneDesc(builder, zoneDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDesc), 0)

def clz_Torappu_Act3D0DataStartZoneDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataAddFavorUpList(builder, favorUpList):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpList), 0)

def clz_Torappu_Act3D0DataStartFavorUpListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act3D0DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act3D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act3D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act3D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act3D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act3D0Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act3D0Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act3D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act3D0DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act3D0DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act3D0DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act3D0DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4D0Data_MileStoneItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4D0Data_MileStoneItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4D0Data_MileStoneItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4D0Data_MileStoneItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4D0Data_MileStoneItemInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_MileStoneItemInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4D0Data_MileStoneItemInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4D0Data_MileStoneItemInfo
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act4D0Data_MileStoneItemInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act4D0Data_MileStoneItemInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act4D0Data_MileStoneItemInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_Act4D0Data_MileStoneItemInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_Act4D0Data_MileStoneItemInfoAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_Act4D0Data_MileStoneItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4D0Data_MileStoneStoryInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4D0Data_MileStoneStoryInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4D0Data_MileStoneStoryInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def StoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_MileStoneStoryInfo
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4D0Data_MileStoneStoryInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoAddStoryKey(builder, storyKey):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyKey), 0)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_Act4D0Data_MileStoneStoryInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4D0Data_StoryInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4D0Data_StoryInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4D0Data_StoryInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4D0Data_StoryInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4D0Data_StoryInfo
    def StoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StoryInfo
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StoryInfo
    def StorySort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StoryInfo
    def StoryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StoryInfo
    def LockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StoryInfo
    def StoryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4D0Data_StoryInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act4D0Data_StoryInfoAddStoryKey(builder, storyKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyKey), 0)

def clz_Torappu_Act4D0Data_StoryInfoAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_Act4D0Data_StoryInfoAddStorySort(builder, storySort):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storySort), 0)

def clz_Torappu_Act4D0Data_StoryInfoAddStoryName(builder, storyName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyName), 0)

def clz_Torappu_Act4D0Data_StoryInfoAddLockDesc(builder, lockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lockDesc), 0)

def clz_Torappu_Act4D0Data_StoryInfoAddStoryDesc(builder, storyDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(storyDesc), 0)

def clz_Torappu_Act4D0Data_StoryInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4D0Data_StageJumpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4D0Data_StageJumpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4D0Data_StageJumpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4D0Data_StageJumpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4D0Data_StageJumpInfo
    def StageKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StageJumpInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StageJumpInfo
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StageJumpInfo
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data_StageJumpInfo
    def LockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4D0Data_StageJumpInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4D0Data_StageJumpInfoAddStageKey(builder, stageKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageKey), 0)

def clz_Torappu_Act4D0Data_StageJumpInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act4D0Data_StageJumpInfoAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act4D0Data_StageJumpInfoAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_Act4D0Data_StageJumpInfoAddLockDesc(builder, lockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lockDesc), 0)

def clz_Torappu_Act4D0Data_StageJumpInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4D0Data
    def MileStoneItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4D0Data_MileStoneItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def MileStoneItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def MileStoneItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act4D0Data
    def MileStoneStoryList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4D0Data_MileStoneStoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def MileStoneStoryListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def MileStoneStoryListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act4D0Data
    def StoryInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4D0Data_StoryInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def StoryInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def StoryInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act4D0Data
    def StageInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4D0Data_StageJumpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def StageInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def StageInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act4D0Data
    def TokenItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def CharStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4D0Data
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4D0Data
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act4D0Data
    def ExtraDropZones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4D0Data
    def ExtraDropZonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4D0Data
    def ExtraDropZonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_Act4D0DataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act4D0DataAddMileStoneItemList(builder, mileStoneItemList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneItemList), 0)

def clz_Torappu_Act4D0DataStartMileStoneItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataAddMileStoneStoryList(builder, mileStoneStoryList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneStoryList), 0)

def clz_Torappu_Act4D0DataStartMileStoneStoryListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataAddStoryInfoList(builder, storyInfoList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyInfoList), 0)

def clz_Torappu_Act4D0DataStartStoryInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataAddStageInfo(builder, stageInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageInfo), 0)

def clz_Torappu_Act4D0DataStartStageInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataAddTokenItem(builder, tokenItem):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tokenItem), 0)

def clz_Torappu_Act4D0DataAddCharStoneId(builder, charStoneId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(charStoneId), 0)

def clz_Torappu_Act4D0DataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_Act4D0DataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataAddExtraDropZones(builder, extraDropZones):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(extraDropZones), 0)

def clz_Torappu_Act4D0DataStartExtraDropZonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4D0DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4D0Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4D0Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4D0DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4D0DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4D0DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4D0DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MileStoneInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MileStoneInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MileStoneInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MileStoneInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MileStoneInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MileStoneInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MileStoneInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MileStoneInfo
    def MileStoneType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MileStoneInfo
    def NormalItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MileStoneInfo
    def IsBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MileStoneInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_MileStoneInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_MileStoneInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_MileStoneInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_MileStoneInfoAddMileStoneType(builder, mileStoneType):
    builder.PrependInt32Slot(3, mileStoneType, 0)

def clz_Torappu_MileStoneInfoAddNormalItem(builder, normalItem):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(normalItem), 0)

def clz_Torappu_MileStoneInfoAddIsBonus(builder, isBonus):
    builder.PrependInt32Slot(5, isBonus, 0)

def clz_Torappu_MileStoneInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D0Data_ZoneDescInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D0Data_ZoneDescInfo
    def LockedText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act5D0Data_ZoneDescInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act5D0Data_ZoneDescInfoAddLockedText(builder, lockedText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lockedText), 0)

def clz_Torappu_Act5D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5D0Data_ZoneDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5D0Data_ZoneDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D0Data_MissionExtraInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D0Data_MissionExtraInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D0Data_MissionExtraInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D0Data_MissionExtraInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D0Data_MissionExtraInfo
    def DifficultLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D0Data_MissionExtraInfo
    def LevelDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D0Data_MissionExtraInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act5D0Data_MissionExtraInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act5D0Data_MissionExtraInfoAddDifficultLevel(builder, difficultLevel):
    builder.PrependInt32Slot(0, difficultLevel, 0)

def clz_Torappu_Act5D0Data_MissionExtraInfoAddLevelDesc(builder, levelDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelDesc), 0)

def clz_Torappu_Act5D0Data_MissionExtraInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act5D0Data_MissionExtraInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5D0Data_MissionExtraInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D0Data_MissionExtraInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5D0Data_MissionExtraInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5D0Data_MissionExtraInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5D0Data_MissionExtraInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5D0Data_MissionExtraInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D0Data
    def MileStoneInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MileStoneInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D0Data
    def MileStoneInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D0Data
    def MileStoneInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act5D0Data
    def MileStoneTokenId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D0Data
    def ZoneDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D0Data
    def ZoneDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D0Data
    def ZoneDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act5D0Data
    def MissionExtraList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5D0Data_MissionExtraInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D0Data
    def MissionExtraListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D0Data
    def MissionExtraListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act5D0Data
    def SpReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5D0DataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act5D0DataAddMileStoneInfo(builder, mileStoneInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneInfo), 0)

def clz_Torappu_Act5D0DataStartMileStoneInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D0DataAddMileStoneTokenId(builder, mileStoneTokenId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneTokenId), 0)

def clz_Torappu_Act5D0DataAddZoneDesc(builder, zoneDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDesc), 0)

def clz_Torappu_Act5D0DataStartZoneDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D0DataAddMissionExtraList(builder, missionExtraList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionExtraList), 0)

def clz_Torappu_Act5D0DataStartMissionExtraListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D0DataAddSpReward(builder, spReward):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spReward), 0)

def clz_Torappu_Act5D0DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5D0Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5D0Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5D0DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5D0DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5D0DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5D0DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_RuneStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_RuneStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_RuneStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_RuneStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_RuneStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneStageData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5D1Data_RuneStageDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act5D1Data_RuneStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_Act5D1Data_RuneStageDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_Act5D1Data_RuneStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_RuneRecurrentStateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_RuneRecurrentStateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_RuneRecurrentStateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def RuneReId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def RuneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def RuneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def RuneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def IsAvail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act5D1Data_RuneRecurrentStateData
    def WarningPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddRuneReId(builder, runeReId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(runeReId), 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddSlotId(builder, slotId):
    builder.PrependInt32Slot(2, slotId, 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(3, startTime, 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(4, endTime, 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddRuneList(builder, runeList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(runeList), 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataStartRuneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddIsAvail(builder, isAvail):
    builder.PrependBoolSlot(6, isAvail, 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataAddWarningPoint(builder, warningPoint):
    builder.PrependInt32Slot(7, warningPoint, 0)

def clz_Torappu_Act5D1Data_RuneRecurrentStateDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_RuneUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_RuneUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_RuneUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_RuneUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def RuneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def PriceItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def RuneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def BgPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def RuneDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_RuneUnlockData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5D1Data_RuneUnlockDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddRuneId(builder, runeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(runeId), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddPriceItem(builder, priceItem):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(priceItem), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddRuneName(builder, runeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(runeName), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddBgPic(builder, bgPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bgPic), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddRuneDesc(builder, runeDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runeDesc), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(5, sortId, 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act5D1Data_RuneUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5D1Data_RuneUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_RuneReleaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_RuneReleaseData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_RuneReleaseData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_RuneReleaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_RuneReleaseData
    def RuneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneReleaseData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_RuneReleaseData
    def ReleaseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act5D1Data_RuneReleaseDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act5D1Data_RuneReleaseDataAddRuneId(builder, runeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(runeId), 0)

def clz_Torappu_Act5D1Data_RuneReleaseDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act5D1Data_RuneReleaseDataAddReleaseTime(builder, releaseTime):
    builder.PrependInt64Slot(2, releaseTime, 0)

def clz_Torappu_Act5D1Data_RuneReleaseDataEnd(builder):
    return builder.EndObject()



class dict__string__bool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__bool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__bool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__bool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__bool
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__bool
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def dict__string__boolStart(builder):
    builder.StartObject(2)

def dict__string__boolAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__boolAddValue(builder, value):
    builder.PrependBoolSlot(1, value, 0)

def dict__string__boolEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_ShopGood(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_ShopGood()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_ShopGood(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_ShopGood
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_ShopGood
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_ShopGood
    def SlotId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ShopGood
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ShopGood
    def AvailCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ShopGood
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data_ShopGood
    def ProgressGoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_ShopGood
    def GoodType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ShopGood
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5D1Data_ShopGoodStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act5D1Data_ShopGoodAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_Act5D1Data_ShopGoodAddSlotId(builder, slotId):
    builder.PrependInt32Slot(1, slotId, 0)

def clz_Torappu_Act5D1Data_ShopGoodAddPrice(builder, price):
    builder.PrependInt32Slot(2, price, 0)

def clz_Torappu_Act5D1Data_ShopGoodAddAvailCount(builder, availCount):
    builder.PrependInt32Slot(3, availCount, 0)

def clz_Torappu_Act5D1Data_ShopGoodAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_Act5D1Data_ShopGoodAddProgressGoodId(builder, progressGoodId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(progressGoodId), 0)

def clz_Torappu_Act5D1Data_ShopGoodAddGoodType(builder, goodType):
    builder.PrependInt32Slot(6, goodType, 0)

def clz_Torappu_Act5D1Data_ShopGoodAddRarity(builder, rarity):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rarity), 0)

def clz_Torappu_Act5D1Data_ShopGoodEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5D1Data_ShopGood(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5D1Data_ShopGood()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5D1Data_ShopGood(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5D1Data_ShopGood
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5D1Data_ShopGood
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5D1Data_ShopGood
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D1Data_ShopGood()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5D1Data_ShopGoodStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5D1Data_ShopGoodAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5D1Data_ShopGoodAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5D1Data_ShopGoodEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_ProgessGoodItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_ProgessGoodItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_ProgessGoodItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_ProgessGoodItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_ProgessGoodItem
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ProgessGoodItem
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5D1Data_ProgessGoodItem
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data_ProgessGoodItem
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act5D1Data_ProgessGoodItemStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act5D1Data_ProgessGoodItemAddOrder(builder, order):
    builder.PrependInt32Slot(0, order, 0)

def clz_Torappu_Act5D1Data_ProgessGoodItemAddPrice(builder, price):
    builder.PrependInt32Slot(1, price, 0)

def clz_Torappu_Act5D1Data_ProgessGoodItemAddDisplayName(builder, displayName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)

def clz_Torappu_Act5D1Data_ProgessGoodItemAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_Act5D1Data_ProgessGoodItemEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5D1Data_ProgessGoodItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItemStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItemAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItemAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItemStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data_ShopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data_ShopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data_ShopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data_ShopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data_ShopData
    def ShopGoods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5D1Data_ShopGood()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data_ShopData
    def ShopGoodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data_ShopData
    def ShopGoodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act5D1Data_ShopData
    def ProgressGoods(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_Act5D1Data_ProgessGoodItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data_ShopData
    def ProgressGoodsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data_ShopData
    def ProgressGoodsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act5D1Data_ShopDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act5D1Data_ShopDataAddShopGoods(builder, shopGoods):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shopGoods), 0)

def clz_Torappu_Act5D1Data_ShopDataStartShopGoodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1Data_ShopDataAddProgressGoods(builder, progressGoods):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(progressGoods), 0)

def clz_Torappu_Act5D1Data_ShopDataStartProgressGoodsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1Data_ShopDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData_Selector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData_Selector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData_Selector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData_Selector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData_Selector
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def CharIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def MapTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_RuneData_SelectorStart(builder):
    builder.StartObject(14)

def clz_Torappu_RuneData_SelectorAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(0, professionMask, 0)

def clz_Torappu_RuneData_SelectorAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(1, buildableMask, 0)

def clz_Torappu_RuneData_SelectorAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(2, playerSideMask, 0)

def clz_Torappu_RuneData_SelectorAddCharIdFilter(builder, charIdFilter):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(charIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartCharIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdFilter(builder, enemyIdFilter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdExcludeFilter(builder, enemyIdExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyLevelTypeFilter(builder, enemyLevelTypeFilter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyLevelTypeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyLevelTypeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSkillIdFilter(builder, skillIdFilter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skillIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartSkillIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddTileKeyFilter(builder, tileKeyFilter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tileKeyFilter), 0)

def clz_Torappu_RuneData_SelectorStartTileKeyFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddGroupTagFilter(builder, groupTagFilter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groupTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartGroupTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagFilter(builder, filterTagFilter):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagExcludeFilter(builder, filterTagExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSubProfessionExcludeFilter(builder, subProfessionExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartSubProfessionExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddMapTagFilter(builder, mapTagFilter):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mapTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartMapTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneData
    def Selector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneData_Selector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RuneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RuneDataAddSelector(builder, selector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selector), 0)

def clz_Torappu_RuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_PackedRuneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Points(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RuneTable_PackedRuneData
    def MutexGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RuneTable_PackedRuneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddPoints(builder, points):
    builder.PrependFloat32Slot(1, points, 0.0)

def clz_Torappu_RuneTable_PackedRuneDataAddMutexGroupKey(builder, mutexGroupKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mutexGroupKey), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_PackedRuneDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_RuneStageExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_RuneStageExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_RuneStageExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_RuneStageExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_RuneStageExtraData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_RuneStageExtraData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_RuneStageExtraData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_RuneStageExtraData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RuneTable_RuneStageExtraDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RuneTable_RuneStageExtraDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_RuneTable_RuneStageExtraDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_RuneStageExtraDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_RuneStageExtraDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5D1Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5D1Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5D1Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5D1Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5D1Data
    def StageCommonData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5D1Data_RuneStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def StageCommonDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def StageCommonDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act5D1Data
    def RuneStageData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5D1Data_RuneRecurrentStateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def RuneStageDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def RuneStageDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act5D1Data
    def RuneUnlockDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_Act5D1Data_RuneUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def RuneUnlockDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def RuneUnlockDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act5D1Data
    def RuneReleaseData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5D1Data_RuneReleaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def RuneReleaseDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def RuneReleaseDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act5D1Data
    def MissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def MissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def MissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act5D1Data
    def MissionGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def MissionGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def MissionGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act5D1Data
    def UseBenefitMissionDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__bool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def UseBenefitMissionDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def UseBenefitMissionDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act5D1Data
    def ShopData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D1Data_ShopData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def CoinItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data
    def PtItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5D1Data
    def StageRune(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneTable_RuneStageExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5D1Data
    def StageRuneLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def StageRuneIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act5D1Data
    def ShowRuneMissionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act5D1Data
    def ShowRuneMissionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5D1Data
    def ShowRuneMissionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def clz_Torappu_Act5D1DataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act5D1DataAddStageCommonData(builder, stageCommonData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageCommonData), 0)

def clz_Torappu_Act5D1DataStartStageCommonDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddRuneStageData(builder, runeStageData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(runeStageData), 0)

def clz_Torappu_Act5D1DataStartRuneStageDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddRuneUnlockDict(builder, runeUnlockDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(runeUnlockDict), 0)

def clz_Torappu_Act5D1DataStartRuneUnlockDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddRuneReleaseData(builder, runeReleaseData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(runeReleaseData), 0)

def clz_Torappu_Act5D1DataStartRuneReleaseDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddMissionData(builder, missionData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionData), 0)

def clz_Torappu_Act5D1DataStartMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_Act5D1DataStartMissionGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddUseBenefitMissionDict(builder, useBenefitMissionDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(useBenefitMissionDict), 0)

def clz_Torappu_Act5D1DataStartUseBenefitMissionDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddShopData(builder, shopData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shopData), 0)

def clz_Torappu_Act5D1DataAddCoinItemId(builder, coinItemId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(coinItemId), 0)

def clz_Torappu_Act5D1DataAddPtItemId(builder, ptItemId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ptItemId), 0)

def clz_Torappu_Act5D1DataAddStageRune(builder, stageRune):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(stageRune), 0)

def clz_Torappu_Act5D1DataStartStageRuneVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataAddShowRuneMissionList(builder, showRuneMissionList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(showRuneMissionList), 0)

def clz_Torappu_Act5D1DataStartShowRuneMissionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5D1DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5D1Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5D1Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5D1Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5D1Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5D1Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5D1Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5D1Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5D1DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5D1DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5D1DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5D1DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityCollectionData_CollectionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityCollectionData_CollectionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityCollectionData_CollectionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def ItemCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def PointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def PointCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def IsBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def PngName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def PngSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def IsShow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def ShowInList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityCollectionData_CollectionInfo
    def ShowIconBg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_ActivityCollectionData_CollectionInfoStart(builder):
    builder.StartObject(12)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddItemCnt(builder, itemCnt):
    builder.PrependInt32Slot(3, itemCnt, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddPointId(builder, pointId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pointId), 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddPointCnt(builder, pointCnt):
    builder.PrependInt32Slot(5, pointCnt, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddIsBonus(builder, isBonus):
    builder.PrependBoolSlot(6, isBonus, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddPngName(builder, pngName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(pngName), 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddPngSort(builder, pngSort):
    builder.PrependInt32Slot(8, pngSort, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddIsShow(builder, isShow):
    builder.PrependBoolSlot(9, isShow, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddShowInList(builder, showInList):
    builder.PrependBoolSlot(10, showInList, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoAddShowIconBg(builder, showIconBg):
    builder.PrependBoolSlot(11, showIconBg, 0)

def clz_Torappu_ActivityCollectionData_CollectionInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityCollectionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityCollectionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityCollectionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityCollectionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityCollectionData
    def Collections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityCollectionData_CollectionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCollectionData
    def CollectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCollectionData
    def CollectionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityCollectionData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityCollectionData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityCollectionData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ActivityCollectionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityCollectionDataAddCollections(builder, collections):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(collections), 0)

def clz_Torappu_ActivityCollectionDataStartCollectionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCollectionDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_ActivityCollectionDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityCollectionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityCollectionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityCollectionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityCollectionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityCollectionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityCollectionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityCollectionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityCollectionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityCollectionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityCollectionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityCollectionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityCollectionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_ZoneDescInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ZoneDescInfo
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ZoneDescInfo
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act9D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act9D0Data_ZoneDescInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act9D0Data_ZoneDescInfoAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act9D0Data_ZoneDescInfoAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(2, displayStartTime, 0)

def clz_Torappu_Act9D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0Data_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0Data_ZoneDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0Data_ZoneDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0Data_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_FavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_FavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_FavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_FavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_FavorUpInfo
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_FavorUpInfo
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_FavorUpInfo
    def DisplayEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act9D0Data_FavorUpInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act9D0Data_FavorUpInfoAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_Act9D0Data_FavorUpInfoAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(1, displayStartTime, 0)

def clz_Torappu_Act9D0Data_FavorUpInfoAddDisplayEndTime(builder, displayEndTime):
    builder.PrependInt64Slot(2, displayEndTime, 0)

def clz_Torappu_Act9D0Data_FavorUpInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data_FavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data_FavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data_FavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data_FavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data_FavorUpInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data_FavorUpInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_FavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0Data_FavorUpInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0Data_FavorUpInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0Data_FavorUpInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0Data_FavorUpInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_SubMissionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_SubMissionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_SubMissionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_SubMissionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_SubMissionInfo
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_SubMissionInfo
    def MissionTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_SubMissionInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_SubMissionInfo
    def MissionIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act9D0Data_SubMissionInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act9D0Data_SubMissionInfoAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_Act9D0Data_SubMissionInfoAddMissionTitle(builder, missionTitle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(missionTitle), 0)

def clz_Torappu_Act9D0Data_SubMissionInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act9D0Data_SubMissionInfoAddMissionIndex(builder, missionIndex):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionIndex), 0)

def clz_Torappu_Act9D0Data_SubMissionInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data_SubMissionInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data_SubMissionInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data_SubMissionInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data_SubMissionInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data_SubMissionInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data_SubMissionInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_SubMissionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0Data_SubMissionInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0Data_SubMissionInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0Data_SubMissionInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0Data_SubMissionInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_ActivityNewsStyleInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_ActivityNewsStyleInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_ActivityNewsStyleInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_ActivityNewsStyleInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_ActivityNewsStyleInfo
    def TypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsStyleInfo
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsStyleInfo
    def TypeLogo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsStyleInfo
    def TypeMainLogo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoAddTypeId(builder, typeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(typeId), 0)

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoAddTypeLogo(builder, typeLogo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeLogo), 0)

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoAddTypeMainLogo(builder, typeMainLogo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(typeMainLogo), 0)

def clz_Torappu_Act9D0Data_ActivityNewsStyleInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_ActivityNewsLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_ActivityNewsLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_ActivityNewsLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_ActivityNewsLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_ActivityNewsLine
    def LineType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsLine
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act9D0Data_ActivityNewsLineStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act9D0Data_ActivityNewsLineAddLineType(builder, lineType):
    builder.PrependInt32Slot(0, lineType, 0)

def clz_Torappu_Act9D0Data_ActivityNewsLineAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_Act9D0Data_ActivityNewsLineEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_ActivityNewsInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_ActivityNewsInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_ActivityNewsInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def StyleInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_ActivityNewsStyleInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def PreposedStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def TitlePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsInfShow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsFrom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsParam1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsParam2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsParam3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsLines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act9D0Data_ActivityNewsLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsLinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data_ActivityNewsInfo
    def NewsLinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def clz_Torappu_Act9D0Data_ActivityNewsInfoStart(builder):
    builder.StartObject(13)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsId(builder, newsId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(newsId), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsSortId(builder, newsSortId):
    builder.PrependInt32Slot(1, newsSortId, 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddStyleInfo(builder, styleInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(styleInfo), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddPreposedStage(builder, preposedStage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(preposedStage), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddTitlePic(builder, titlePic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(titlePic), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsTitle(builder, newsTitle):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(newsTitle), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsInfShow(builder, newsInfShow):
    builder.PrependInt32Slot(6, newsInfShow, 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsFrom(builder, newsFrom):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(newsFrom), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsText(builder, newsText):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(newsText), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsParam1(builder, newsParam1):
    builder.PrependInt32Slot(9, newsParam1, 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsParam2(builder, newsParam2):
    builder.PrependInt32Slot(10, newsParam2, 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsParam3(builder, newsParam3):
    builder.PrependFloat32Slot(11, newsParam3, 0.0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoAddNewsLines(builder, newsLines):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(newsLines), 0)

def clz_Torappu_Act9D0Data_ActivityNewsInfoStartNewsLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0Data_ActivityNewsInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_ActivityNewsInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_ActivityNewsServerInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_ActivityNewsServerInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_ActivityNewsServerInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def NewsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def PreposedStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act9D0Data_ActivityNewsServerInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act9D0Data_ActivityNewsServerInfoAddNewsId(builder, newsId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(newsId), 0)

def clz_Torappu_Act9D0Data_ActivityNewsServerInfoAddPreposedStage(builder, preposedStage):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(preposedStage), 0)

def clz_Torappu_Act9D0Data_ActivityNewsServerInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_ActivityNewsServerInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data_Act9D0ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data_Act9D0ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data_Act9D0ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data_Act9D0ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data_Act9D0ConstData
    def CampaignEnemyCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act9D0Data_Act9D0ConstData
    def CampaignStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act9D0Data_Act9D0ConstDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act9D0Data_Act9D0ConstDataAddCampaignEnemyCnt(builder, campaignEnemyCnt):
    builder.PrependInt32Slot(0, campaignEnemyCnt, 0)

def clz_Torappu_Act9D0Data_Act9D0ConstDataAddCampaignStageId(builder, campaignStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(campaignStageId), 0)

def clz_Torappu_Act9D0Data_Act9D0ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act9D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act9D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act9D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act9D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act9D0Data
    def TokenItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act9D0Data
    def ZoneDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def ZoneDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def ZoneDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act9D0Data
    def FavorUpList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data_FavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def FavorUpListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def FavorUpListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act9D0Data
    def SubMissionInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data_SubMissionInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def SubMissionInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def SubMissionInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act9D0Data
    def HasSubMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act9D0Data
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act9D0Data
    def NewsInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data_ActivityNewsInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def NewsInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def NewsInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act9D0Data
    def NewsServerInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data_ActivityNewsServerInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def NewsServerInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def NewsServerInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act9D0Data
    def MiscHub(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act9D0Data
    def MiscHubLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act9D0Data
    def MiscHubIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act9D0Data
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data_Act9D0ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act9D0DataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Act9D0DataAddTokenItemId(builder, tokenItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tokenItemId), 0)

def clz_Torappu_Act9D0DataAddZoneDescList(builder, zoneDescList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDescList), 0)

def clz_Torappu_Act9D0DataStartZoneDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddFavorUpList(builder, favorUpList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpList), 0)

def clz_Torappu_Act9D0DataStartFavorUpListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddSubMissionInfo(builder, subMissionInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subMissionInfo), 0)

def clz_Torappu_Act9D0DataStartSubMissionInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddHasSubMission(builder, hasSubMission):
    builder.PrependBoolSlot(4, hasSubMission, 0)

def clz_Torappu_Act9D0DataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_Act9D0DataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddNewsInfoList(builder, newsInfoList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(newsInfoList), 0)

def clz_Torappu_Act9D0DataStartNewsInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddNewsServerInfoList(builder, newsServerInfoList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(newsServerInfoList), 0)

def clz_Torappu_Act9D0DataStartNewsServerInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddMiscHub(builder, miscHub):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(miscHub), 0)

def clz_Torappu_Act9D0DataStartMiscHubVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act9D0DataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act9D0DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act9D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act9D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act9D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act9D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act9D0Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act9D0Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act9D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act9D0DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act9D0DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act9D0DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act9D0DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_ConstData
    def RecycleRewardThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_ConstData
    def CharmRepoUnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ConstData
    def RecycleLowThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_ConstData
    def RecycleMediumThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_ConstData
    def RecycleHighThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_ConstData
    def AutoGetCharmId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ConstData
    def FogStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ConstData
    def FogUnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ConstData
    def FogUnlockTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_ConstData
    def FogUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act12SideData_ConstDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Act12SideData_ConstDataAddRecycleRewardThreshold(builder, recycleRewardThreshold):
    builder.PrependInt32Slot(0, recycleRewardThreshold, 0)

def clz_Torappu_Act12SideData_ConstDataAddCharmRepoUnlockStageId(builder, charmRepoUnlockStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charmRepoUnlockStageId), 0)

def clz_Torappu_Act12SideData_ConstDataAddRecycleLowThreshold(builder, recycleLowThreshold):
    builder.PrependInt32Slot(2, recycleLowThreshold, 0)

def clz_Torappu_Act12SideData_ConstDataAddRecycleMediumThreshold(builder, recycleMediumThreshold):
    builder.PrependInt32Slot(3, recycleMediumThreshold, 0)

def clz_Torappu_Act12SideData_ConstDataAddRecycleHighThreshold(builder, recycleHighThreshold):
    builder.PrependInt32Slot(4, recycleHighThreshold, 0)

def clz_Torappu_Act12SideData_ConstDataAddAutoGetCharmId(builder, autoGetCharmId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(autoGetCharmId), 0)

def clz_Torappu_Act12SideData_ConstDataAddFogStageId(builder, fogStageId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fogStageId), 0)

def clz_Torappu_Act12SideData_ConstDataAddFogUnlockStageId(builder, fogUnlockStageId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(fogUnlockStageId), 0)

def clz_Torappu_Act12SideData_ConstDataAddFogUnlockTs(builder, fogUnlockTs):
    builder.PrependInt64Slot(8, fogUnlockTs, 0)

def clz_Torappu_Act12SideData_ConstDataAddFogUnlockDesc(builder, fogUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(fogUnlockDesc), 0)

def clz_Torappu_Act12SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_ZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_ZoneAdditionData
    def ZoneClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act12SideData_ZoneAdditionDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act12SideData_ZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act12SideData_ZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act12SideData_ZoneAdditionDataAddZoneClass(builder, zoneClass):
    builder.PrependInt32Slot(2, zoneClass, 0)

def clz_Torappu_Act12SideData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_MissionDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_MissionDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_MissionDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_MissionDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_MissionDescInfo
    def ZoneClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_MissionDescInfo
    def SpecialMissionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_MissionDescInfo
    def NeedLock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act12SideData_MissionDescInfo
    def UnlockHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_MissionDescInfo
    def UnlockStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act12SideData_MissionDescInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act12SideData_MissionDescInfoAddZoneClass(builder, zoneClass):
    builder.PrependInt32Slot(0, zoneClass, 0)

def clz_Torappu_Act12SideData_MissionDescInfoAddSpecialMissionDesc(builder, specialMissionDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(specialMissionDesc), 0)

def clz_Torappu_Act12SideData_MissionDescInfoAddNeedLock(builder, needLock):
    builder.PrependBoolSlot(2, needLock, 0)

def clz_Torappu_Act12SideData_MissionDescInfoAddUnlockHint(builder, unlockHint):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockHint), 0)

def clz_Torappu_Act12SideData_MissionDescInfoAddUnlockStage(builder, unlockStage):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockStage), 0)

def clz_Torappu_Act12SideData_MissionDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act12SideData_MissionDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act12SideData_MissionDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act12SideData_MissionDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act12SideData_MissionDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act12SideData_MissionDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act12SideData_MissionDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act12SideData_MissionDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act12SideData_MissionDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act12SideData_MissionDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act12SideData_MissionDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act12SideData_MissionDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_MileStoneInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_MileStoneInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_MileStoneInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_MileStoneInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_MileStoneInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_MileStoneInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_MileStoneInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_MileStoneInfo
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData_MileStoneInfo
    def IsPrecious(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act12SideData_MileStoneInfo
    def MileStoneStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act12SideData_MileStoneInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act12SideData_MileStoneInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act12SideData_MileStoneInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_Act12SideData_MileStoneInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_Act12SideData_MileStoneInfoAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_Act12SideData_MileStoneInfoAddIsPrecious(builder, isPrecious):
    builder.PrependBoolSlot(4, isPrecious, 0)

def clz_Torappu_Act12SideData_MileStoneInfoAddMileStoneStage(builder, mileStoneStage):
    builder.PrependInt32Slot(5, mileStoneStage, 0)

def clz_Torappu_Act12SideData_MileStoneInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_PhotoInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_PhotoInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_PhotoInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_PhotoInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_PhotoInfo
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_PhotoInfo
    def PicName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_PhotoInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_PhotoInfo
    def PicDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_PhotoInfo
    def JumpStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act12SideData_PhotoInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act12SideData_PhotoInfoAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_Act12SideData_PhotoInfoAddPicName(builder, picName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(picName), 0)

def clz_Torappu_Act12SideData_PhotoInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act12SideData_PhotoInfoAddPicDesc(builder, picDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picDesc), 0)

def clz_Torappu_Act12SideData_PhotoInfoAddJumpStageId(builder, jumpStageId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(jumpStageId), 0)

def clz_Torappu_Act12SideData_PhotoInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act12SideData_PhotoInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act12SideData_PhotoInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act12SideData_PhotoInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act12SideData_PhotoInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act12SideData_PhotoInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act12SideData_PhotoInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act12SideData_PhotoInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act12SideData_PhotoInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act12SideData_PhotoInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act12SideData_PhotoInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act12SideData_PhotoInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData_RecycleDialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData_RecycleDialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData_RecycleDialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData_RecycleDialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData_RecycleDialogData
    def DialogType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act12SideData_RecycleDialogData
    def Dialog(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act12SideData_RecycleDialogData
    def DialogExpress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act12SideData_RecycleDialogDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act12SideData_RecycleDialogDataAddDialogType(builder, dialogType):
    builder.PrependInt32Slot(0, dialogType, 0)

def clz_Torappu_Act12SideData_RecycleDialogDataAddDialog(builder, dialog):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dialog), 0)

def clz_Torappu_Act12SideData_RecycleDialogDataAddDialogExpress(builder, dialogExpress):
    builder.PrependInt32Slot(2, dialogExpress, 0)

def clz_Torappu_Act12SideData_RecycleDialogDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act12SideData_RecycleDialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act12SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act12SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act12SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act12SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act12SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act12SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def ZoneAdditionDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act12SideData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def ZoneAdditionDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act12SideData
    def ZoneAdditionDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act12SideData
    def MissionDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act12SideData_MissionDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def MissionDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act12SideData
    def MissionDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act12SideData
    def MileStoneInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act12SideData_MileStoneInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def MileStoneInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act12SideData
    def MileStoneInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act12SideData
    def PhotoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act12SideData_PhotoInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def PhotoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act12SideData
    def PhotoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act12SideData
    def RecycleDialogDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_Act12SideData_RecycleDialogType__list_clz_Torappu_Act12SideData_RecycleDialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act12SideData
    def RecycleDialogDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act12SideData
    def RecycleDialogDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act12SideDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act12SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act12SideDataAddZoneAdditionDataList(builder, zoneAdditionDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataList), 0)

def clz_Torappu_Act12SideDataStartZoneAdditionDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act12SideDataAddMissionDescList(builder, missionDescList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(missionDescList), 0)

def clz_Torappu_Act12SideDataStartMissionDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act12SideDataAddMileStoneInfoList(builder, mileStoneInfoList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneInfoList), 0)

def clz_Torappu_Act12SideDataStartMileStoneInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act12SideDataAddPhotoList(builder, photoList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(photoList), 0)

def clz_Torappu_Act12SideDataStartPhotoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act12SideDataAddRecycleDialogDict(builder, recycleDialogDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(recycleDialogDict), 0)

def clz_Torappu_Act12SideDataStartRecycleDialogDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act12SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act12SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act12SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act12SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act12SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act12SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act12SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act12SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act12SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act12SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act12SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act12SideDataEnd(builder):
    return builder.EndObject()



class list_int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_int
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # list_int
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # list_int
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_int
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_intStart(builder):
    builder.StartObject(1)

def list_intAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_intStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_intEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_ConstData
    def PrestigeDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_ConstData
    def PrestigeDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def PrestigeDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act13SideData_ConstData
    def DailyRandomCount(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_ConstData
    def DailyRandomCountLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def DailyRandomCountIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act13SideData_ConstData
    def DailyWeightInitial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def DailyWeightComplete(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def AgendaRecover(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def AgendaMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def AgendaHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def MissionPoolMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def MissionBoardMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def ItemRandomList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_ConstData
    def ItemRandomListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_ConstData
    def ItemRandomListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act13SideData_ConstData
    def UnlockPrestigeCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_ConstData
    def HotSpotShowFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act13SideData_ConstDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act13SideData_ConstDataAddPrestigeDescList(builder, prestigeDescList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prestigeDescList), 0)

def clz_Torappu_Act13SideData_ConstDataStartPrestigeDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_ConstDataAddDailyRandomCount(builder, dailyRandomCount):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dailyRandomCount), 0)

def clz_Torappu_Act13SideData_ConstDataStartDailyRandomCountVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_ConstDataAddDailyWeightInitial(builder, dailyWeightInitial):
    builder.PrependInt32Slot(2, dailyWeightInitial, 0)

def clz_Torappu_Act13SideData_ConstDataAddDailyWeightComplete(builder, dailyWeightComplete):
    builder.PrependInt32Slot(3, dailyWeightComplete, 0)

def clz_Torappu_Act13SideData_ConstDataAddAgendaRecover(builder, agendaRecover):
    builder.PrependInt32Slot(4, agendaRecover, 0)

def clz_Torappu_Act13SideData_ConstDataAddAgendaMax(builder, agendaMax):
    builder.PrependInt32Slot(5, agendaMax, 0)

def clz_Torappu_Act13SideData_ConstDataAddAgendaHint(builder, agendaHint):
    builder.PrependInt32Slot(6, agendaHint, 0)

def clz_Torappu_Act13SideData_ConstDataAddMissionPoolMax(builder, missionPoolMax):
    builder.PrependInt32Slot(7, missionPoolMax, 0)

def clz_Torappu_Act13SideData_ConstDataAddMissionBoardMax(builder, missionBoardMax):
    builder.PrependInt32Slot(8, missionBoardMax, 0)

def clz_Torappu_Act13SideData_ConstDataAddItemRandomList(builder, itemRandomList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(itemRandomList), 0)

def clz_Torappu_Act13SideData_ConstDataStartItemRandomListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_ConstDataAddUnlockPrestigeCond(builder, unlockPrestigeCond):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unlockPrestigeCond), 0)

def clz_Torappu_Act13SideData_ConstDataAddHotSpotShowFlag(builder, hotSpotShowFlag):
    builder.PrependInt64Slot(11, hotSpotShowFlag, 0)

def clz_Torappu_Act13SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_PrestigeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_PrestigeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_PrestigeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_PrestigeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_PrestigeData
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_PrestigeData
    def Threshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_PrestigeData
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_PrestigeData
    def NewsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_PrestigeData
    def ArchiveCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_PrestigeData
    def AvgCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act13SideData_PrestigeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act13SideData_PrestigeDataAddRank(builder, rank):
    builder.PrependInt32Slot(0, rank, 0)

def clz_Torappu_Act13SideData_PrestigeDataAddThreshold(builder, threshold):
    builder.PrependInt32Slot(1, threshold, 0)

def clz_Torappu_Act13SideData_PrestigeDataAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_Act13SideData_PrestigeDataAddNewsCount(builder, newsCount):
    builder.PrependInt32Slot(3, newsCount, 0)

def clz_Torappu_Act13SideData_PrestigeDataAddArchiveCount(builder, archiveCount):
    builder.PrependInt32Slot(4, archiveCount, 0)

def clz_Torappu_Act13SideData_PrestigeDataAddAvgCount(builder, avgCount):
    builder.PrependInt32Slot(5, avgCount, 0)

def clz_Torappu_Act13SideData_PrestigeDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_ItemBundle
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_ItemBundle
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_ItemBundleAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_ItemBundleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_LongTermMissionGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_LongTermMissionGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_LongTermMissionGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def OrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def MissionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def MissionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_LongTermMissionGroupData
    def MissionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_Act13SideData_LongTermMissionGroupDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataAddGroupName(builder, groupName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataAddOrgId(builder, orgId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orgId), 0)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataAddMissionList(builder, missionList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionList), 0)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataStartMissionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_LongTermMissionGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_OrgSectionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_OrgSectionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_OrgSectionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_OrgSectionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_OrgSectionData
    def SectionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_OrgSectionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_OrgSectionData
    def GroupData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_LongTermMissionGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act13SideData_OrgSectionDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act13SideData_OrgSectionDataAddSectionName(builder, sectionName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sectionName), 0)

def clz_Torappu_Act13SideData_OrgSectionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act13SideData_OrgSectionDataAddGroupData(builder, groupData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupData), 0)

def clz_Torappu_Act13SideData_OrgSectionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_OrgData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_OrgData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_OrgData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_OrgData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_OrgData
    def OrgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_OrgData
    def OrgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_OrgData
    def OrgEnName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_OrgData
    def OpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_OrgData
    def PrincipalIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_OrgData
    def PrincipalIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_OrgData
    def PrincipalIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act13SideData_OrgData
    def PrestigeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act13SideData_PrestigeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_OrgData
    def PrestigeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_OrgData
    def PrestigeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act13SideData_OrgData
    def AgendaCount2PrestigeItemMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_OrgData
    def AgendaCount2PrestigeItemMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_OrgData
    def AgendaCount2PrestigeItemMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act13SideData_OrgData
    def OrgSectionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act13SideData_OrgSectionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_OrgData
    def OrgSectionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_OrgData
    def OrgSectionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act13SideData_OrgData
    def PrestigeItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act13SideData_OrgDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act13SideData_OrgDataAddOrgId(builder, orgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(orgId), 0)

def clz_Torappu_Act13SideData_OrgDataAddOrgName(builder, orgName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orgName), 0)

def clz_Torappu_Act13SideData_OrgDataAddOrgEnName(builder, orgEnName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orgEnName), 0)

def clz_Torappu_Act13SideData_OrgDataAddOpenTime(builder, openTime):
    builder.PrependInt64Slot(3, openTime, 0)

def clz_Torappu_Act13SideData_OrgDataAddPrincipalIdList(builder, principalIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(principalIdList), 0)

def clz_Torappu_Act13SideData_OrgDataStartPrincipalIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_OrgDataAddPrestigeList(builder, prestigeList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(prestigeList), 0)

def clz_Torappu_Act13SideData_OrgDataStartPrestigeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_OrgDataAddAgendaCount2PrestigeItemMap(builder, agendaCount2PrestigeItemMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(agendaCount2PrestigeItemMap), 0)

def clz_Torappu_Act13SideData_OrgDataStartAgendaCount2PrestigeItemMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_OrgDataAddOrgSectionList(builder, orgSectionList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(orgSectionList), 0)

def clz_Torappu_Act13SideData_OrgDataStartOrgSectionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_OrgDataAddPrestigeItem(builder, prestigeItem):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(prestigeItem), 0)

def clz_Torappu_Act13SideData_OrgDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_OrgData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_OrgData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_OrgData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_OrgData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_OrgData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_OrgData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_OrgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_OrgDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_OrgDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_OrgDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_OrgDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_PrincipalData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_PrincipalData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_PrincipalData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_PrincipalData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalEnName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_PrincipalData
    def AvgCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_PrincipalData
    def PrincipalDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act13SideData_PrincipalDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act13SideData_PrincipalDataAddPrincipalId(builder, principalId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(principalId), 0)

def clz_Torappu_Act13SideData_PrincipalDataAddPrincipalName(builder, principalName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(principalName), 0)

def clz_Torappu_Act13SideData_PrincipalDataAddPrincipalEnName(builder, principalEnName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(principalEnName), 0)

def clz_Torappu_Act13SideData_PrincipalDataAddAvgCharId(builder, avgCharId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(avgCharId), 0)

def clz_Torappu_Act13SideData_PrincipalDataAddPrincipalDescList(builder, principalDescList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(principalDescList), 0)

def clz_Torappu_Act13SideData_PrincipalDataStartPrincipalDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_PrincipalDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_PrincipalData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_PrincipalData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_PrincipalData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_PrincipalData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_PrincipalData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_PrincipalData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_PrincipalData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_PrincipalDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_PrincipalDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_PrincipalDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_PrincipalDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_LongTermMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_LongTermMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_LongTermMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_LongTermMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_LongTermMissionData
    def MissionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionData
    def PrincipalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionData
    def FinishedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_LongTermMissionData
    def SectionSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_LongTermMissionData
    def HaveStageBtn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act13SideData_LongTermMissionData
    def JumpStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act13SideData_LongTermMissionDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act13SideData_LongTermMissionDataAddMissionName(builder, missionName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionName), 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddPrincipalId(builder, principalId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(principalId), 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddFinishedDesc(builder, finishedDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(finishedDesc), 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddSectionSortId(builder, sectionSortId):
    builder.PrependInt32Slot(4, sectionSortId, 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddHaveStageBtn(builder, haveStageBtn):
    builder.PrependBoolSlot(5, haveStageBtn, 0)

def clz_Torappu_Act13SideData_LongTermMissionDataAddJumpStageId(builder, jumpStageId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(jumpStageId), 0)

def clz_Torappu_Act13SideData_LongTermMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_LongTermMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_LongTermMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_LongTermMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_LongTermMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_LongTermMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_LongTermMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_LongTermMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_LongTermMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_LongTermMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_LongTermMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_LongTermMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_DailyMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_DailyMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_DailyMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_DailyMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_DailyMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def MissionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_DailyMissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def OrgPool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_DailyMissionData
    def OrgPoolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def OrgPoolIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def RewardPool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act13SideData_DailyMissionData
    def RewardPoolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def RewardPoolIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act13SideData_DailyMissionData
    def JumpStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionData
    def AgendaCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act13SideData_DailyMissionDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act13SideData_DailyMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddMissionName(builder, missionName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionName), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_Act13SideData_DailyMissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_DailyMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_Act13SideData_DailyMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_DailyMissionDataAddOrgPool(builder, orgPool):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(orgPool), 0)

def clz_Torappu_Act13SideData_DailyMissionDataStartOrgPoolVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_DailyMissionDataAddRewardPool(builder, rewardPool):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardPool), 0)

def clz_Torappu_Act13SideData_DailyMissionDataStartRewardPoolVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_DailyMissionDataAddJumpStageId(builder, jumpStageId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(jumpStageId), 0)

def clz_Torappu_Act13SideData_DailyMissionDataAddAgendaCount(builder, agendaCount):
    builder.PrependInt32Slot(11, agendaCount, 0)

def clz_Torappu_Act13SideData_DailyMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_DailyMissionRewardGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_DailyMissionRewardGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_DailyMissionRewardGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act13SideData_DailyMissionRewardGroupDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act13SideData_DailyMissionRewardGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act13SideData_DailyMissionRewardGroupDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_Act13SideData_DailyMissionRewardGroupDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideData_DailyMissionRewardGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_DailyMissionRewardGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Param1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Param2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependInt32Slot(2, unlockCondition, 0)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddParam1(builder, param1):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(param1), 0)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddParam2(builder, param2):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(param2), 0)

def clz_Torappu_Act13SideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData
    def UnlockRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageDataAddUnlockRank(builder, unlockRank):
    builder.PrependInt32Slot(1, unlockRank, 0)

def clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityHiddenAreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityHiddenAreaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityHiddenAreaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def PreposedStage(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityTable_ActHiddenAreaPreposeStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def PreposedStageLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def PreposedStageIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def PreposedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddPreposedStage(builder, preposedStage):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(preposedStage), 0)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataStartPreposedStageVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddPreposedTime(builder, preposedTime):
    builder.PrependInt64Slot(3, preposedTime, 0)

def clz_Torappu_ActivityTable_ActivityHiddenAreaDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityHiddenAreaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData_ZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act13SideData_ZoneAdditionData
    def ZoneClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act13SideData_ZoneAdditionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act13SideData_ZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act13SideData_ZoneAdditionDataAddZoneClass(builder, zoneClass):
    builder.PrependInt32Slot(1, zoneClass, 0)

def clz_Torappu_Act13SideData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData_ZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData_ZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideData_ZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideData_ZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideData_ZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act13SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act13SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act13SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act13SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act13SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def OrgDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_OrgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def OrgDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def OrgDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act13SideData
    def PrincipalDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_PrincipalData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def PrincipalDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def PrincipalDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act13SideData
    def LongTermMissionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_LongTermMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def LongTermMissionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def LongTermMissionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act13SideData
    def DailyMissionDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act13SideData_DailyMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def DailyMissionDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def DailyMissionDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act13SideData
    def DailyRewardGroupDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_DailyMissionRewardGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def DailyRewardGroupDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def DailyRewardGroupDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act13SideData
    def ArchiveItemUnlockData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def ArchiveItemUnlockDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def ArchiveItemUnlockDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act13SideData
    def HiddenAreaData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_ActivityHiddenAreaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def HiddenAreaDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def HiddenAreaDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act13SideData
    def ZoneAddtionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act13SideData
    def ZoneAddtionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act13SideData
    def ZoneAddtionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act13SideDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act13SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act13SideDataAddOrgDataMap(builder, orgDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orgDataMap), 0)

def clz_Torappu_Act13SideDataStartOrgDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddPrincipalDataMap(builder, principalDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(principalDataMap), 0)

def clz_Torappu_Act13SideDataStartPrincipalDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddLongTermMissionDataMap(builder, longTermMissionDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(longTermMissionDataMap), 0)

def clz_Torappu_Act13SideDataStartLongTermMissionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddDailyMissionDataList(builder, dailyMissionDataList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dailyMissionDataList), 0)

def clz_Torappu_Act13SideDataStartDailyMissionDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddDailyRewardGroupDataMap(builder, dailyRewardGroupDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dailyRewardGroupDataMap), 0)

def clz_Torappu_Act13SideDataStartDailyRewardGroupDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddArchiveItemUnlockData(builder, archiveItemUnlockData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(archiveItemUnlockData), 0)

def clz_Torappu_Act13SideDataStartArchiveItemUnlockDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddHiddenAreaData(builder, hiddenAreaData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenAreaData), 0)

def clz_Torappu_Act13SideDataStartHiddenAreaDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataAddZoneAddtionDataMap(builder, zoneAddtionDataMap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAddtionDataMap), 0)

def clz_Torappu_Act13SideDataStartZoneAddtionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act13SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act13SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act13SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act13SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act13SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act13SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act13SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act13SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act13SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act13SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act13SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act13SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_PlaceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_PlaceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_PlaceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_PlaceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_PlaceData
    def PlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def PlaceDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def LockEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_PlaceData
    def VisibleParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_PlaceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_PlaceDataAddPlaceId(builder, placeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(placeId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddPlaceDesc(builder, placeDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(placeDesc), 0)

def clz_Torappu_Act17sideData_PlaceDataAddLockEventId(builder, lockEventId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lockEventId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_PlaceDataAddVisibleCondType(builder, visibleCondType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(visibleCondType), 0)

def clz_Torappu_Act17sideData_PlaceDataAddVisibleParams(builder, visibleParams):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(visibleParams), 0)

def clz_Torappu_Act17sideData_PlaceDataStartVisibleParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_PlaceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_PlaceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_PlaceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_PlaceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_PlaceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_PlaceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_PlaceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_PlaceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_PlaceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_PlaceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_NodeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_NodeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_NodeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_NodeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_NodeInfoData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def PlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def IsPointPlace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_NodeInfoData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def TrackPointType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_NodeInfoData
    def UnlockParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_NodeInfoDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_NodeInfoDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddPlaceId(builder, placeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(placeId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddIsPointPlace(builder, isPointPlace):
    builder.PrependBoolSlot(4, isPointPlace, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddTrackPointType(builder, trackPointType):
    builder.PrependInt32Slot(6, trackPointType, 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddUnlockCondType(builder, unlockCondType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondType), 0)

def clz_Torappu_Act17sideData_NodeInfoDataAddUnlockParams(builder, unlockParams):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParams), 0)

def clz_Torappu_Act17sideData_NodeInfoDataStartUnlockParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_NodeInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_NodeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_NodeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_NodeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_NodeInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_NodeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_NodeInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_LandmarkNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_LandmarkNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_LandmarkNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_LandmarkNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_LandmarkNodeData
    def LandmarkDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_LandmarkNodeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkId(builder, landmarkId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkId), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkName(builder, landmarkName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkName), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkPic(builder, landmarkPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkPic), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkSpecialPic(builder, landmarkSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkSpecialPic), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataAddLandmarkDesList(builder, landmarkDesList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkDesList), 0)

def clz_Torappu_Act17sideData_LandmarkNodeDataStartLandmarkDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_LandmarkNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_LandmarkNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_LandmarkNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_LandmarkNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_LandmarkNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_LandmarkNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_LandmarkNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_StoryNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_StoryNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_StoryNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_StoryNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_StoryNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_StoryNodeData
    def StoryDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_Act17sideData_StoryNodeDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act17sideData_StoryNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryKey(builder, storyKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyKey), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryName(builder, storyName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyName), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryPic(builder, storyPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(storyPic), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_StoryNodeDataAddStoryDesList(builder, storyDesList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(storyDesList), 0)

def clz_Torappu_Act17sideData_StoryNodeDataStartStoryDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_StoryNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_StoryNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_StoryNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_StoryNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_StoryNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_StoryNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_StoryNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_BattleNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_BattleNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_BattleNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_BattleNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_BattleNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_BattleNodeData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_BattleNodeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act17sideData_BattleNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_BattleNodeDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act17sideData_BattleNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_BattleNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_BattleNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_BattleNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_BattleNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_BattleNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_BattleNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TreasureNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TreasureNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TreasureNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TreasureNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TreasureNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasurePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act17sideData_TreasureNodeData
    def TreasureType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act17sideData_TreasureNodeDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act17sideData_TreasureNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureId(builder, treasureId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(treasureId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureName(builder, treasureName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(treasureName), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasurePic(builder, treasurePic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(treasurePic), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureSpecialPic(builder, treasureSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(treasureSpecialPic), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureDesList(builder, treasureDesList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(treasureDesList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartTreasureDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_Act17sideData_TreasureNodeDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TreasureNodeDataAddTreasureType(builder, treasureType):
    builder.PrependInt32Slot(10, treasureType, 0)

def clz_Torappu_Act17sideData_TreasureNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TreasureNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TreasureNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TreasureNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TreasureNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TreasureNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TreasureNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_EventNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_EventNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_EventNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_EventNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_EventNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventNodeData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_EventNodeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act17sideData_EventNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_EventNodeDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_EventNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_EventNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_EventNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_EventNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_EventNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_EventNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_EventNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_EventNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_EventNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechTreeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def EndEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def ConfirmDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TechNodeData
    def TechDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_TechNodeData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_TechNodeDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_TechNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechTreeName(builder, techTreeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeName), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechPic(builder, techPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(techPic), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechSpecialPic(builder, techSpecialPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(techSpecialPic), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddEndEventId(builder, endEventId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endEventId), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddConfirmDes(builder, confirmDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDes), 0)

def clz_Torappu_Act17sideData_TechNodeDataAddTechDesList(builder, techDesList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(techDesList), 0)

def clz_Torappu_Act17sideData_TechNodeDataStartTechDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TechNodeDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_Act17sideData_TechNodeDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_TechNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ChoiceNodeOptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ChoiceNodeOptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ChoiceNodeOptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def CanRepeat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def Des(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockCondType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeOptionData
    def UnlockParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddCanRepeat(builder, canRepeat):
    builder.PrependBoolSlot(0, canRepeat, 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddDes(builder, des):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(des), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockDes(builder, unlockDes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDes), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockCondType(builder, unlockCondType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondType), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataAddUnlockParams(builder, unlockParams):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParams), 0)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataStartUnlockParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeOptionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ChoiceNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ChoiceNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ChoiceNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ChoiceNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoicePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def IsDisposable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def CancelDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def ChoiceNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act17sideData_ChoiceNodeOptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_ChoiceNodeData
    def OptionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act17sideData_ChoiceNodeDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoicePic(builder, choicePic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(choicePic), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddIsDisposable(builder, isDisposable):
    builder.PrependBoolSlot(2, isDisposable, 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceSpecialPic(builder, choiceSpecialPic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(choiceSpecialPic), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceName(builder, choiceName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(choiceName), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceDesList(builder, choiceDesList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(choiceDesList), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataStartChoiceDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddCancelDes(builder, cancelDes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cancelDes), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddChoiceNum(builder, choiceNum):
    builder.PrependInt32Slot(7, choiceNum, 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataAddOptionList(builder, optionList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(optionList), 0)

def clz_Torappu_Act17sideData_ChoiceNodeDataStartOptionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_ChoiceNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_ChoiceNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_ChoiceNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_ChoiceNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_ChoiceNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ChoiceNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_ChoiceNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_EventData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventSpecialPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_EventData
    def EventDesList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act17sideData_EventData
    def EventDesListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData_EventData
    def EventDesListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act17sideData_EventDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_EventDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_Act17sideData_EventDataAddEventPic(builder, eventPic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventPic), 0)

def clz_Torappu_Act17sideData_EventDataAddEventSpecialPic(builder, eventSpecialPic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(eventSpecialPic), 0)

def clz_Torappu_Act17sideData_EventDataAddEventTitle(builder, eventTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(eventTitle), 0)

def clz_Torappu_Act17sideData_EventDataAddEventDesList(builder, eventDesList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(eventDesList), 0)

def clz_Torappu_Act17sideData_EventDataStartEventDesListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideData_EventDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_EventData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_EventData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_EventDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_EventDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_EventDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_EventDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def StageParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependInt32Slot(2, unlockCondition, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddStageParam(builder, stageParam):
    builder.PrependInt32Slot(4, stageParam, 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechTreeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechTreeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechTreeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechTreeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechTreeData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_TechTreeData
    def TechTreeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def DefaultBranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeData
    def LockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_TechTreeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_TechTreeDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act17sideData_TechTreeDataAddTechTreeName(builder, techTreeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeName), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddDefaultBranchId(builder, defaultBranchId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(defaultBranchId), 0)

def clz_Torappu_Act17sideData_TechTreeDataAddLockDes(builder, lockDes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lockDes), 0)

def clz_Torappu_Act17sideData_TechTreeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechTreeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechTreeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechTreeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechTreeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechTreeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechTreeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_TechTreeBranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_TechTreeBranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_TechTreeBranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_TechTreeBranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def TechTreeBranchDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_TechTreeBranchData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act17sideData_TechTreeBranchDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchId(builder, techTreeBranchId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchId), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeId(builder, techTreeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeId), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchName(builder, techTreeBranchName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchName), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchIcon(builder, techTreeBranchIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchIcon), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddTechTreeBranchDesc(builder, techTreeBranchDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchDesc), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act17sideData_TechTreeBranchDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_TechTreeBranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_TechTreeBranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_TechTreeBranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_TechTreeBranchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_TechTreeBranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_TechTreeBranchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_MainlineChapterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_MainlineChapterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_MainlineChapterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_MainlineChapterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def ChapterIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_MainlineChapterData
    def UnlockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineChapterData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_MainlineChapterDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterId(builder, chapterId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chapterId), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterDes(builder, chapterDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chapterDes), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddChapterIcon(builder, chapterIcon):
    builder.PrependInt32Slot(2, chapterIcon, 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddUnlockDes(builder, unlockDes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDes), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act17sideData_MainlineChapterDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_MainlineChapterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_MainlineChapterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_MainlineChapterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_MainlineChapterData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_MainlineChapterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineChapterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_MainlineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_MainlineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_MainlineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_MainlineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_MainlineData
    def MainlineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act17sideData_MainlineData
    def MissionSort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def MainlineDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_MainlineData
    def FocusNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_MainlineDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act17sideData_MainlineDataAddMainlineId(builder, mainlineId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act17sideData_MainlineDataAddMissionSort(builder, missionSort):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionSort), 0)

def clz_Torappu_Act17sideData_MainlineDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_MainlineDataAddMainlineDes(builder, mainlineDes):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineDes), 0)

def clz_Torappu_Act17sideData_MainlineDataAddFocusNodeId(builder, focusNodeId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(focusNodeId), 0)

def clz_Torappu_Act17sideData_MainlineDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData_MainlineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData_MainlineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData_MainlineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData_MainlineData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_MainlineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideData_MainlineDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideData_MainlineDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideData_MainlineDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ZoneData
    def UnlockPlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act17sideData_ZoneData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ZoneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act17sideData_ZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act17sideData_ZoneDataAddUnlockPlaceId(builder, unlockPlaceId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockPlaceId), 0)

def clz_Torappu_Act17sideData_ZoneDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act17sideData_ZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData_ConstData
    def TechTreeUnlockEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act17sideData_ConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act17sideData_ConstDataAddTechTreeUnlockEventId(builder, techTreeUnlockEventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeUnlockEventId), 0)

def clz_Torappu_Act17sideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act17sideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act17sideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act17sideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act17sideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act17sideData
    def PlaceDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_PlaceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def PlaceDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def PlaceDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act17sideData
    def NodeInfoDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_NodeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def NodeInfoDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def NodeInfoDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_LandmarkNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def LandmarkNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act17sideData
    def StoryNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_StoryNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def StoryNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def StoryNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act17sideData
    def BattleNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_BattleNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def BattleNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def BattleNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TreasureNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TreasureNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act17sideData
    def EventNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_EventNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def EventNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def EventNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_ChoiceNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ChoiceNodeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act17sideData
    def EventDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def EventDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def EventDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_ArchiveItemUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ArchiveItemUnlockDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechTreeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechTreeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechTreeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechTreeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_TechTreeBranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def TechTreeBranchDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_MainlineChapterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def MainlineChapterDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act17sideData
    def MainlineDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData_MainlineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def MainlineDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def MainlineDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_Act17sideData
    def ZoneDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act17sideData_ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act17sideData
    def ZoneDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act17sideData
    def ZoneDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_Act17sideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act17sideDataStart(builder):
    builder.StartObject(17)

def clz_Torappu_Act17sideDataAddPlaceDataMap(builder, placeDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(placeDataMap), 0)

def clz_Torappu_Act17sideDataStartPlaceDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddNodeInfoDataMap(builder, nodeInfoDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeInfoDataMap), 0)

def clz_Torappu_Act17sideDataStartNodeInfoDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddLandmarkNodeDataMap(builder, landmarkNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartLandmarkNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddStoryNodeDataMap(builder, storyNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartStoryNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddBattleNodeDataMap(builder, battleNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(battleNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartBattleNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTreasureNodeDataMap(builder, treasureNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(treasureNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartTreasureNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddEventNodeDataMap(builder, eventNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(eventNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartEventNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechNodeDataMap(builder, techNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(techNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartTechNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddChoiceNodeDataMap(builder, choiceNodeDataMap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(choiceNodeDataMap), 0)

def clz_Torappu_Act17sideDataStartChoiceNodeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddEventDataMap(builder, eventDataMap):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(eventDataMap), 0)

def clz_Torappu_Act17sideDataStartEventDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddArchiveItemUnlockDataMap(builder, archiveItemUnlockDataMap):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(archiveItemUnlockDataMap), 0)

def clz_Torappu_Act17sideDataStartArchiveItemUnlockDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechTreeDataMap(builder, techTreeDataMap):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeDataMap), 0)

def clz_Torappu_Act17sideDataStartTechTreeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddTechTreeBranchDataMap(builder, techTreeBranchDataMap):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(techTreeBranchDataMap), 0)

def clz_Torappu_Act17sideDataStartTechTreeBranchDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddMainlineChapterDataMap(builder, mainlineChapterDataMap):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineChapterDataMap), 0)

def clz_Torappu_Act17sideDataStartMainlineChapterDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddMainlineDataMap(builder, mainlineDataMap):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineDataMap), 0)

def clz_Torappu_Act17sideDataStartMainlineDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddZoneDataList(builder, zoneDataList):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDataList), 0)

def clz_Torappu_Act17sideDataStartZoneDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act17sideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act17sideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act17sideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act17sideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act17sideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act17sideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act17sideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act17sideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act17sideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act17sideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act17sideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act17sideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act17sideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act20SideData_ResidentCartData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act20SideData_ResidentCartData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act20SideData_ResidentCartData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act20SideData_ResidentCartData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act20SideData_ResidentCartData
    def ResidentPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act20SideData_ResidentCartDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act20SideData_ResidentCartDataAddResidentPic(builder, residentPic):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(residentPic), 0)

def clz_Torappu_Act20SideData_ResidentCartDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act20SideData_ResidentCartData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act20SideData_ResidentCartData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act20SideData_ResidentCartData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act20SideData_ResidentCartData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act20SideData_ResidentCartData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act20SideData_ResidentCartDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act20SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act20SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act20SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act20SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act20SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act20SideData
    def ResidentCartDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act20SideData_ResidentCartData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act20SideData
    def ResidentCartDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act20SideData
    def ResidentCartDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act20SideDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act20SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act20SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act20SideDataAddResidentCartDatas(builder, residentCartDatas):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(residentCartDatas), 0)

def clz_Torappu_Act20SideDataStartResidentCartDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act20SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act20SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act20SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act20SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act20SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act20SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act20SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act20SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act20SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act20SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act20SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act20SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData_ZoneAddtionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData_ZoneAddtionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData_ZoneAddtionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData_ZoneAddtionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def StageUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act21SideData_ZoneAddtionData
    def EntryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act21SideData_ZoneAddtionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddStageUnlockText(builder, stageUnlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageUnlockText), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataAddEntryId(builder, entryId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entryId), 0)

def clz_Torappu_Act21SideData_ZoneAddtionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act21SideData_ZoneAddtionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act21SideData_ZoneAddtionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act21SideData_ZoneAddtionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act21SideData_ZoneAddtionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData_ZoneAddtionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act21SideData_ZoneAddtionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData_ConstData
    def LineConnectZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act21SideData_ConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_Act21SideData_ConstDataAddLineConnectZone(builder, lineConnectZone):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lineConnectZone), 0)

def clz_Torappu_Act21SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act21SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act21SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act21SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act21SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act21SideData_ZoneAddtionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act21SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act21SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act21SideDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act21SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act21SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act21SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act21SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act21SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act21SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act21SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act21SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act21SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act21SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act21SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act21SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act21SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act21SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act21SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityLoginData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityLoginData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityLoginData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityLoginData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityLoginData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityLoginData
    def ItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityLoginData
    def ItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityLoginData
    def ItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityLoginData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityLoginData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityLoginData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_ActivityLoginDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActivityLoginDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_ActivityLoginDataAddItemList(builder, itemList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemList), 0)

def clz_Torappu_ActivityLoginDataStartItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityLoginDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_ActivityLoginDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityLoginDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityLoginData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityLoginData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityLoginData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityLoginData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityLoginData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityLoginData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityLoginData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityLoginDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityLoginDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityLoginDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityLoginDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivitySwitchCheckinConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivitySwitchCheckinConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivitySwitchCheckinConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivitySwitchCheckinConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivitySwitchCheckinConstData
    def ActivityTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivitySwitchCheckinConstData
    def ActivityRule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivitySwitchCheckinConstDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivitySwitchCheckinConstDataAddActivityTime(builder, activityTime):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activityTime), 0)

def clz_Torappu_ActivitySwitchCheckinConstDataAddActivityRule(builder, activityRule):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(activityRule), 0)

def clz_Torappu_ActivitySwitchCheckinConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivitySwitchCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivitySwitchCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivitySwitchCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivitySwitchCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivitySwitchCheckinData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivitySwitchCheckinConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivitySwitchCheckinData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivitySwitchCheckinData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivitySwitchCheckinData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivitySwitchCheckinData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivitySwitchCheckinData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivitySwitchCheckinData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivitySwitchCheckinData
    def RewardsTitle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivitySwitchCheckinData
    def RewardsTitleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivitySwitchCheckinData
    def RewardsTitleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ActivitySwitchCheckinDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivitySwitchCheckinDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivitySwitchCheckinDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ActivitySwitchCheckinDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivitySwitchCheckinDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_ActivitySwitchCheckinDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivitySwitchCheckinDataAddRewardsTitle(builder, rewardsTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardsTitle), 0)

def clz_Torappu_ActivitySwitchCheckinDataStartRewardsTitleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivitySwitchCheckinDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivitySwitchCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivitySwitchCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivitySwitchCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivitySwitchCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivitySwitchCheckinData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivitySwitchCheckinData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivitySwitchCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivitySwitchCheckinDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivitySwitchCheckinDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivitySwitchCheckinDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivitySwitchCheckinDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMiniStoryData_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMiniStoryData_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMiniStoryData_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMiniStoryData_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityMiniStoryData_ZoneDescInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_ActivityMiniStoryData_ZoneDescInfoAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_ActivityMiniStoryData_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMiniStoryData_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMiniStoryData_FavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMiniStoryData_FavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMiniStoryData_FavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def DisplayEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityMiniStoryData_FavorUpInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActivityMiniStoryData_FavorUpInfoAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_ActivityMiniStoryData_FavorUpInfoAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(1, displayStartTime, 0)

def clz_Torappu_ActivityMiniStoryData_FavorUpInfoAddDisplayEndTime(builder, displayEndTime):
    builder.PrependInt64Slot(2, displayEndTime, 0)

def clz_Torappu_ActivityMiniStoryData_FavorUpInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMiniStoryData_FavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMiniStoryData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMiniStoryData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMiniStoryData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMiniStoryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMiniStoryData
    def TokenItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMiniStoryData
    def ZoneDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMiniStoryData_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMiniStoryData
    def ZoneDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMiniStoryData
    def ZoneDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityMiniStoryData
    def FavorUpList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMiniStoryData_FavorUpInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMiniStoryData
    def FavorUpListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMiniStoryData
    def FavorUpListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityMiniStoryData
    def ExtraDropZoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMiniStoryData
    def ExtraDropZoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMiniStoryData
    def ExtraDropZoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ActivityMiniStoryDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityMiniStoryDataAddTokenItemId(builder, tokenItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tokenItemId), 0)

def clz_Torappu_ActivityMiniStoryDataAddZoneDescList(builder, zoneDescList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDescList), 0)

def clz_Torappu_ActivityMiniStoryDataStartZoneDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMiniStoryDataAddFavorUpList(builder, favorUpList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpList), 0)

def clz_Torappu_ActivityMiniStoryDataStartFavorUpListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMiniStoryDataAddExtraDropZoneList(builder, extraDropZoneList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extraDropZoneList), 0)

def clz_Torappu_ActivityMiniStoryDataStartExtraDropZoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMiniStoryDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMiniStoryData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMiniStoryData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMiniStoryData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMiniStoryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMiniStoryData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMiniStoryData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMiniStoryData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMiniStoryDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMiniStoryDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMiniStoryDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMiniStoryDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def BuffLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddBuffLevel(builder, buffLevel):
    builder.PrependInt32Slot(0, buffLevel, 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddItemType(builder, itemType):
    builder.PrependInt32Slot(6, itemType, 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddCost(builder, cost):
    builder.PrependInt32Slot(7, cost, 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def BuffUnlockInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def BuffUnlockInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def BuffUnlockInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataAddBuffUnlockInfos(builder, buffUnlockInfos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffUnlockInfos), 0)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataStartBuffUnlockInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityRoguelikeData_MileStoneItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_ActivityRoguelikeData_MileStoneItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_CustomUnlockCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_CustomUnlockCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_CustomUnlockCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_CustomUnlockCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_CustomUnlockCond
    def ActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_CustomUnlockCond
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityTable_CustomUnlockCondStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityTable_CustomUnlockCondAddActId(builder, actId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actId), 0)

def clz_Torappu_ActivityTable_CustomUnlockCondAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityTable_CustomUnlockCondEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityRoguelikeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityRoguelikeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityRoguelikeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityRoguelikeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityRoguelikeData
    def OutBuffInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityRoguelikeData_OuterBuffUnlockInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData
    def OutBuffInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def OutBuffInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityRoguelikeData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityRoguelikeData
    def OuterBuffToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData
    def ShopToken(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData
    def RelicUnlockTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def MilestoneTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityRoguelikeData
    def OuterBuffTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityRoguelikeData
    def RelicTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityRoguelikeData
    def RelicOuterBuffTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityRoguelikeData
    def ReOpenCoolDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def TokenItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData
    def CharStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityRoguelikeData
    def Milestone(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityRoguelikeData_MileStoneItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData
    def MilestoneLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def MilestoneIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_ActivityRoguelikeData
    def UnlockConds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityTable_CustomUnlockCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityRoguelikeData
    def UnlockCondsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityRoguelikeData
    def UnlockCondsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_ActivityRoguelikeDataStart(builder):
    builder.StartObject(14)

def clz_Torappu_ActivityRoguelikeDataAddOutBuffInfos(builder, outBuffInfos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(outBuffInfos), 0)

def clz_Torappu_ActivityRoguelikeDataStartOutBuffInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityRoguelikeDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_ActivityRoguelikeDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityRoguelikeDataAddOuterBuffToken(builder, outerBuffToken):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outerBuffToken), 0)

def clz_Torappu_ActivityRoguelikeDataAddShopToken(builder, shopToken):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shopToken), 0)

def clz_Torappu_ActivityRoguelikeDataAddRelicUnlockTime(builder, relicUnlockTime):
    builder.PrependInt64Slot(4, relicUnlockTime, 0)

def clz_Torappu_ActivityRoguelikeDataAddMilestoneTokenRatio(builder, milestoneTokenRatio):
    builder.PrependFloat32Slot(5, milestoneTokenRatio, 0.0)

def clz_Torappu_ActivityRoguelikeDataAddOuterBuffTokenRatio(builder, outerBuffTokenRatio):
    builder.PrependFloat32Slot(6, outerBuffTokenRatio, 0.0)

def clz_Torappu_ActivityRoguelikeDataAddRelicTokenRatio(builder, relicTokenRatio):
    builder.PrependFloat32Slot(7, relicTokenRatio, 0.0)

def clz_Torappu_ActivityRoguelikeDataAddRelicOuterBuffTokenRatio(builder, relicOuterBuffTokenRatio):
    builder.PrependFloat32Slot(8, relicOuterBuffTokenRatio, 0.0)

def clz_Torappu_ActivityRoguelikeDataAddReOpenCoolDown(builder, reOpenCoolDown):
    builder.PrependInt32Slot(9, reOpenCoolDown, 0)

def clz_Torappu_ActivityRoguelikeDataAddTokenItem(builder, tokenItem):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(tokenItem), 0)

def clz_Torappu_ActivityRoguelikeDataAddCharStoneId(builder, charStoneId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(charStoneId), 0)

def clz_Torappu_ActivityRoguelikeDataAddMilestone(builder, milestone):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(milestone), 0)

def clz_Torappu_ActivityRoguelikeDataStartMilestoneVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityRoguelikeDataAddUnlockConds(builder, unlockConds):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(unlockConds), 0)

def clz_Torappu_ActivityRoguelikeDataStartUnlockCondsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityRoguelikeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityRoguelikeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityRoguelikeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityRoguelikeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityRoguelikeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityRoguelikeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityRoguelikeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityRoguelikeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityRoguelikeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityRoguelikeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityRoguelikeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityRoguelikeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def StepType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def HintTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddStepType(builder, stepType):
    builder.PrependInt32Slot(0, stepType, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddTime(builder, time):
    builder.PrependInt32Slot(2, time, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddHintTime(builder, hintTime):
    builder.PrependInt32Slot(3, hintTime, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def MaxNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddMaxNum(builder, maxNum):
    builder.PrependInt32Slot(4, maxNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def SquadMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def MatchUnlockModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def MatchUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def StageIdInModeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def StageIdInModeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def StageIdInModeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def ModeIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(1, difficulty, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddSquadMax(builder, squadMax):
    builder.PrependInt32Slot(2, squadMax, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddMatchUnlockModeId(builder, matchUnlockModeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(matchUnlockModeId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddMatchUnlockParam(builder, matchUnlockParam):
    builder.PrependInt32Slot(4, matchUnlockParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddStageIdInModeList(builder, stageIdInModeList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdInModeList), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataStartStageIdInModeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddModeIconId(builder, modeIconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(modeIconId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def StageSmallPreviewId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def StageBigPreviewId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def DisplayEnemyIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def DisplayEnemyIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def DisplayEnemyIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddModeId(builder, modeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(modeId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddStageSmallPreviewId(builder, stageSmallPreviewId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageSmallPreviewId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddStageBigPreviewId(builder, stageBigPreviewId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageBigPreviewId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddDisplayEnemyIdList(builder, displayEnemyIdList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(displayEnemyIdList), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataStartDisplayEnemyIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def BattleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def StarNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddBattleDesc(builder, battleDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(battleDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddStarNum(builder, starNum):
    builder.PrependInt32Slot(5, starNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData
    def MileStoneLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData
    def NeedPointCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataAddMileStoneLvl(builder, mileStoneLvl):
    builder.PrependInt32Slot(1, mileStoneLvl, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataAddNeedPointCnt(builder, needPointCnt):
    builder.PrependInt32Slot(2, needPointCnt, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def StarNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData
    def DailyMissionPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataAddStarNum(builder, starNum):
    builder.PrependInt32Slot(0, starNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataAddDailyMissionPoint(builder, dailyMissionPoint):
    builder.PrependInt32Slot(2, dailyMissionPoint, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def StarRewardDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStarRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def StarRewardDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def StarRewardDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataAddStarRewardDatas(builder, starRewardDatas):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(starRewardDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataStartStarRewardDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def PriorityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Txt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def ParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def ParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def ParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddPriorityId(builder, priorityId):
    builder.PrependInt32Slot(2, priorityId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddTxt(builder, txt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(txt), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddParamList(builder, paramList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(paramList), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataStartParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData
    def Txt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsDataAddTxt(builder, txt):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(txt), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsDataAddWeight(builder, weight):
    builder.PrependInt32Slot(2, weight, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData
    def Txt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataAddTxt(builder, txt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(txt), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def MainSkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def SpecializeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def PotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def FavorPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(2, evolvePhase, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddMainSkillLevel(builder, mainSkillLevel):
    builder.PrependInt32Slot(3, mainSkillLevel, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddSpecializeLevel(builder, specializeLevel):
    builder.PrependInt32Slot(4, specializeLevel, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddPotentialRank(builder, potentialRank):
    builder.PrependInt32Slot(5, potentialRank, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddFavorPoint(builder, favorPoint):
    builder.PrependInt32Slot(6, favorPoint, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond
    def Cond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond
    def Txt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCondStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCondAddCond(builder, cond):
    builder.PrependInt32Slot(0, cond, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCondAddTxt(builder, txt):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(txt), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCondEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MilestoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxUnlockNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RoomNumCopyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def NoMapRoomNumCopyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RandomMapRoomNumCopyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TargetCd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def SquadMinNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def SquadMaxNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DefenseTraMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DefenseOrdMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DefenseDifMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def StageChooseAnimRandomStageIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def StageChooseAnimRandomStageIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def StageChooseAnimRandomStageIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc6(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MapUnlockDesc7(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DifUnlockCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def OrdRewardStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DifRewardStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxMatchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TipsSwitchTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def PingConds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData_PingCond()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def PingCondsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def PingCondsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ChatCd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ChatTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MarkCd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MarkCond1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MarkCond2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DailyMissionParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DailyMissionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DailyMissionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DailyMissionRule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MissionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DailyMissionRewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def NormalGreatVoiceStar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def FootballGreatVoiceNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DefenceGreatVoiceWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ReportMaxNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ReportText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RewardCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RewardCardText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RewardSkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def RewardSkinText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxRetryTimeInTeamRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxRetryTimeInMatchRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxRetryTimeInBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxOperatorDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def MaxPlaySpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def DelayTimeNeedTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def SettleRetryTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeNormalUnlockModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeNormalUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeDefenceUnlockModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeDefenceUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeFootballUnlockModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def ModeFootballUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TutorialEntryStoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TutorialSquadStoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TeamUnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TeamUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerCharSkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerPlayerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerPlayerLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerAvatarGroupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData
    def TrainPartnerAvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataStart(builder):
    builder.StartObject(69)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMilestoneId(builder, milestoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxUnlockNum(builder, maxUnlockNum):
    builder.PrependInt32Slot(1, maxUnlockNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRoomNumCopyDesc(builder, roomNumCopyDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(roomNumCopyDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddNoMapRoomNumCopyDesc(builder, noMapRoomNumCopyDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(noMapRoomNumCopyDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRandomMapRoomNumCopyDesc(builder, randomMapRoomNumCopyDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(randomMapRoomNumCopyDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTargetCd(builder, targetCd):
    builder.PrependInt32Slot(5, targetCd, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddSquadMinNum(builder, squadMinNum):
    builder.PrependInt32Slot(6, squadMinNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddSquadMaxNum(builder, squadMaxNum):
    builder.PrependInt32Slot(7, squadMaxNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDefenseTraMax(builder, defenseTraMax):
    builder.PrependInt32Slot(8, defenseTraMax, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDefenseOrdMax(builder, defenseOrdMax):
    builder.PrependInt32Slot(9, defenseOrdMax, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDefenseDifMax(builder, defenseDifMax):
    builder.PrependInt32Slot(10, defenseDifMax, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddStageChooseAnimRandomStageIdList(builder, stageChooseAnimRandomStageIdList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(stageChooseAnimRandomStageIdList), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataStartStageChooseAnimRandomStageIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc1(builder, mapUnlockDesc1):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc1), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc2(builder, mapUnlockDesc2):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc2), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc3(builder, mapUnlockDesc3):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc3), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc4(builder, mapUnlockDesc4):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc4), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc5(builder, mapUnlockDesc5):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc5), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc6(builder, mapUnlockDesc6):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc6), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMapUnlockDesc7(builder, mapUnlockDesc7):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(mapUnlockDesc7), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDifUnlockCond(builder, difUnlockCond):
    builder.PrependInt32Slot(19, difUnlockCond, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddOrdRewardStageId(builder, ordRewardStageId):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(ordRewardStageId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDifRewardStageId(builder, difRewardStageId):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(difRewardStageId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxMatchTime(builder, maxMatchTime):
    builder.PrependInt32Slot(22, maxMatchTime, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTipsSwitchTime(builder, tipsSwitchTime):
    builder.PrependFloat32Slot(23, tipsSwitchTime, 0.0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddPingConds(builder, pingConds):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(pingConds), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataStartPingCondsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddChatCd(builder, chatCd):
    builder.PrependInt32Slot(25, chatCd, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddChatTime(builder, chatTime):
    builder.PrependInt32Slot(26, chatTime, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMarkCd(builder, markCd):
    builder.PrependInt32Slot(27, markCd, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMarkCond1(builder, markCond1):
    builder.PrependInt32Slot(28, markCond1, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMarkCond2(builder, markCond2):
    builder.PrependInt32Slot(29, markCond2, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDailyMissionParam(builder, dailyMissionParam):
    builder.PrependInt32Slot(30, dailyMissionParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDailyMissionName(builder, dailyMissionName):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(dailyMissionName), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDailyMissionDesc(builder, dailyMissionDesc):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(dailyMissionDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDailyMissionRule(builder, dailyMissionRule):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(dailyMissionRule), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMissionDesc(builder, missionDesc):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(missionDesc), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDailyMissionRewardItem(builder, dailyMissionRewardItem):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(dailyMissionRewardItem), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddNormalGreatVoiceStar(builder, normalGreatVoiceStar):
    builder.PrependInt32Slot(36, normalGreatVoiceStar, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddFootballGreatVoiceNum(builder, footballGreatVoiceNum):
    builder.PrependInt32Slot(37, footballGreatVoiceNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDefenceGreatVoiceWave(builder, defenceGreatVoiceWave):
    builder.PrependInt32Slot(38, defenceGreatVoiceWave, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddReportMaxNum(builder, reportMaxNum):
    builder.PrependInt32Slot(39, reportMaxNum, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddReportText(builder, reportText):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(reportText), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRewardCardId(builder, rewardCardId):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(rewardCardId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRewardCardText(builder, rewardCardText):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(rewardCardText), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRewardSkinId(builder, rewardSkinId):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(rewardSkinId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddRewardSkinText(builder, rewardSkinText):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(rewardSkinText), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxRetryTimeInTeamRoom(builder, maxRetryTimeInTeamRoom):
    builder.PrependInt32Slot(45, maxRetryTimeInTeamRoom, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxRetryTimeInMatchRoom(builder, maxRetryTimeInMatchRoom):
    builder.PrependInt32Slot(46, maxRetryTimeInMatchRoom, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxRetryTimeInBattle(builder, maxRetryTimeInBattle):
    builder.PrependInt32Slot(47, maxRetryTimeInBattle, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxOperatorDelay(builder, maxOperatorDelay):
    builder.PrependFloat64Slot(48, maxOperatorDelay, 0.0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddMaxPlaySpeed(builder, maxPlaySpeed):
    builder.PrependInt32Slot(49, maxPlaySpeed, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddDelayTimeNeedTip(builder, delayTimeNeedTip):
    builder.PrependInt32Slot(50, delayTimeNeedTip, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddSettleRetryTime(builder, settleRetryTime):
    builder.PrependInt32Slot(51, settleRetryTime, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeNormalUnlockModeId(builder, modeNormalUnlockModeId):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(modeNormalUnlockModeId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeNormalUnlockParam(builder, modeNormalUnlockParam):
    builder.PrependInt32Slot(53, modeNormalUnlockParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeDefenceUnlockModeId(builder, modeDefenceUnlockModeId):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(modeDefenceUnlockModeId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeDefenceUnlockParam(builder, modeDefenceUnlockParam):
    builder.PrependInt32Slot(55, modeDefenceUnlockParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeFootballUnlockModeId(builder, modeFootballUnlockModeId):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(modeFootballUnlockModeId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddModeFootballUnlockParam(builder, modeFootballUnlockParam):
    builder.PrependInt32Slot(57, modeFootballUnlockParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTutorialEntryStoryId(builder, tutorialEntryStoryId):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(tutorialEntryStoryId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTutorialSquadStoryId(builder, tutorialSquadStoryId):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(tutorialSquadStoryId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTeamUnlockStageId(builder, teamUnlockStageId):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(teamUnlockStageId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTeamUnlockParam(builder, teamUnlockParam):
    builder.PrependInt32Slot(61, teamUnlockParam, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerCharId(builder, trainPartnerCharId):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(trainPartnerCharId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerCharSkinId(builder, trainPartnerCharSkinId):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(trainPartnerCharSkinId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerPlayerName(builder, trainPartnerPlayerName):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(trainPartnerPlayerName), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerPlayerLevel(builder, trainPartnerPlayerLevel):
    builder.PrependInt32Slot(65, trainPartnerPlayerLevel, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerBuffId(builder, trainPartnerBuffId):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(trainPartnerBuffId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerAvatarGroupType(builder, trainPartnerAvatarGroupType):
    builder.PrependInt32Slot(67, trainPartnerAvatarGroupType, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataAddTrainPartnerAvatarId(builder, trainPartnerAvatarId):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(trainPartnerAvatarId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def NoRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def FullRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomIdFormatError(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomIdCopySuccess(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def Banned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def ServerOverload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def MatchAliveFailed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def CreateRoomAliveFailed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def JoinRoomAliveFailed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomOwnerReviseTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomCollaboratorReviseTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomOwnerReviseMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomCollaboratorReviseMap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomCollaboratorJoinRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def RoomCollaboratorExitRoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def ContinuousClicks(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def MatchNoProject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def ReportNoProject(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def OtherModeTrainingLock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def TeamLock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def MentorLockTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def UnlockNewModeInMatch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def UnlockNewStageInTeam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def UnlockMentorInMatch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def TeamFullLow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def TeamFullHigh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData
    def DifficultUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataStart(builder):
    builder.StartObject(27)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddNoRoom(builder, noRoom):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(noRoom), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddFullRoom(builder, fullRoom):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fullRoom), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomIdFormatError(builder, roomIdFormatError):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(roomIdFormatError), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomIdCopySuccess(builder, roomIdCopySuccess):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(roomIdCopySuccess), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddBanned(builder, banned):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(banned), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddServerOverload(builder, serverOverload):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(serverOverload), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddMatchAliveFailed(builder, matchAliveFailed):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(matchAliveFailed), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddCreateRoomAliveFailed(builder, createRoomAliveFailed):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createRoomAliveFailed), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddJoinRoomAliveFailed(builder, joinRoomAliveFailed):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(joinRoomAliveFailed), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomOwnerReviseTarget(builder, roomOwnerReviseTarget):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(roomOwnerReviseTarget), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomCollaboratorReviseTarget(builder, roomCollaboratorReviseTarget):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(roomCollaboratorReviseTarget), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomOwnerReviseMap(builder, roomOwnerReviseMap):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(roomOwnerReviseMap), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomCollaboratorReviseMap(builder, roomCollaboratorReviseMap):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(roomCollaboratorReviseMap), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomCollaboratorJoinRoom(builder, roomCollaboratorJoinRoom):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(roomCollaboratorJoinRoom), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddRoomCollaboratorExitRoom(builder, roomCollaboratorExitRoom):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(roomCollaboratorExitRoom), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddContinuousClicks(builder, continuousClicks):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(continuousClicks), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddMatchNoProject(builder, matchNoProject):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(matchNoProject), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddReportNoProject(builder, reportNoProject):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(reportNoProject), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddOtherModeTrainingLock(builder, otherModeTrainingLock):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(otherModeTrainingLock), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddTeamLock(builder, teamLock):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(teamLock), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddMentorLockTips(builder, mentorLockTips):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(mentorLockTips), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddUnlockNewModeInMatch(builder, unlockNewModeInMatch):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(unlockNewModeInMatch), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddUnlockNewStageInTeam(builder, unlockNewStageInTeam):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(unlockNewStageInTeam), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddUnlockMentorInMatch(builder, unlockMentorInMatch):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(unlockMentorInMatch), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddTeamFullLow(builder, teamFullLow):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(teamFullLow), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddTeamFullHigh(builder, teamFullHigh):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(teamFullHigh), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataAddDifficultUnlock(builder, difficultUnlock):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(difficultUnlock), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData
    def MapType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameDataAddMapType(builder, mapType):
    builder.PrependInt32Slot(0, mapType, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData
    def DifficultyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(0, difficulty, 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameDataAddDifficultyName(builder, difficultyName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyName), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMultiplayVerify2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMultiplayVerify2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMultiplayVerify2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMultiplayVerify2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMultiplayVerify2Data
    def SelectStepDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiSelectStepData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def SelectStepDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def SelectStepDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def IdentityDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiIdentityData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def IdentityDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def IdentityDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TargetMissionDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTargetMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TargetMissionDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TargetMissionDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MileStoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMilestoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MileStoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MileStoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def StageStarRewardDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiStageStarRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def StageStarRewardDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def StageStarRewardDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def EmojiChatDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiEmojiChatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def EmojiChatDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def EmojiChatDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def CommentDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiCommentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def CommentDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def CommentDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TipsDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTipsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TipsDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TipsDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def ReportDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiReportData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def ReportDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def ReportDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TempCharDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiTempCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TempCharDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def TempCharDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def ConstToastData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiConstToastData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeNameDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapTypeNameData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeNameDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def MapTypeNameDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def DifficultyNameDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiMapDifficultyNameData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def DifficultyNameDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def DifficultyNameDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def BuffIconDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data_Act2VMultiBuffIconData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMultiplayVerify2Data
    def BuffIconDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMultiplayVerify2Data
    def BuffIconDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def clz_Torappu_ActivityMultiplayVerify2DataStart(builder):
    builder.StartObject(17)

def clz_Torappu_ActivityMultiplayVerify2DataAddSelectStepDataList(builder, selectStepDataList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(selectStepDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartSelectStepDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddIdentityDataList(builder, identityDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(identityDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartIdentityDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddMapTypeDatas(builder, mapTypeDatas):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapTypeDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartMapTypeDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddMapDatas(builder, mapDatas):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mapDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartMapDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddTargetMissionDatas(builder, targetMissionDatas):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetMissionDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartTargetMissionDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddMileStoneList(builder, mileStoneList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartMileStoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddStageStarRewardDatas(builder, stageStarRewardDatas):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stageStarRewardDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartStageStarRewardDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddEmojiChatDatas(builder, emojiChatDatas):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(emojiChatDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartEmojiChatDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddCommentDatas(builder, commentDatas):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(commentDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartCommentDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddTipsDataList(builder, tipsDataList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tipsDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartTipsDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddReportDataList(builder, reportDataList):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(reportDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartReportDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddTempCharDataList(builder, tempCharDataList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(tempCharDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartTempCharDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivityMultiplayVerify2DataAddConstToastData(builder, constToastData):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(constToastData), 0)

def clz_Torappu_ActivityMultiplayVerify2DataAddMapTypeNameDataList(builder, mapTypeNameDataList):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(mapTypeNameDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartMapTypeNameDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddDifficultyNameDataList(builder, difficultyNameDataList):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyNameDataList), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartDifficultyNameDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataAddBuffIconDatas(builder, buffIconDatas):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(buffIconDatas), 0)

def clz_Torappu_ActivityMultiplayVerify2DataStartBuffIconDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMultiplayVerify2DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMultiplayVerify2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMultiplayVerify2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMultiplayVerify2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMultiplayVerify2Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMultiplayVerify2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMultiplayVerify2DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMultiplayVerify2DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMultiplayVerify2DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityInterlockData_StageAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityInterlockData_StageAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityInterlockData_StageAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityInterlockData_StageAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityInterlockData_StageAdditionData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_StageAdditionData
    def StageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_StageAdditionData
    def LockStageKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_StageAdditionData
    def LockSortIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityInterlockData_StageAdditionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityInterlockData_StageAdditionDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityInterlockData_StageAdditionDataAddStageType(builder, stageType):
    builder.PrependInt32Slot(1, stageType, 0)

def clz_Torappu_ActivityInterlockData_StageAdditionDataAddLockStageKey(builder, lockStageKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lockStageKey), 0)

def clz_Torappu_ActivityInterlockData_StageAdditionDataAddLockSortIndex(builder, lockSortIndex):
    builder.PrependInt32Slot(3, lockSortIndex, 0)

def clz_Torappu_ActivityInterlockData_StageAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityInterlockData_StageAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityInterlockData_StageAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityInterlockData_StageAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityInterlockData_StageAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityInterlockData_StageAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityInterlockData_StageAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityInterlockData_TreasureMonsterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityInterlockData_TreasureMonsterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityInterlockData_TreasureMonsterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def LockStageKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def EnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def EnemyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def EnemyIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def EnemyDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddLockStageKey(builder, lockStageKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lockStageKey), 0)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddEnemyId(builder, enemyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enemyId), 0)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddEnemyName(builder, enemyName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enemyName), 0)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddEnemyIcon(builder, enemyIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIcon), 0)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddEnemyDescription(builder, enemyDescription):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyDescription), 0)

def clz_Torappu_ActivityInterlockData_TreasureMonsterDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityInterlockData_TreasureMonsterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SharedCharData_SharedCharSkillData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SharedCharData_SharedCharSkillData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SharedCharData_SharedCharSkillData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SharedCharData_SharedCharSkillData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SharedCharData_SharedCharSkillData
    def SkillId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData_SharedCharSkillData
    def SpecializeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SharedCharData_SharedCharSkillDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SharedCharData_SharedCharSkillDataAddSkillId(builder, skillId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(skillId), 0)

def clz_Torappu_SharedCharData_SharedCharSkillDataAddSpecializeLevel(builder, specializeLevel):
    builder.PrependInt32Slot(1, specializeLevel, 0)

def clz_Torappu_SharedCharData_SharedCharSkillDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SharedCharData_CharEquipInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SharedCharData_CharEquipInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SharedCharData_CharEquipInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SharedCharData_CharEquipInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SharedCharData_CharEquipInfo
    def Locked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SharedCharData_CharEquipInfo
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SharedCharData_CharEquipInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_SharedCharData_CharEquipInfoAddLocked(builder, locked):
    builder.PrependBoolSlot(0, locked, 0)

def clz_Torappu_SharedCharData_CharEquipInfoAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_SharedCharData_CharEquipInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SharedCharData_CharEquipInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SharedCharData_CharEquipInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SharedCharData_CharEquipInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SharedCharData_CharEquipInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SharedCharData_CharEquipInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SharedCharData_CharEquipInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SharedCharData_CharEquipInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SharedCharData_CharEquipInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SharedCharData_CharEquipInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SharedCharData_CharEquipInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SharedCharData_CharEquipInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SharedCharData_TmplData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SharedCharData_TmplData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SharedCharData_TmplData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SharedCharData_TmplData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SharedCharData_TmplData
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData_TmplData
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData_TmplData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SharedCharData_SharedCharSkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData_TmplData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData_TmplData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SharedCharData_TmplData
    def CurrentEquip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData_TmplData
    def Equip(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SharedCharData_CharEquipInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData_TmplData
    def EquipLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData_TmplData
    def EquipIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_SharedCharData_TmplDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SharedCharData_TmplDataAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(0, skillIndex, 0)

def clz_Torappu_SharedCharData_TmplDataAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_SharedCharData_TmplDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_SharedCharData_TmplDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharData_TmplDataAddCurrentEquip(builder, currentEquip):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(currentEquip), 0)

def clz_Torappu_SharedCharData_TmplDataAddEquip(builder, equip):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(equip), 0)

def clz_Torappu_SharedCharData_TmplDataStartEquipVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharData_TmplDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SharedCharData_TmplData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SharedCharData_TmplData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SharedCharData_TmplData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SharedCharData_TmplData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SharedCharData_TmplData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SharedCharData_TmplData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SharedCharData_TmplData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SharedCharData_TmplDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SharedCharData_TmplDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SharedCharData_TmplDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SharedCharData_TmplDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SharedCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SharedCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SharedCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SharedCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SharedCharData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData
    def PotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SharedCharData_SharedCharSkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SharedCharData
    def CurrentEquip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData
    def Equip(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SharedCharData_CharEquipInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData
    def EquipLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData
    def EquipIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SharedCharData
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def FavorPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SharedCharData
    def CrisisRecord(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData
    def CrisisRecordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData
    def CrisisRecordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_SharedCharData
    def CrisisV2Record(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData
    def CrisisV2RecordLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData
    def CrisisV2RecordIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_SharedCharData
    def CurrentTmpl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SharedCharData
    def Tmpl(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SharedCharData_TmplData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SharedCharData
    def TmplLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SharedCharData
    def TmplIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def clz_Torappu_SharedCharDataStart(builder):
    builder.StartObject(15)

def clz_Torappu_SharedCharDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_SharedCharDataAddPotentialRank(builder, potentialRank):
    builder.PrependInt32Slot(1, potentialRank, 0)

def clz_Torappu_SharedCharDataAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(2, skillIndex, 0)

def clz_Torappu_SharedCharDataAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_SharedCharDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_SharedCharDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharDataAddCurrentEquip(builder, currentEquip):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(currentEquip), 0)

def clz_Torappu_SharedCharDataAddEquip(builder, equip):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(equip), 0)

def clz_Torappu_SharedCharDataStartEquipVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharDataAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(7, mainSkillLvl, 0)

def clz_Torappu_SharedCharDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(8, evolvePhase, 0)

def clz_Torappu_SharedCharDataAddLevel(builder, level):
    builder.PrependInt32Slot(9, level, 0)

def clz_Torappu_SharedCharDataAddFavorPoint(builder, favorPoint):
    builder.PrependInt32Slot(10, favorPoint, 0)

def clz_Torappu_SharedCharDataAddCrisisRecord(builder, crisisRecord):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(crisisRecord), 0)

def clz_Torappu_SharedCharDataStartCrisisRecordVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharDataAddCrisisV2Record(builder, crisisV2Record):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(crisisV2Record), 0)

def clz_Torappu_SharedCharDataStartCrisisV2RecordVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharDataAddCurrentTmpl(builder, currentTmpl):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(currentTmpl), 0)

def clz_Torappu_SharedCharDataAddTmpl(builder, tmpl):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(tmpl), 0)

def clz_Torappu_SharedCharDataStartTmplVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SharedCharDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityInterlockData_MileStoneItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityInterlockData_MileStoneItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityInterlockData_MileStoneItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityInterlockData_MileStoneItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityInterlockData_MileStoneItemInfo
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_MileStoneItemInfo
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_MileStoneItemInfo
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_MileStoneItemInfo
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_ActivityInterlockData_MileStoneItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityInterlockData_FinalStageProgressData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityInterlockData_FinalStageProgressData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityInterlockData_FinalStageProgressData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def KillCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def ApCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Favor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Gold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddKillCnt(builder, killCnt):
    builder.PrependInt32Slot(1, killCnt, 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddApCost(builder, apCost):
    builder.PrependInt32Slot(2, apCost, 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddFavor(builder, favor):
    builder.PrependInt32Slot(3, favor, 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddExp(builder, exp):
    builder.PrependInt32Slot(4, exp, 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddGold(builder, gold):
    builder.PrependInt32Slot(5, gold, 0)

def clz_Torappu_ActivityInterlockData_FinalStageProgressDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityInterlockData_FinalStageProgressData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityInterlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityInterlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityInterlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityInterlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityInterlockData
    def StageAdditionInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityInterlockData_StageAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityInterlockData
    def StageAdditionInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityInterlockData
    def StageAdditionInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityInterlockData
    def TreasureMonsterMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityInterlockData_TreasureMonsterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityInterlockData
    def TreasureMonsterMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityInterlockData
    def TreasureMonsterMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityInterlockData
    def SpecialAssistData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SharedCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityInterlockData
    def MileStoneItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityInterlockData_MileStoneItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityInterlockData
    def MileStoneItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityInterlockData
    def MileStoneItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityInterlockData
    def FinalStageProgressMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_ActivityInterlockData_FinalStageProgressData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityInterlockData
    def FinalStageProgressMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityInterlockData
    def FinalStageProgressMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_ActivityInterlockDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityInterlockDataAddStageAdditionInfoMap(builder, stageAdditionInfoMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageAdditionInfoMap), 0)

def clz_Torappu_ActivityInterlockDataStartStageAdditionInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityInterlockDataAddTreasureMonsterMap(builder, treasureMonsterMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(treasureMonsterMap), 0)

def clz_Torappu_ActivityInterlockDataStartTreasureMonsterMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityInterlockDataAddSpecialAssistData(builder, specialAssistData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(specialAssistData), 0)

def clz_Torappu_ActivityInterlockDataAddMileStoneItemList(builder, mileStoneItemList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneItemList), 0)

def clz_Torappu_ActivityInterlockDataStartMileStoneItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityInterlockDataAddFinalStageProgressMap(builder, finalStageProgressMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(finalStageProgressMap), 0)

def clz_Torappu_ActivityInterlockDataStartFinalStageProgressMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityInterlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityInterlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityInterlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityInterlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityInterlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityInterlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityInterlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityInterlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityInterlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityInterlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityInterlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityInterlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityBossRushData_ZoneAdditionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityBossRushData_ZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_ActivityBossRushData_ZoneAdditionDataAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(1, displayStartTime, 0)

def clz_Torappu_ActivityBossRushData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_ActivityBossRushData_BossRushStageType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_ActivityBossRushData_BossRushStageType__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_ActivityBossRushData_BossRushStageType__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_ActivityBossRushData_BossRushStageType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_ActivityBossRushData_BossRushStageType__stringEnd(builder):
    return builder.EndObject()



class list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_string
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # list_string
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_string
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_stringStart(builder):
    builder.StartObject(1)

def list_stringAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_stringStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushStageGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushStageGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushStageGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def StageGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def StageGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def StageIdMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_ActivityBossRushData_BossRushStageType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def StageIdMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def StageIdMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def WaveBossInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def WaveBossInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def WaveBossInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def NormalStageCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def IsHardStageGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def UnlockCondtion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddStageGroupId(builder, stageGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageGroupId), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddStageGroupName(builder, stageGroupName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageGroupName), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddStageIdMap(builder, stageIdMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageIdMap), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataStartStageIdMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddWaveBossInfo(builder, waveBossInfo):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(waveBossInfo), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataStartWaveBossInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddNormalStageCount(builder, normalStageCount):
    builder.PrependInt32Slot(5, normalStageCount, 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddIsHardStageGroup(builder, isHardStageGroup):
    builder.PrependBoolSlot(6, isHardStageGroup, 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddUnlockCondtion(builder, unlockCondtion):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondtion), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_BossRushStageGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushStageAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushStageAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushStageAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def StageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def StageGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def TeamIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def TeamIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def TeamIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddStageType(builder, stageType):
    builder.PrependInt32Slot(1, stageType, 0)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddStageGroupId(builder, stageGroupId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageGroupId), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddTeamIdList(builder, teamIdList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(teamIdList), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataStartTeamIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_BossRushStageAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_DisplayDetailRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_DisplayDetailRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_DisplayDetailRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def OccPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def DropCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_DisplayDetailRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsAddOccPercent(builder, occPercent):
    builder.PrependInt32Slot(0, occPercent, 0)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsAddDropCount(builder, dropCount):
    builder.PrependInt32Slot(1, dropCount, 0)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(4, dropType, 0)

def clz_Torappu_ActivityBossRushData_DisplayDetailRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def ClearWaveCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def DisplayDetailRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityBossRushData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def DisplayDetailRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def DisplayDetailRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def FirstPassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def FirstPassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def FirstPassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def PassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def PassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def PassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ActivityBossRushData_BossRushDropInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoAddClearWaveCount(builder, clearWaveCount):
    builder.PrependInt32Slot(0, clearWaveCount, 0)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoAddDisplayDetailRewards(builder, displayDetailRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayDetailRewards), 0)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoStartDisplayDetailRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoAddFirstPassRewards(builder, firstPassRewards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(firstPassRewards), 0)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoStartFirstPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoAddPassRewards(builder, passRewards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(passRewards), 0)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoStartPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushDropInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_BossRushDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushMissionAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def IsRelicTask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataAddIsRelicTask(builder, isRelicTask):
    builder.PrependBoolSlot(1, isRelicTask, 0)

def clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushTeamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushTeamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushTeamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def TeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def CharIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def CharIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def CharIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def TeamBuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def TeamBuffDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def TeamBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def MaxCharNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushTeamData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityBossRushData_BossRushTeamDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddTeamId(builder, teamId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(teamId), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddTeamName(builder, teamName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamName), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddCharIdList(builder, charIdList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charIdList), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataStartCharIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddTeamBuffName(builder, teamBuffName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(teamBuffName), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddTeamBuffDes(builder, teamBuffDes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(teamBuffDes), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddTeamBuffId(builder, teamBuffId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(teamBuffId), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddMaxCharNum(builder, maxCharNum):
    builder.PrependInt32Slot(6, maxCharNum, 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_ActivityBossRushData_BossRushTeamDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_BossRushTeamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_RelicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_RelicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_RelicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_RelicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_RelicData
    def RelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_RelicData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_RelicData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_RelicData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_RelicData
    def RelicTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityBossRushData_RelicDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityBossRushData_RelicDataAddRelicId(builder, relicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicId), 0)

def clz_Torappu_ActivityBossRushData_RelicDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityBossRushData_RelicDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityBossRushData_RelicDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_ActivityBossRushData_RelicDataAddRelicTaskId(builder, relicTaskId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(relicTaskId), 0)

def clz_Torappu_ActivityBossRushData_RelicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_RelicLevelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_RelicLevelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_RelicLevelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def EffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def NeedItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityBossRushData_RelicLevelInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoAddLevel(builder, level):
    builder.PrependInt32Slot(0, level, 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoAddEffectDesc(builder, effectDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(effectDesc), 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoAddNeedItemCount(builder, needItemCount):
    builder.PrependInt32Slot(3, needItemCount, 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_RelicLevelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_RelicLevelInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_RelicLevelInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_RelicLevelInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def RelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def LevelInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_ActivityBossRushData_RelicLevelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def LevelInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def LevelInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ActivityBossRushData_RelicLevelInfoDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoDataAddRelicId(builder, relicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicId), 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoDataAddLevelInfos(builder, levelInfos):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelInfos), 0)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoDataStartLevelInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_RelicLevelInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_RelicLevelInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_BossRushMileStoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_BossRushMileStoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_BossRushMileStoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_BossRushMileStoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_BossRushMileStoneData
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_BossRushMileStoneData
    def MileStoneLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushMileStoneData
    def NeedPointCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_BossRushMileStoneData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataAddMileStoneLvl(builder, mileStoneLvl):
    builder.PrependInt32Slot(1, mileStoneLvl, 0)

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataAddNeedPointCnt(builder, needPointCnt):
    builder.PrependInt32Slot(2, needPointCnt, 0)

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_ActivityBossRushData_BossRushMileStoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData_ConstData
    def MaxProvidedCharNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityBossRushData_ConstData
    def TextMilestoneItemLevelDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_ConstData
    def MilestonePointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_ConstData
    def RelicUpgradeItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityBossRushData_ConstData
    def DefaultRelictList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityBossRushData_ConstData
    def DefaultRelictListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData_ConstData
    def DefaultRelictListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityBossRushData_ConstData
    def RewardSkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityBossRushData_ConstDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityBossRushData_ConstDataAddMaxProvidedCharNum(builder, maxProvidedCharNum):
    builder.PrependInt32Slot(0, maxProvidedCharNum, 0)

def clz_Torappu_ActivityBossRushData_ConstDataAddTextMilestoneItemLevelDesc(builder, textMilestoneItemLevelDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(textMilestoneItemLevelDesc), 0)

def clz_Torappu_ActivityBossRushData_ConstDataAddMilestonePointId(builder, milestonePointId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestonePointId), 0)

def clz_Torappu_ActivityBossRushData_ConstDataAddRelicUpgradeItemId(builder, relicUpgradeItemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(relicUpgradeItemId), 0)

def clz_Torappu_ActivityBossRushData_ConstDataAddDefaultRelictList(builder, defaultRelictList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(defaultRelictList), 0)

def clz_Torappu_ActivityBossRushData_ConstDataStartDefaultRelictListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushData_ConstDataAddRewardSkinId(builder, rewardSkinId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewardSkinId), 0)

def clz_Torappu_ActivityBossRushData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityBossRushData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityBossRushData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityBossRushData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityBossRushData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityBossRushData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def StageGroupMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_BossRushStageGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def StageGroupMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def StageGroupMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def StageAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_BossRushStageAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def StageAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def StageAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def StageDropDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__int__clz_Torappu_ActivityBossRushData_BossRushDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def StageDropDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def StageDropDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def MissionAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_BossRushMissionAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def MissionAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def MissionAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def TeamDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_BossRushTeamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def TeamDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def TeamDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def RelicList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityBossRushData_RelicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def RelicListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def RelicListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def RelicLevelInfoDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData_RelicLevelInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def RelicLevelInfoDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def RelicLevelInfoDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def MileStoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityBossRushData_BossRushMileStoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def MileStoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def MileStoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def BestWaveRuneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityBossRushData
    def BestWaveRuneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityBossRushData
    def BestWaveRuneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ActivityBossRushData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityBossRushDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_ActivityBossRushDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddStageGroupMap(builder, stageGroupMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageGroupMap), 0)

def clz_Torappu_ActivityBossRushDataStartStageGroupMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddStageAdditionDataMap(builder, stageAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageAdditionDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartStageAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddStageDropDataMap(builder, stageDropDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageDropDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartStageDropDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddMissionAdditionDataMap(builder, missionAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionAdditionDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartMissionAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddTeamDataMap(builder, teamDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(teamDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartTeamDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddRelicList(builder, relicList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(relicList), 0)

def clz_Torappu_ActivityBossRushDataStartRelicListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddRelicLevelInfoDataMap(builder, relicLevelInfoDataMap):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(relicLevelInfoDataMap), 0)

def clz_Torappu_ActivityBossRushDataStartRelicLevelInfoDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddMileStoneList(builder, mileStoneList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneList), 0)

def clz_Torappu_ActivityBossRushDataStartMileStoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddBestWaveRuneList(builder, bestWaveRuneList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bestWaveRuneList), 0)

def clz_Torappu_ActivityBossRushDataStartBestWaveRuneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityBossRushDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivityBossRushDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityBossRushData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityBossRushData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityBossRushData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityBossRushData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityBossRushData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityBossRushData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityBossRushData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityBossRushDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityBossRushDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityBossRushDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityBossRushDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData_ConstData
    def CityName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_ConstData
    def CityNamePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_ConstData
    def LowStandard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActivityFloatParadeData_ConstData
    def VariationTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_ConstData
    def RuleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityFloatParadeData_ConstDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityFloatParadeData_ConstDataAddCityName(builder, cityName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cityName), 0)

def clz_Torappu_ActivityFloatParadeData_ConstDataAddCityNamePic(builder, cityNamePic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cityNamePic), 0)

def clz_Torappu_ActivityFloatParadeData_ConstDataAddLowStandard(builder, lowStandard):
    builder.PrependFloat32Slot(2, lowStandard, 0.0)

def clz_Torappu_ActivityFloatParadeData_ConstDataAddVariationTitle(builder, variationTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(variationTitle), 0)

def clz_Torappu_ActivityFloatParadeData_ConstDataAddRuleDesc(builder, ruleDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ruleDesc), 0)

def clz_Torappu_ActivityFloatParadeData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData_DailyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData_DailyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData_DailyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData_DailyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def DayIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def DateName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def PlaceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def PlaceEnName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def PlacePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def EventGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_DailyData
    def ExtReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityFloatParadeData_DailyDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddDayIndex(builder, dayIndex):
    builder.PrependInt32Slot(0, dayIndex, 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddDateName(builder, dateName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dateName), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddPlaceName(builder, placeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(placeName), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddPlaceEnName(builder, placeEnName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(placeEnName), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddPlacePic(builder, placePic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(placePic), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddEventGroupId(builder, eventGroupId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(eventGroupId), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataAddExtReward(builder, extReward):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(extReward), 0)

def clz_Torappu_ActivityFloatParadeData_DailyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData_RewardPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData_RewardPool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData_RewardPool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def GrpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_RewardPool
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityFloatParadeData_RewardPoolStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddGrpId(builder, grpId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(grpId), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_ActivityFloatParadeData_RewardPoolEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityFloatParadeData_RewardPool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityFloatParadeData_RewardPool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPoolEnd(builder):
    return builder.EndObject()



class dict__string__float(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__float()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__float(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__float
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__float
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__float
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def dict__string__floatStart(builder):
    builder.StartObject(2)

def dict__string__floatAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__floatAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def dict__string__floatEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData_Tactic(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData_Tactic()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData_Tactic(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData_Tactic
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def PackName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def BriefName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def RewardVar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__float()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def RewardVarLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityFloatParadeData_Tactic
    def RewardVarIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_ActivityFloatParadeData_TacticStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityFloatParadeData_TacticAddId(builder, id):
    builder.PrependInt32Slot(0, id, 0)

def clz_Torappu_ActivityFloatParadeData_TacticAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityFloatParadeData_TacticAddPackName(builder, packName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(packName), 0)

def clz_Torappu_ActivityFloatParadeData_TacticAddBriefName(builder, briefName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(briefName), 0)

def clz_Torappu_ActivityFloatParadeData_TacticAddRewardVar(builder, rewardVar):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardVar), 0)

def clz_Torappu_ActivityFloatParadeData_TacticStartRewardVarVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityFloatParadeData_TacticEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData_GroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData_GroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData_GroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData_GroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def StartDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def EndDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def ExtRewardDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityFloatParadeData_GroupData
    def ExtRewardCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityFloatParadeData_GroupDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddStartDay(builder, startDay):
    builder.PrependInt32Slot(2, startDay, 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddEndDay(builder, endDay):
    builder.PrependInt32Slot(3, endDay, 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddExtRewardDay(builder, extRewardDay):
    builder.PrependInt32Slot(4, extRewardDay, 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataAddExtRewardCount(builder, extRewardCount):
    builder.PrependInt32Slot(5, extRewardCount, 0)

def clz_Torappu_ActivityFloatParadeData_GroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityFloatParadeData_GroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityFloatParadeData_GroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityFloatParadeData_GroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityFloatParadeData_GroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityFloatParadeData_GroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityFloatParadeData_GroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityFloatParadeData_GroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityFloatParadeData_GroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityFloatParadeData_GroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityFloatParadeData_GroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityFloatParadeData_GroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityFloatParadeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityFloatParadeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityFloatParadeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityFloatParadeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityFloatParadeData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityFloatParadeData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData
    def DailyDataDic(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityFloatParadeData_DailyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData
    def DailyDataDicLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityFloatParadeData
    def DailyDataDicIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityFloatParadeData
    def RewardPools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__string__clz_Torappu_ActivityFloatParadeData_RewardPool()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData
    def RewardPoolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityFloatParadeData
    def RewardPoolsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityFloatParadeData
    def TacticList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityFloatParadeData_Tactic()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData
    def TacticListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityFloatParadeData
    def TacticListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityFloatParadeData
    def GroupInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityFloatParadeData_GroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityFloatParadeData
    def GroupInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityFloatParadeData
    def GroupInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_ActivityFloatParadeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityFloatParadeDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivityFloatParadeDataAddDailyDataDic(builder, dailyDataDic):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dailyDataDic), 0)

def clz_Torappu_ActivityFloatParadeDataStartDailyDataDicVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityFloatParadeDataAddRewardPools(builder, rewardPools):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardPools), 0)

def clz_Torappu_ActivityFloatParadeDataStartRewardPoolsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityFloatParadeDataAddTacticList(builder, tacticList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tacticList), 0)

def clz_Torappu_ActivityFloatParadeDataStartTacticListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityFloatParadeDataAddGroupInfos(builder, groupInfos):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(groupInfos), 0)

def clz_Torappu_ActivityFloatParadeDataStartGroupInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityFloatParadeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityFloatParadeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityFloatParadeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityFloatParadeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityFloatParadeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityFloatParadeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityFloatParadeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityFloatParadeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityFloatParadeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityFloatParadeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityFloatParadeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityFloatParadeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMainlineBuffData_MissionGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMainlineBuffData_MissionGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMainlineBuffData_MissionGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def BindBanner(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def MissionIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def MissionIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def MissionIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddBindBanner(builder, bindBanner):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bindBanner), 0)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddMissionIdList(builder, missionIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionIdList), 0)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataStartMissionIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMainlineBuffData_MissionGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMainlineBuffData_MissionGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMainlineBuffData_PeriodData_StepData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def IsBlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def FavorUpDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def BindStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData
    def BlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataAddIsBlock(builder, isBlock):
    builder.PrependBoolSlot(0, isBlock, 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataAddFavorUpDesc(builder, favorUpDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpDesc), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataAddBindStageId(builder, bindStageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bindStageId), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataAddBlockDesc(builder, blockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blockDesc), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodData_StepDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMainlineBuffData_PeriodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMainlineBuffData_PeriodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMainlineBuffData_PeriodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def FavorUpCharDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def FavorUpImgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def NewChapterImgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def NewChapterZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def StepDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMainlineBuffData_PeriodData_StepData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def StepDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMainlineBuffData_PeriodData
    def StepDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_ActivityMainlineBuffData_PeriodDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddFavorUpCharDesc(builder, favorUpCharDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpCharDesc), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddFavorUpImgName(builder, favorUpImgName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpImgName), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddNewChapterImgName(builder, newChapterImgName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(newChapterImgName), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddNewChapterZoneId(builder, newChapterZoneId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(newChapterZoneId), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataAddStepDataList(builder, stepDataList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(stepDataList), 0)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataStartStepDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMainlineBuffData_PeriodDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMainlineBuffData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMainlineBuffData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMainlineBuffData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMainlineBuffData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMainlineBuffData_ConstData
    def FavorUpStageRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityMainlineBuffData_ConstDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityMainlineBuffData_ConstDataAddFavorUpStageRange(builder, favorUpStageRange):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(favorUpStageRange), 0)

def clz_Torappu_ActivityMainlineBuffData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityMainlineBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityMainlineBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityMainlineBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityMainlineBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityMainlineBuffData
    def MissionGroupList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMainlineBuffData_MissionGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMainlineBuffData
    def MissionGroupListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMainlineBuffData
    def MissionGroupListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityMainlineBuffData
    def PeriodDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityMainlineBuffData_PeriodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMainlineBuffData
    def PeriodDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMainlineBuffData
    def PeriodDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityMainlineBuffData
    def ApSupplyOutOfDateDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityMainlineBuffData
    def ApSupplyOutOfDateDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityMainlineBuffData
    def ApSupplyOutOfDateDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityMainlineBuffData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMainlineBuffData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityMainlineBuffDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityMainlineBuffDataAddMissionGroupList(builder, missionGroupList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroupList), 0)

def clz_Torappu_ActivityMainlineBuffDataStartMissionGroupListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMainlineBuffDataAddPeriodDataList(builder, periodDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(periodDataList), 0)

def clz_Torappu_ActivityMainlineBuffDataStartPeriodDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMainlineBuffDataAddApSupplyOutOfDateDict(builder, apSupplyOutOfDateDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(apSupplyOutOfDateDict), 0)

def clz_Torappu_ActivityMainlineBuffDataStartApSupplyOutOfDateDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityMainlineBuffDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivityMainlineBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityMainlineBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityMainlineBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityMainlineBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityMainlineBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityMainlineBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityMainlineBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityMainlineBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityMainlineBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityMainlineBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityMainlineBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityMainlineBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_ToolData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_ToolData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_ToolData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_ToolData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_ToolData
    def ToolId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_ToolData
    def ToolName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolIcon1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolIcon2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ToolData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData_ToolData
    def ToolStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act24SideData_ToolDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Act24SideData_ToolDataAddToolId(builder, toolId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(toolId), 0)

def clz_Torappu_Act24SideData_ToolDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act24SideData_ToolDataAddToolName(builder, toolName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(toolName), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolDesc(builder, toolDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(toolDesc), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolIcon1(builder, toolIcon1):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(toolIcon1), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolIcon2(builder, toolIcon2):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(toolIcon2), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolUnlockDesc(builder, toolUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(toolUnlockDesc), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolBuffId(builder, toolBuffId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(toolBuffId), 0)

def clz_Torappu_Act24SideData_ToolDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act24SideData_ToolDataAddToolStageId(builder, toolStageId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(toolStageId), 0)

def clz_Torappu_Act24SideData_ToolDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_ToolData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_ToolData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_ToolData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_ToolData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_ToolData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_ToolData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_ToolData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_ToolDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_ToolDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_ToolDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_ToolDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_MealData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_MealData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_MealData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_MealData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_MealData
    def MealId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MealData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MealData
    def MealName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MealData
    def MealEffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MealData
    def MealDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MealData
    def MealIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MealData
    def MealCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MealData
    def MealRewardAp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MealData
    def MealRewardItemInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act24SideData_MealDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act24SideData_MealDataAddMealId(builder, mealId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mealId), 0)

def clz_Torappu_Act24SideData_MealDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act24SideData_MealDataAddMealName(builder, mealName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mealName), 0)

def clz_Torappu_Act24SideData_MealDataAddMealEffectDesc(builder, mealEffectDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(mealEffectDesc), 0)

def clz_Torappu_Act24SideData_MealDataAddMealDesc(builder, mealDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mealDesc), 0)

def clz_Torappu_Act24SideData_MealDataAddMealIcon(builder, mealIcon):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mealIcon), 0)

def clz_Torappu_Act24SideData_MealDataAddMealCost(builder, mealCost):
    builder.PrependInt32Slot(6, mealCost, 0)

def clz_Torappu_Act24SideData_MealDataAddMealRewardAp(builder, mealRewardAp):
    builder.PrependInt32Slot(7, mealRewardAp, 0)

def clz_Torappu_Act24SideData_MealDataAddMealRewardItemInfo(builder, mealRewardItemInfo):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(mealRewardItemInfo), 0)

def clz_Torappu_Act24SideData_MealDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_MealData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_MealData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_MealData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_MealData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_MealData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_MealData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_MealData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_MealDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_MealDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_MealDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_MealDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_MeldingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_MeldingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_MeldingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_MeldingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_MeldingItemData
    def MeldingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingItemData
    def MeldingPrice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingItemData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act24SideData_MeldingItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act24SideData_MeldingItemDataAddMeldingId(builder, meldingId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(meldingId), 0)

def clz_Torappu_Act24SideData_MeldingItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act24SideData_MeldingItemDataAddMeldingPrice(builder, meldingPrice):
    builder.PrependInt32Slot(2, meldingPrice, 0)

def clz_Torappu_Act24SideData_MeldingItemDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(3, rarity, 0)

def clz_Torappu_Act24SideData_MeldingItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_MeldingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_MeldingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_MeldingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_MeldingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_MeldingItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_MeldingItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_MeldingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_MeldingItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_MeldingItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_MeldingItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_MeldingItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_MeldingGachaBoxData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_MeldingGachaBoxData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_MeldingGachaBoxData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaBoxId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaBoxName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def GachaTimesLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def ThemeColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxData
    def RemainItemBgColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act24SideData_MeldingGachaBoxDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaBoxId(builder, gachaBoxId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(gachaBoxId), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaSortId(builder, gachaSortId):
    builder.PrependInt32Slot(1, gachaSortId, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaIcon(builder, gachaIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gachaIcon), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaBoxName(builder, gachaBoxName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gachaBoxName), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaCost(builder, gachaCost):
    builder.PrependInt32Slot(4, gachaCost, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddGachaTimesLimit(builder, gachaTimesLimit):
    builder.PrependInt32Slot(5, gachaTimesLimit, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddThemeColor(builder, themeColor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(themeColor), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataAddRemainItemBgColor(builder, remainItemBgColor):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(remainItemBgColor), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_MeldingGachaBoxData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_MeldingGachaBoxGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_MeldingGachaBoxGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_MeldingGachaBoxGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def GachaBoxId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def PerCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def TotalCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def GachaType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def GachaOrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def GachaNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddGachaBoxId(builder, gachaBoxId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(gachaBoxId), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddOrderId(builder, orderId):
    builder.PrependInt32Slot(2, orderId, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(4, itemType, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddDisplayType(builder, displayType):
    builder.PrependInt32Slot(5, displayType, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddPerCount(builder, perCount):
    builder.PrependInt32Slot(6, perCount, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddTotalCount(builder, totalCount):
    builder.PrependInt32Slot(7, totalCount, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddGachaType(builder, gachaType):
    builder.PrependInt32Slot(8, gachaType, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddWeight(builder, weight):
    builder.PrependInt32Slot(9, weight, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddGachaOrderId(builder, gachaOrderId):
    builder.PrependInt32Slot(10, gachaOrderId, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddGachaNum(builder, gachaNum):
    builder.PrependInt32Slot(11, gachaNum, 0)

def clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act24SideData_MeldingGachaBoxGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_ZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ZoneAdditionData
    def ZoneIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ZoneAdditionData
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act24SideData_ZoneAdditionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act24SideData_ZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act24SideData_ZoneAdditionDataAddZoneIcon(builder, zoneIcon):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIcon), 0)

def clz_Torappu_Act24SideData_ZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act24SideData_ZoneAdditionDataAddDisplayTime(builder, displayTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(displayTime), 0)

def clz_Torappu_Act24SideData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_ZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_ZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_ZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_ZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_ZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_ZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_ZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_ZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_ZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_ZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_QuestStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_QuestStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_QuestStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_QuestStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_QuestStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_QuestStageData
    def StageRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_QuestStageData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_QuestStageData
    def IsUrgentStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_QuestStageData
    def IsDragonStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_QuestStageDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_QuestStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_QuestStageDataAddStageRank(builder, stageRank):
    builder.PrependInt32Slot(1, stageRank, 0)

def clz_Torappu_QuestStageDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_QuestStageDataAddIsUrgentStage(builder, isUrgentStage):
    builder.PrependBoolSlot(3, isUrgentStage, 0)

def clz_Torappu_QuestStageDataAddIsDragonStage(builder, isDragonStage):
    builder.PrependBoolSlot(4, isDragonStage, 0)

def clz_Torappu_QuestStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_MissionExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_MissionExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_MissionExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_MissionExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskTypeIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskClient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_MissionExtraData
    def TaskClientDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act24SideData_MissionExtraDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskTypeName(builder, taskTypeName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskTypeName), 0)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskTypeIcon(builder, taskTypeIcon):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskTypeIcon), 0)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskType(builder, taskType):
    builder.PrependInt32Slot(2, taskType, 0)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskTitle(builder, taskTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(taskTitle), 0)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskClient(builder, taskClient):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(taskClient), 0)

def clz_Torappu_Act24SideData_MissionExtraDataAddTaskClientDesc(builder, taskClientDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(taskClientDesc), 0)

def clz_Torappu_Act24SideData_MissionExtraDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData_MissionExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData_MissionExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData_MissionExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData_MissionExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData_MissionExtraData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData_MissionExtraData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_MissionExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideData_MissionExtraDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideData_MissionExtraDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideData_MissionExtraDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideData_MissionExtraDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_WeightItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_WeightItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_WeightItemBundle
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(5)

def clz_Torappu_WeightItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_WeightItemBundleAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_WeightItemBundleAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_WeightItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_WeightItemBundleAddWeight(builder, weight):
    builder.PrependInt32Slot(4, weight, 0)

def clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class list_clz_Torappu_WeightItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_clz_Torappu_WeightItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_clz_Torappu_WeightItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_clz_Torappu_WeightItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_clz_Torappu_WeightItemBundle
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # list_clz_Torappu_WeightItemBundle
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_clz_Torappu_WeightItemBundle
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_clz_Torappu_WeightItemBundleStart(builder):
    builder.StartObject(1)

def list_clz_Torappu_WeightItemBundleAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_clz_Torappu_WeightItemBundleStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_clz_Torappu_WeightItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_StageData_DisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_StageData_DisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(2, dropType, 0)

def clz_Torappu_StageData_DisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_DisplayDetailRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_DisplayDetailRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_DisplayDetailRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_DisplayDetailRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_DisplayDetailRewards
    def OccPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_StageData_DisplayDetailRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_DisplayDetailRewards
    def DropType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_DisplayDetailRewardsStart(builder):
    builder.StartObject(4)

def clz_Torappu_StageData_DisplayDetailRewardsAddOccPercent(builder, occPercent):
    builder.PrependInt32Slot(0, occPercent, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_StageData_DisplayDetailRewardsAddDropType(builder, dropType):
    builder.PrependInt32Slot(3, dropType, 0)

def clz_Torappu_StageData_DisplayDetailRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_StageDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_StageDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_StageDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_StageDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstPassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def FirstCompleteRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def PassRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def PassRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def PassRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_clz_Torappu_WeightItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def CompleteRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_StageData_StageDropInfo
    def DisplayDetailRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_StageData_StageDropInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_StageData_StageDropInfoAddFirstPassRewards(builder, firstPassRewards):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(firstPassRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartFirstPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddFirstCompleteRewards(builder, firstCompleteRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(firstCompleteRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartFirstCompleteRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddPassRewards(builder, passRewards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(passRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartPassRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddCompleteRewards(builder, completeRewards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(completeRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartCompleteRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddDisplayRewards(builder, displayRewards):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(displayRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartDisplayRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoAddDisplayDetailRewards(builder, displayDetailRewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(displayDetailRewards), 0)

def clz_Torappu_StageData_StageDropInfoStartDisplayDetailRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_StageData_StageDropInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_StageData_StageDropInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_StageData_StageDropInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_StageData_StageDropInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_StageData_StageDropInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_StageData_StageDropInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_StageData_StageDropInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_StageData_StageDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_StageData_StageDropInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_StageData_StageDropInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_StageData_StageDropInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_StageData_StageDropInfoEnd(builder):
    return builder.EndObject()



class dict__string__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__string__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_stringStart(builder):
    builder.StartObject(2)

def dict__string__list_stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData_ConstData
    def StageUnlockToolDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ConstData
    def MealLackMoney(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act24SideData_ConstData
    def MealDayTimesLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_ConstData
    def ToolMaximum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act24SideData_ConstData
    def StageCanNotUseToTool(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act24SideData_ConstData
    def StageCanNotUseToToolLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData_ConstData
    def StageCanNotUseToToolIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act24SideData_ConstData
    def GachaDefaultProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act24SideData_ConstData
    def GachaExtraProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Act24SideData_ConstDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act24SideData_ConstDataAddStageUnlockToolDesc(builder, stageUnlockToolDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageUnlockToolDesc), 0)

def clz_Torappu_Act24SideData_ConstDataAddMealLackMoney(builder, mealLackMoney):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mealLackMoney), 0)

def clz_Torappu_Act24SideData_ConstDataAddMealDayTimesLimit(builder, mealDayTimesLimit):
    builder.PrependInt32Slot(2, mealDayTimesLimit, 0)

def clz_Torappu_Act24SideData_ConstDataAddToolMaximum(builder, toolMaximum):
    builder.PrependInt32Slot(3, toolMaximum, 0)

def clz_Torappu_Act24SideData_ConstDataAddStageCanNotUseToTool(builder, stageCanNotUseToTool):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageCanNotUseToTool), 0)

def clz_Torappu_Act24SideData_ConstDataStartStageCanNotUseToToolVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideData_ConstDataAddGachaDefaultProb(builder, gachaDefaultProb):
    builder.PrependFloat32Slot(5, gachaDefaultProb, 0.0)

def clz_Torappu_Act24SideData_ConstDataAddGachaExtraProb(builder, gachaExtraProb):
    builder.PrependFloat32Slot(6, gachaExtraProb, 0.0)

def clz_Torappu_Act24SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act24SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act24SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act24SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act24SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act24SideData
    def ToolDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_ToolData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def ToolDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def ToolDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act24SideData
    def MealDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_MealData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MealDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MealDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act24SideData
    def MeldingDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_MeldingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MeldingDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MeldingDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_MeldingGachaBoxData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxGoodDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_Act24SideData_MeldingGachaBoxGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxGoodDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MeldingGachaBoxGoodDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act24SideData
    def MealWelcomeTxtDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MealWelcomeTxtDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MealWelcomeTxtDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act24SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_ZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act24SideData
    def QuestStageList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_QuestStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def QuestStageListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def QuestStageListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act24SideData
    def MissionDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData_MissionExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MissionDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MissionDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act24SideData
    def MeldingDropDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_StageData_StageDropInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def MeldingDropDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def MeldingDropDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act24SideData
    def StageMapPreviewDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act24SideData
    def StageMapPreviewDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act24SideData
    def StageMapPreviewDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act24SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act24SideDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act24SideDataAddToolDataList(builder, toolDataList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(toolDataList), 0)

def clz_Torappu_Act24SideDataStartToolDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMealDataList(builder, mealDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mealDataList), 0)

def clz_Torappu_Act24SideDataStartMealDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMeldingDict(builder, meldingDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(meldingDict), 0)

def clz_Torappu_Act24SideDataStartMeldingDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMeldingGachaBoxDataList(builder, meldingGachaBoxDataList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(meldingGachaBoxDataList), 0)

def clz_Torappu_Act24SideDataStartMeldingGachaBoxDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMeldingGachaBoxGoodDataMap(builder, meldingGachaBoxGoodDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(meldingGachaBoxGoodDataMap), 0)

def clz_Torappu_Act24SideDataStartMeldingGachaBoxGoodDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMealWelcomeTxtDataMap(builder, mealWelcomeTxtDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mealWelcomeTxtDataMap), 0)

def clz_Torappu_Act24SideDataStartMealWelcomeTxtDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act24SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddQuestStageList(builder, questStageList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(questStageList), 0)

def clz_Torappu_Act24SideDataStartQuestStageListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMissionDataList(builder, missionDataList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionDataList), 0)

def clz_Torappu_Act24SideDataStartMissionDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddMeldingDropDict(builder, meldingDropDict):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(meldingDropDict), 0)

def clz_Torappu_Act24SideDataStartMeldingDropDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddStageMapPreviewDict(builder, stageMapPreviewDict):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(stageMapPreviewDict), 0)

def clz_Torappu_Act24SideDataStartStageMapPreviewDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act24SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act24SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act24SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act24SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act24SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act24SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act24SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act24SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act24SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act24SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act24SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act24SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act24SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_ConstData
    def GetDailyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def CostName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ConstData
    def CostDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ConstData
    def CostLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def RewardLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def ResearchUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ConstData
    def HarvestReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData_ConstData
    def CostCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def CostCountLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def BasicProgress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ConstData
    def HarvestDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act25SideData_ConstDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act25SideData_ConstDataAddGetDailyCount(builder, getDailyCount):
    builder.PrependInt32Slot(0, getDailyCount, 0)

def clz_Torappu_Act25SideData_ConstDataAddCostName(builder, costName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(costName), 0)

def clz_Torappu_Act25SideData_ConstDataAddCostDesc(builder, costDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(costDesc), 0)

def clz_Torappu_Act25SideData_ConstDataAddCostLimit(builder, costLimit):
    builder.PrependInt32Slot(3, costLimit, 0)

def clz_Torappu_Act25SideData_ConstDataAddRewardLimit(builder, rewardLimit):
    builder.PrependInt32Slot(4, rewardLimit, 0)

def clz_Torappu_Act25SideData_ConstDataAddResearchUnlockText(builder, researchUnlockText):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(researchUnlockText), 0)

def clz_Torappu_Act25SideData_ConstDataAddHarvestReward(builder, harvestReward):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(harvestReward), 0)

def clz_Torappu_Act25SideData_ConstDataAddCostCount(builder, costCount):
    builder.PrependInt32Slot(7, costCount, 0)

def clz_Torappu_Act25SideData_ConstDataAddCostCountLimit(builder, costCountLimit):
    builder.PrependInt32Slot(8, costCountLimit, 0)

def clz_Torappu_Act25SideData_ConstDataAddBasicProgress(builder, basicProgress):
    builder.PrependInt32Slot(9, basicProgress, 0)

def clz_Torappu_Act25SideData_ConstDataAddHarvestDesc(builder, harvestDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(harvestDesc), 0)

def clz_Torappu_Act25SideData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_ZoneDescInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ZoneDescInfo
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ZoneDescInfo
    def DisplayStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act25SideData_ZoneDescInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act25SideData_ZoneDescInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act25SideData_ZoneDescInfoAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act25SideData_ZoneDescInfoAddDisplayStartTime(builder, displayStartTime):
    builder.PrependInt64Slot(2, displayStartTime, 0)

def clz_Torappu_Act25SideData_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_ZoneDescInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_ZoneDescInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_ZoneDescInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_ZoneDescInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_ZoneDescInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_ZoneDescInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_ZoneDescInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_ZoneDescInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_ZoneDescInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_ZoneDescInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_ArchiveItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_ArchiveItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_ArchiveItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_ArchiveItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_ArchiveItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveItemData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ArchiveItemData
    def ItemUnlockType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ArchiveItemData
    def ItemUnlockParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveItemData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveItemData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveItemData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act25SideData_ArchiveItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act25SideData_ArchiveItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddItemUnlockType(builder, itemUnlockType):
    builder.PrependInt32Slot(2, itemUnlockType, 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddItemUnlockParam(builder, itemUnlockParam):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemUnlockParam), 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act25SideData_ArchiveItemDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_Act25SideData_ArchiveItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_ArchiveItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_ArchiveItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_ArchiveItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_ArchiveItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_ArchiveItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_ArchiveItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_ArchiveItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_ArchiveItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_ArchiveItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_ArchiveItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_ArchiveItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_ArchiveMapInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_ArchiveMapInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_ArchiveMapInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def ObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def NumberId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_ArchiveMapInfoData
    def HasDot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act25SideData_ArchiveMapInfoDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddObjectId(builder, objectId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectId), 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddNumberId(builder, numberId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(numberId), 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddPosition(builder, position):
    builder.PrependInt32Slot(5, position, 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataAddHasDot(builder, hasDot):
    builder.PrependBoolSlot(6, hasDot, 0)

def clz_Torappu_Act25SideData_ArchiveMapInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_ArchiveMapInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_AreaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_AreaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_AreaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_AreaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def PreposedStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaInitialDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaEndingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaEndingAud(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def FinalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaInfoData
    def AreaNewIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act25SideData_AreaInfoDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaIcon(builder, areaIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(areaIcon), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaName(builder, areaName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(areaName), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddPreposedStage(builder, preposedStage):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(preposedStage), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaInitialDesc(builder, areaInitialDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(areaInitialDesc), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaEndingDesc(builder, areaEndingDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(areaEndingDesc), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaEndingAud(builder, areaEndingAud):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(areaEndingAud), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddFinalId(builder, finalId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(finalId), 0)

def clz_Torappu_Act25SideData_AreaInfoDataAddAreaNewIcon(builder, areaNewIcon):
    builder.PrependBoolSlot(11, areaNewIcon, 0)

def clz_Torappu_Act25SideData_AreaInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_AreaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_AreaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_AreaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_AreaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_AreaInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_AreaInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_AreaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_AreaInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_AreaInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_AreaInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_AreaInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_AreaMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_AreaMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_AreaMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_AreaMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_AreaMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def PreposedMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def IsZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act25SideData_AreaMissionData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def CostCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def Progress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def ProgressPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act25SideData_AreaMissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData_AreaMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def ArchiveItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act25SideData_AreaMissionData
    def ArchiveItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData_AreaMissionData
    def ArchiveItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def clz_Torappu_Act25SideData_AreaMissionDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_Act25SideData_AreaMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddPreposedMissionId(builder, preposedMissionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(preposedMissionId), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddIsZone(builder, isZone):
    builder.PrependBoolSlot(4, isZone, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddCostCount(builder, costCount):
    builder.PrependInt32Slot(6, costCount, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddTransform(builder, transform):
    builder.PrependInt32Slot(7, transform, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddProgress(builder, progress):
    builder.PrependInt32Slot(8, progress, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddProgressPicId(builder, progressPicId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(progressPicId), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddTemplateType(builder, templateType):
    builder.PrependInt32Slot(11, templateType, 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_Act25SideData_AreaMissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_Act25SideData_AreaMissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideData_AreaMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_Act25SideData_AreaMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideData_AreaMissionDataAddArchiveItems(builder, archiveItems):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(archiveItems), 0)

def clz_Torappu_Act25SideData_AreaMissionDataStartArchiveItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideData_AreaMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_AreaMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_AreaMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_AreaMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_AreaMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_AreaMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_AreaMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_AreaMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_AreaMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_AreaMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_AreaMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_AreaMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_BattlePerformanceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_BattlePerformanceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_BattlePerformanceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_BattlePerformanceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def ItemTechType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_BattlePerformanceData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act25SideData_BattlePerformanceDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemIcon(builder, itemIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemIcon), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddItemTechType(builder, itemTechType):
    builder.PrependInt32Slot(5, itemTechType, 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act25SideData_BattlePerformanceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_BattlePerformanceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_BattlePerformanceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_BattlePerformanceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_BattlePerformanceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_BattlePerformanceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_BattlePerformanceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_KeyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_KeyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_KeyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_KeyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_KeyData
    def KeyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_KeyData
    def KeyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_KeyData
    def KeyIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_KeyData
    def ToastText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act25SideData_KeyDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act25SideData_KeyDataAddKeyId(builder, keyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(keyId), 0)

def clz_Torappu_Act25SideData_KeyDataAddKeyName(builder, keyName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(keyName), 0)

def clz_Torappu_Act25SideData_KeyDataAddKeyIcon(builder, keyIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(keyIcon), 0)

def clz_Torappu_Act25SideData_KeyDataAddToastText(builder, toastText):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(toastText), 0)

def clz_Torappu_Act25SideData_KeyDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_KeyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_KeyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_KeyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_KeyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_KeyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_KeyData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_KeyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_KeyDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_KeyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_KeyDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_KeyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_FogUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_FogUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_FogUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_FogUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_FogUnlockData
    def LockId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_FogUnlockData
    def LockedCollectionIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData_FogUnlockData
    def UnlockedCollectionIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act25SideData_FogUnlockDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act25SideData_FogUnlockDataAddLockId(builder, lockId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lockId), 0)

def clz_Torappu_Act25SideData_FogUnlockDataAddLockedCollectionIconId(builder, lockedCollectionIconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lockedCollectionIconId), 0)

def clz_Torappu_Act25SideData_FogUnlockDataAddUnlockedCollectionIconId(builder, unlockedCollectionIconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockedCollectionIconId), 0)

def clz_Torappu_Act25SideData_FogUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData_FogUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData_FogUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData_FogUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData_FogUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData_FogUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData_FogUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_FogUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideData_FogUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideData_FogUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideData_FogUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideData_FogUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData_DailyFarmData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData_DailyFarmData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData_DailyFarmData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData_DailyFarmData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData_DailyFarmData
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act25SideData_DailyFarmData
    def UnitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act25SideData_DailyFarmDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act25SideData_DailyFarmDataAddTransform(builder, transform):
    builder.PrependInt32Slot(0, transform, 0)

def clz_Torappu_Act25SideData_DailyFarmDataAddUnitTime(builder, unitTime):
    builder.PrependInt64Slot(1, unitTime, 0)

def clz_Torappu_Act25SideData_DailyFarmDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act25SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act25SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act25SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act25SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act25SideData
    def TokenItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act25SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def ZoneDescList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_ZoneDescInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def ZoneDescListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def ZoneDescListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act25SideData
    def ArchiveItemData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_ArchiveItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def ArchiveItemDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def ArchiveItemDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act25SideData
    def ArcMapInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_ArchiveMapInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def ArcMapInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def ArcMapInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act25SideData
    def AreaInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_AreaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def AreaInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def AreaInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act25SideData
    def AreaMissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_AreaMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def AreaMissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def AreaMissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act25SideData
    def BattlePerformanceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_BattlePerformanceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def BattlePerformanceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def BattlePerformanceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act25SideData
    def KeyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_KeyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def KeyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def KeyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act25SideData
    def FogUnlockData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData_FogUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def FogUnlockDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def FogUnlockDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act25SideData
    def FarmList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act25SideData_DailyFarmData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act25SideData
    def FarmListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act25SideData
    def FarmListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_Act25SideDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act25SideDataAddTokenItemId(builder, tokenItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tokenItemId), 0)

def clz_Torappu_Act25SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act25SideDataAddZoneDescList(builder, zoneDescList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneDescList), 0)

def clz_Torappu_Act25SideDataStartZoneDescListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddArchiveItemData(builder, archiveItemData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(archiveItemData), 0)

def clz_Torappu_Act25SideDataStartArchiveItemDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddArcMapInfoData(builder, arcMapInfoData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(arcMapInfoData), 0)

def clz_Torappu_Act25SideDataStartArcMapInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddAreaInfoData(builder, areaInfoData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(areaInfoData), 0)

def clz_Torappu_Act25SideDataStartAreaInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddAreaMissionData(builder, areaMissionData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(areaMissionData), 0)

def clz_Torappu_Act25SideDataStartAreaMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddBattlePerformanceData(builder, battlePerformanceData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(battlePerformanceData), 0)

def clz_Torappu_Act25SideDataStartBattlePerformanceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddKeyData(builder, keyData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(keyData), 0)

def clz_Torappu_Act25SideDataStartKeyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddFogUnlockData(builder, fogUnlockData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(fogUnlockData), 0)

def clz_Torappu_Act25SideDataStartFogUnlockDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataAddFarmList(builder, farmList):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(farmList), 0)

def clz_Torappu_Act25SideDataStartFarmListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act25SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act25SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act25SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act25SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act25SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act25SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act25SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act25SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act25SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act25SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act25SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act25SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def TypeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def LaunchIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def PurchasePrice(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def PurchasePriceAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def PurchasePriceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def PurchasePriceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellingPriceList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellingPriceListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellingPriceListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellingPriceListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellShopList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellShopListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def SellShopListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideGoodData
    def IsPermanent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act27SideData_Act27SideGoodDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddTypeDesc(builder, typeDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeDesc), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddLaunchIconId(builder, launchIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(launchIconId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddPurchasePrice(builder, purchasePrice):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(purchasePrice), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataStartPurchasePriceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddSellingPriceList(builder, sellingPriceList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sellingPriceList), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataStartSellingPriceListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddSellShopList(builder, sellShopList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(sellShopList), 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataStartSellShopListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideGoodDataAddIsPermanent(builder, isPermanent):
    builder.PrependBoolSlot(8, isPermanent, 0)

def clz_Torappu_Act27SideData_Act27SideGoodDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act27SideData_Act27SideGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act27SideData_Act27SideGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act27SideData_Act27SideGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act27SideData_Act27SideGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act27SideData_Act27SideGoodData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act27SideData_Act27SideGoodData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act27SideData_Act27SideGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act27SideData_Act27SideGoodDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act27SideData_Act27SideGoodDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act27SideData_Act27SideGoodDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act27SideData_Act27SideGoodDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideMileStoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideMileStoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideMileStoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideMileStoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideMileStoneData
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideMileStoneData
    def MileStoneLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideMileStoneData
    def NeedPointCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideMileStoneData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act27SideData_Act27SideMileStoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act27SideData_Act27SideMileStoneDataAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneDataAddMileStoneLvl(builder, mileStoneLvl):
    builder.PrependInt32Slot(1, mileStoneLvl, 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneDataAddNeedPointCnt(builder, needPointCnt):
    builder.PrependInt32Slot(2, needPointCnt, 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideGoodLaunchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideGoodLaunchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideGoodLaunchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def DrinkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def FoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideGoodLaunchData
    def SouvenirId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddDrinkId(builder, drinkId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(drinkId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddFoodId(builder, foodId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(foodId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataAddSouvenirId(builder, souvenirId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(souvenirId), 0)

def clz_Torappu_Act27SideData_Act27SideGoodLaunchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideShopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideShopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideShopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideShopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideShopData
    def ShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideShopData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideShopData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideShopData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act27SideData_Act27SideShopDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act27SideData_Act27SideShopDataAddShopId(builder, shopId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shopId), 0)

def clz_Torappu_Act27SideData_Act27SideShopDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act27SideData_Act27SideShopDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act27SideData_Act27SideShopDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act27SideData_Act27SideShopDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act27SideData_Act27SideShopData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act27SideData_Act27SideShopData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act27SideData_Act27SideShopData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act27SideData_Act27SideShopData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act27SideData_Act27SideShopData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act27SideData_Act27SideShopData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act27SideData_Act27SideShopData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act27SideData_Act27SideShopDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act27SideData_Act27SideShopDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act27SideData_Act27SideShopDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act27SideData_Act27SideShopDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideInquireData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideInquireData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideInquireData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideInquireData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideInquireData
    def MileStonePt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideInquireData
    def InquireCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act27SideData_Act27SideInquireDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act27SideData_Act27SideInquireDataAddMileStonePt(builder, mileStonePt):
    builder.PrependInt32Slot(0, mileStonePt, 0)

def clz_Torappu_Act27SideData_Act27SideInquireDataAddInquireCount(builder, inquireCount):
    builder.PrependInt32Slot(1, inquireCount, 0)

def clz_Torappu_Act27SideData_Act27SideInquireDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideDynEntrySwitchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData
    def EntryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData
    def StartHour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData
    def SignalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act27SideData_Act27SideDynEntrySwitchDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act27SideData_Act27SideDynEntrySwitchDataAddEntryId(builder, entryId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(entryId), 0)

def clz_Torappu_Act27SideData_Act27SideDynEntrySwitchDataAddStartHour(builder, startHour):
    builder.PrependInt32Slot(1, startHour, 0)

def clz_Torappu_Act27SideData_Act27SideDynEntrySwitchDataAddSignalId(builder, signalId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(signalId), 0)

def clz_Torappu_Act27SideData_Act27SideDynEntrySwitchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27sideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27sideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27sideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act27SideData_Act27sideZoneAdditionDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act27SideData_Act27sideZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act27SideData_Act27sideZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act27SideData_Act27sideZoneAdditionDataAddDisplayTime(builder, displayTime):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(displayTime), 0)

def clz_Torappu_Act27SideData_Act27sideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act27SideData_Act27sideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData
    def FurniId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData
    def PointNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardDataAddFurniId(builder, furniId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(furniId), 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardDataAddPointNum(builder, pointNum):
    builder.PrependInt32Slot(1, pointNum, 0)

def clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData_Act27SideConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData_Act27SideConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData_Act27SideConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData_Act27SideConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData_Act27SideConstData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def StageCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def PurchasePriceName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act27SideData_Act27SideConstData
    def PurchasePriceNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def PurchasePriceNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def FurniRewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act27SideData_Act27SideMileStoneFurniRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def FurniRewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def FurniRewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def PrizeText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def PlayerShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def MilestonePointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def InquirePanelTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def InquirePanelDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain123(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain123AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain123Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain123IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain113(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain113AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain113Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain113IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain122(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain122AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain122Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain122IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain111(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain111AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain111Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain111IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain11None(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain11NoneAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain11NoneLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain11NoneIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain12None(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain12NoneAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain12NoneLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def Gain12NoneIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_Act27SideData_Act27SideConstData
    def CampaignEnemyCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act27SideData_Act27SideConstDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_Act27SideData_Act27SideConstDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddStageCode(builder, stageCode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageCode), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddPurchasePriceName(builder, purchasePriceName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(purchasePriceName), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartPurchasePriceNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddFurniRewardList(builder, furniRewardList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(furniRewardList), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartFurniRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddPrizeText(builder, prizeText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(prizeText), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddPlayerShopId(builder, playerShopId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(playerShopId), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddMilestonePointName(builder, milestonePointName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(milestonePointName), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddInquirePanelTitle(builder, inquirePanelTitle):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(inquirePanelTitle), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddInquirePanelDesc(builder, inquirePanelDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(inquirePanelDesc), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain123(builder, gain123):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(gain123), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain123Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain113(builder, gain113):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(gain113), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain113Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain122(builder, gain122):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(gain122), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain122Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain111(builder, gain111):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(gain111), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain111Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain11None(builder, gain11None):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(gain11None), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain11NoneVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddGain12None(builder, gain12None):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(gain12None), 0)

def clz_Torappu_Act27SideData_Act27SideConstDataStartGain12NoneVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideData_Act27SideConstDataAddCampaignEnemyCnt(builder, campaignEnemyCnt):
    builder.PrependInt32Slot(15, campaignEnemyCnt, 0)

def clz_Torappu_Act27SideData_Act27SideConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act27SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act27SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act27SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act27SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act27SideData
    def GoodDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act27SideData_Act27SideGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def GoodDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def GoodDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act27SideData
    def MileStoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act27SideData_Act27SideMileStoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def MileStoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def MileStoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act27SideData
    def GoodLaunchDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act27SideData_Act27SideGoodLaunchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def GoodLaunchDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def GoodLaunchDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act27SideData
    def ShopDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act27SideData_Act27SideShopData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def ShopDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def ShopDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act27SideData
    def InquireDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act27SideData_Act27SideInquireData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def InquireDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def InquireDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act27SideData
    def DynEntrySwitchData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act27SideData_Act27SideDynEntrySwitchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def DynEntrySwitchDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def DynEntrySwitchDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act27SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act27SideData_Act27sideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act27SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act27SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act27SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act27SideData_Act27SideConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act27SideDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act27SideDataAddGoodDataMap(builder, goodDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodDataMap), 0)

def clz_Torappu_Act27SideDataStartGoodDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddMileStoneList(builder, mileStoneList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneList), 0)

def clz_Torappu_Act27SideDataStartMileStoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddGoodLaunchDataList(builder, goodLaunchDataList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(goodLaunchDataList), 0)

def clz_Torappu_Act27SideDataStartGoodLaunchDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddShopDataMap(builder, shopDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(shopDataMap), 0)

def clz_Torappu_Act27SideDataStartShopDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddInquireDataList(builder, inquireDataList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(inquireDataList), 0)

def clz_Torappu_Act27SideDataStartInquireDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddDynEntrySwitchData(builder, dynEntrySwitchData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dynEntrySwitchData), 0)

def clz_Torappu_Act27SideDataStartDynEntrySwitchDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act27SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act27SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act27SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act27SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act27SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act27SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act27SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act27SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act27SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act27SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act27SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act27SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act27SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act27SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0AreaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0AreaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0AreaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def AreaCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def AreaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def AreaDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def CostLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def BossIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def BossId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def NextAreaStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddAreaCode(builder, areaCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(areaCode), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddAreaName(builder, areaName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(areaName), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(4, difficulty, 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddAreaDesc(builder, areaDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(areaDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddCostLimit(builder, costLimit):
    builder.PrependInt32Slot(6, costLimit, 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddBossIcon(builder, bossIcon):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(bossIcon), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddBossId(builder, bossId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bossId), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddNextAreaStage(builder, nextAreaStage):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(nextAreaStage), 0)

def clz_Torappu_Act42D0Data_Act42D0AreaInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0AreaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0StageInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0StageInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0StageInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def StageCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def StageDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def StageDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def StageDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddStageCode(builder, stageCode):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageCode), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddStageDesc(builder, stageDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(stageDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataStartStageDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0StageInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def EffectGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def EffectGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataAddEffectGroupId(builder, effectGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(effectGroupId), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataAddEffectGroupName(builder, effectGroupName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectGroupName), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0EffectInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0EffectInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0EffectInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def EffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def EffectGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def EffectName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def EffectIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def EffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def UnlockTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddEffectId(builder, effectId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(effectId), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddEffectGroupId(builder, effectGroupId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(effectGroupId), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddRow(builder, row):
    builder.PrependInt32Slot(2, row, 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddCol(builder, col):
    builder.PrependInt32Slot(3, col, 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddEffectName(builder, effectName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(effectName), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddEffectIcon(builder, effectIcon):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(effectIcon), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddCost(builder, cost):
    builder.PrependInt32Slot(6, cost, 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddEffectDesc(builder, effectDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(effectDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddUnlockTime(builder, unlockTime):
    builder.PrependInt64Slot(8, unlockTime, 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_Act42D0Data_Act42D0EffectInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0EffectInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0ChallengeMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def MissionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData
    def MilestoneCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataAddMissionDesc(builder, missionDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataAddMilestoneCount(builder, milestoneCount):
    builder.PrependInt32Slot(4, milestoneCount, 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0ChallengeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def StageDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def ChallengeMissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act42D0Data_Act42D0ChallengeMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def ChallengeMissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def ChallengeMissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddStageDesc(builder, stageDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(2, startTs, 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddChallengeMissionData(builder, challengeMissionData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(challengeMissionData), 0)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataStartChallengeMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0RatingInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0RatingInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0RatingInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def RatingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def CostUpLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def Achivement(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0RatingInfoData
    def MilestoneCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataAddRatingLevel(builder, ratingLevel):
    builder.PrependInt32Slot(0, ratingLevel, 0)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataAddCostUpLimit(builder, costUpLimit):
    builder.PrependInt32Slot(1, costUpLimit, 0)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataAddAchivement(builder, achivement):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(achivement), 0)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataAddMilestoneCount(builder, milestoneCount):
    builder.PrependInt32Slot(4, milestoneCount, 0)

def clz_Torappu_Act42D0Data_Act42D0RatingInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0StageRatingInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def MilestoneData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act42D0Data_Act42D0RatingInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def MilestoneDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def MilestoneDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataAddMilestoneData(builder, milestoneData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneData), 0)

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataStartMilestoneDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0MilestoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0MilestoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0MilestoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0MilestoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0MilestoneData
    def MilestoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0MilestoneData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0MilestoneData
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act42D0Data_Act42D0MilestoneData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataAddMilestoneId(builder, milestoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneId), 0)

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_Act42D0Data_Act42D0MilestoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data_Act42D0ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data_Act42D0ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data_Act42D0ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def MilestoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def StrifeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def StrifeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def RewardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def TraumaDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def MilestoneAreaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act42D0Data_Act42D0ConstData
    def TraumaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act42D0Data_Act42D0ConstDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddMilestoneId(builder, milestoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneId), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddStrifeName(builder, strifeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(strifeName), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddStrifeDesc(builder, strifeDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(strifeDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddRewardDesc(builder, rewardDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddTraumaDesc(builder, traumaDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(traumaDesc), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddMilestoneAreaName(builder, milestoneAreaName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneAreaName), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataAddTraumaName(builder, traumaName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(traumaName), 0)

def clz_Torappu_Act42D0Data_Act42D0ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act42D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act42D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act42D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act42D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act42D0Data
    def AreaInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0AreaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def AreaInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def AreaInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act42D0Data
    def StageInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0StageInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def StageInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def StageInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act42D0Data
    def EffectGroupInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0EffectGroupInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def EffectGroupInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def EffectGroupInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act42D0Data
    def EffectInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0EffectInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def EffectInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def EffectInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act42D0Data
    def ChallengeInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0ChallengeInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def ChallengeInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def ChallengeInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act42D0Data
    def StageRatingInfoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data_Act42D0StageRatingInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def StageRatingInfoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def StageRatingInfoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act42D0Data
    def MilestoneData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act42D0Data_Act42D0MilestoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def MilestoneDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def MilestoneDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act42D0Data
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data_Act42D0ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act42D0Data
    def TrackPointPeriodData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # clz_Torappu_Act42D0Data
    def TrackPointPeriodDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # clz_Torappu_Act42D0Data
    def TrackPointPeriodDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act42D0Data
    def TrackPointPeriodDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act42D0DataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act42D0DataAddAreaInfoData(builder, areaInfoData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(areaInfoData), 0)

def clz_Torappu_Act42D0DataStartAreaInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddStageInfoData(builder, stageInfoData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageInfoData), 0)

def clz_Torappu_Act42D0DataStartStageInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddEffectGroupInfoData(builder, effectGroupInfoData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectGroupInfoData), 0)

def clz_Torappu_Act42D0DataStartEffectGroupInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddEffectInfoData(builder, effectInfoData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(effectInfoData), 0)

def clz_Torappu_Act42D0DataStartEffectInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddChallengeInfoData(builder, challengeInfoData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(challengeInfoData), 0)

def clz_Torappu_Act42D0DataStartChallengeInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddStageRatingInfoData(builder, stageRatingInfoData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageRatingInfoData), 0)

def clz_Torappu_Act42D0DataStartStageRatingInfoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddMilestoneData(builder, milestoneData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneData), 0)

def clz_Torappu_Act42D0DataStartMilestoneDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act42D0DataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act42D0DataAddTrackPointPeriodData(builder, trackPointPeriodData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(trackPointPeriodData), 0)

def clz_Torappu_Act42D0DataStartTrackPointPeriodDataVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def clz_Torappu_Act42D0DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act42D0Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act42D0Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act42D0Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act42D0Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act42D0Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act42D0Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act42D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act42D0DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act42D0DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act42D0DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act42D0DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideFragData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideFragData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideFragData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideFragData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideFragData
    def FragId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFragData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideFragData
    def FragName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFragData
    def FragIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFragData
    def FragStoreIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideFragDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act29SideData_Act29SideFragDataAddFragId(builder, fragId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragId), 0)

def clz_Torappu_Act29SideData_Act29SideFragDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act29SideData_Act29SideFragDataAddFragName(builder, fragName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fragName), 0)

def clz_Torappu_Act29SideData_Act29SideFragDataAddFragIcon(builder, fragIcon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fragIcon), 0)

def clz_Torappu_Act29SideData_Act29SideFragDataAddFragStoreIcon(builder, fragStoreIcon):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(fragStoreIcon), 0)

def clz_Torappu_Act29SideData_Act29SideFragDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideFragData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideFragData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideFragData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideFragData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideFragData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideFragData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideFragData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideFragDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideFragDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideFragDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideFragDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideOrcheData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideOrcheData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideOrcheData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideOrcheData
    def OrcheType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act29SideData_Act29SideOrcheDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataAddOrcheType(builder, orcheType):
    builder.PrependInt32Slot(5, orcheType, 0)

def clz_Torappu_Act29SideData_Act29SideOrcheDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideOrcheData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideOrcheData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideOrcheDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideOrcheDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideOrcheDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideOrcheDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideProductGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideProductGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideProductGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def DefaultBgmSignal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ProductList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ProductListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ProductListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupEngName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupSmallName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupTypeIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupStoreIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupTypeBasePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupTypeEyeIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def GroupSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def FormList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def FormListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def FormListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def SheetId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def SheetNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def SheetRotateSpd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ProductType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ProductDescColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def PlayTintColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ConfirmTintColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def ConfirmDescColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductGroupData
    def BagThemeColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideProductGroupDataStart(builder):
    builder.StartObject(23)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupName(builder, groupName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupName), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupIcon(builder, groupIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupIcon), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupDesc(builder, groupDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(groupDesc), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddDefaultBgmSignal(builder, defaultBgmSignal):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(defaultBgmSignal), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddProductList(builder, productList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(productList), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataStartProductListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupEngName(builder, groupEngName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(groupEngName), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupSmallName(builder, groupSmallName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(groupSmallName), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupTypeIcon(builder, groupTypeIcon):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(groupTypeIcon), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupStoreIconId(builder, groupStoreIconId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groupStoreIconId), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupTypeBasePic(builder, groupTypeBasePic):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(groupTypeBasePic), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupTypeEyeIcon(builder, groupTypeEyeIcon):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(groupTypeEyeIcon), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddGroupSortId(builder, groupSortId):
    builder.PrependInt32Slot(12, groupSortId, 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddFormList(builder, formList):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(formList), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataStartFormListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddSheetId(builder, sheetId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(sheetId), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddSheetNum(builder, sheetNum):
    builder.PrependInt32Slot(15, sheetNum, 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddSheetRotateSpd(builder, sheetRotateSpd):
    builder.PrependFloat32Slot(16, sheetRotateSpd, 0.0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddProductType(builder, productType):
    builder.PrependInt32Slot(17, productType, 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddProductDescColor(builder, productDescColor):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(productDescColor), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddPlayTintColor(builder, playTintColor):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(playTintColor), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddConfirmTintColor(builder, confirmTintColor):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(confirmTintColor), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddConfirmDescColor(builder, confirmDescColor):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDescColor), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataAddBagThemeColor(builder, bagThemeColor):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(bagThemeColor), 0)

def clz_Torappu_Act29SideData_Act29SideProductGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideProductGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideProductData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideProductData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideProductData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideProductData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideProductData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductData
    def OrcheId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductData
    def FormId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideProductData
    def MusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideProductDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act29SideData_Act29SideProductDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_Act29SideData_Act29SideProductDataAddOrcheId(builder, orcheId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orcheId), 0)

def clz_Torappu_Act29SideData_Act29SideProductDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act29SideData_Act29SideProductDataAddFormId(builder, formId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(formId), 0)

def clz_Torappu_Act29SideData_Act29SideProductDataAddMusicId(builder, musicId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(musicId), 0)

def clz_Torappu_Act29SideData_Act29SideProductDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideProductData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideProductData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideProductData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideProductData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideProductData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideProductData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideProductData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideProductDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideProductDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideFormData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideFormData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideFormData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideFormData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FormId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FragIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FragIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FragIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FormDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFormData
    def ProductIdDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData_Act29SideFormData
    def ProductIdDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData_Act29SideFormData
    def ProductIdDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act29SideData_Act29SideFormData
    def WithoutOrcheProductId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFormData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideFormData
    def FormSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act29SideData_Act29SideFormDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act29SideData_Act29SideFormDataAddFormId(builder, formId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(formId), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataAddFragIdList(builder, fragIdList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fragIdList), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataStartFragIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideData_Act29SideFormDataAddFormDesc(builder, formDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(formDesc), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataAddProductIdDict(builder, productIdDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productIdDict), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataStartProductIdDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideData_Act29SideFormDataAddWithoutOrcheProductId(builder, withoutOrcheProductId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(withoutOrcheProductId), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act29SideData_Act29SideFormDataAddFormSortId(builder, formSortId):
    builder.PrependInt32Slot(6, formSortId, 0)

def clz_Torappu_Act29SideData_Act29SideFormDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideFormData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideFormData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideFormData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideFormData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideFormData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideFormData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideFormData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideFormDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideFormDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideFormDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideFormDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideInvestResultData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideInvestResultData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideInvestResultData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideInvestResultData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideInvestResultData
    def ResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestResultData
    def ResultTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestResultData
    def ResultDesc1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestResultData
    def ResultDesc2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideInvestResultDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act29SideData_Act29SideInvestResultDataAddResultId(builder, resultId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(resultId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestResultDataAddResultTitle(builder, resultTitle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(resultTitle), 0)

def clz_Torappu_Act29SideData_Act29SideInvestResultDataAddResultDesc1(builder, resultDesc1):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resultDesc1), 0)

def clz_Torappu_Act29SideData_Act29SideInvestResultDataAddResultDesc2(builder, resultDesc2):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(resultDesc2), 0)

def clz_Torappu_Act29SideData_Act29SideInvestResultDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideInvestResultData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideInvestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideInvestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideInvestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideInvestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestNpcName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestNpcPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestNpcAvatarPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def MajorNpcPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def MajorNpcBlackPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestSucResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestFailResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideInvestData
    def InvestRareResultId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideInvestDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestId(builder, investId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(investId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestType(builder, investType):
    builder.PrependInt32Slot(1, investType, 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestNpcName(builder, investNpcName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(investNpcName), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestNpcPic(builder, investNpcPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(investNpcPic), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestNpcAvatarPic(builder, investNpcAvatarPic):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(investNpcAvatarPic), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddMajorNpcPic(builder, majorNpcPic):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(majorNpcPic), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddMajorNpcBlackPic(builder, majorNpcBlackPic):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(majorNpcBlackPic), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestSucResultId(builder, investSucResultId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(investSucResultId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestFailResultId(builder, investFailResultId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(investFailResultId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataAddInvestRareResultId(builder, investRareResultId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(investRareResultId), 0)

def clz_Torappu_Act29SideData_Act29SideInvestDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideInvestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideInvestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideInvestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideInvestData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideInvestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideInvestDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestUnlockItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def WrongTipsTriggerTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestCompleteImgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestUnknownAvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestDetailDesc1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestDetailDesc2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestDetailDesc3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def MajorInvestDetailDesc4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def HiddenInvestImgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def HiddenInvestHeadImgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def HiddenInvestNpcName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def UnlockLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def InvestResultHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def InvestUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideConstData
    def NoOrcheDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideConstDataStart(builder):
    builder.StartObject(15)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestUnlockItemName(builder, majorInvestUnlockItemName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestUnlockItemName), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddWrongTipsTriggerTime(builder, wrongTipsTriggerTime):
    builder.PrependInt32Slot(1, wrongTipsTriggerTime, 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestCompleteImgId(builder, majorInvestCompleteImgId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestCompleteImgId), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestUnknownAvatarId(builder, majorInvestUnknownAvatarId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestUnknownAvatarId), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestDetailDesc1(builder, majorInvestDetailDesc1):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestDetailDesc1), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestDetailDesc2(builder, majorInvestDetailDesc2):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestDetailDesc2), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestDetailDesc3(builder, majorInvestDetailDesc3):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestDetailDesc3), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddMajorInvestDetailDesc4(builder, majorInvestDetailDesc4):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestDetailDesc4), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddHiddenInvestImgId(builder, hiddenInvestImgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenInvestImgId), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddHiddenInvestHeadImgId(builder, hiddenInvestHeadImgId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenInvestHeadImgId), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddHiddenInvestNpcName(builder, hiddenInvestNpcName):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenInvestNpcName), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddUnlockLevelId(builder, unlockLevelId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(unlockLevelId), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddInvestResultHint(builder, investResultHint):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(investResultHint), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddInvestUnlockText(builder, investUnlockText):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(investUnlockText), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataAddNoOrcheDesc(builder, noOrcheDesc):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(noOrcheDesc), 0)

def clz_Torappu_Act29SideData_Act29SideConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act29SideData_Act29SideZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act29SideData_Act29SideZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act29SideData_Act29SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData_Act29SideMusicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData_Act29SideMusicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData_Act29SideMusicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData_Act29SideMusicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData_Act29SideMusicData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideMusicData
    def OrcheId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act29SideData_Act29SideMusicData
    def MusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act29SideData_Act29SideMusicDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act29SideData_Act29SideMusicDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_Act29SideData_Act29SideMusicDataAddOrcheId(builder, orcheId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orcheId), 0)

def clz_Torappu_Act29SideData_Act29SideMusicDataAddMusicId(builder, musicId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(musicId), 0)

def clz_Torappu_Act29SideData_Act29SideMusicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act29SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act29SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act29SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act29SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act29SideData
    def FragDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideFragData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def FragDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def FragDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act29SideData
    def OrcheDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideOrcheData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def OrcheDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def OrcheDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act29SideData
    def ProductGroupDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideProductGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def ProductGroupDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def ProductGroupDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act29SideData
    def ProductDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideProductData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def ProductDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def ProductDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act29SideData
    def FormDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideFormData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def FormDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def FormDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act29SideData
    def InvestResultDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideInvestResultData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def InvestResultDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def InvestResultDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act29SideData
    def InvestDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideInvestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def InvestDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def InvestDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act29SideData
    def MajorInvestIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act29SideData
    def MajorInvestIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def MajorInvestIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act29SideData
    def RareInvestIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act29SideData
    def RareInvestIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def RareInvestIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act29SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData_Act29SideConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData_Act29SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act29SideData
    def MusicDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act29SideData_Act29SideMusicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act29SideData
    def MusicDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act29SideData
    def MusicDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def clz_Torappu_Act29SideDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_Act29SideDataAddFragDataMap(builder, fragDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragDataMap), 0)

def clz_Torappu_Act29SideDataStartFragDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddOrcheDataMap(builder, orcheDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orcheDataMap), 0)

def clz_Torappu_Act29SideDataStartOrcheDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddProductGroupDataMap(builder, productGroupDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(productGroupDataMap), 0)

def clz_Torappu_Act29SideDataStartProductGroupDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddProductDataMap(builder, productDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(productDataMap), 0)

def clz_Torappu_Act29SideDataStartProductDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddFormDataMap(builder, formDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(formDataMap), 0)

def clz_Torappu_Act29SideDataStartFormDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddInvestResultDataMap(builder, investResultDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(investResultDataMap), 0)

def clz_Torappu_Act29SideDataStartInvestResultDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddInvestDataMap(builder, investDataMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(investDataMap), 0)

def clz_Torappu_Act29SideDataStartInvestDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddMajorInvestIdList(builder, majorInvestIdList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(majorInvestIdList), 0)

def clz_Torappu_Act29SideDataStartMajorInvestIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddRareInvestIdList(builder, rareInvestIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(rareInvestIdList), 0)

def clz_Torappu_Act29SideDataStartRareInvestIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act29SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act29SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataAddMusicDataMap(builder, musicDataMap):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(musicDataMap), 0)

def clz_Torappu_Act29SideDataStartMusicDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act29SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act29SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act29SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act29SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act29SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act29SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act29SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act29SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act29SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act29SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act29SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act29SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityYear5GeneralConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityYear5GeneralConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityYear5GeneralConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityYear5GeneralConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityYear5GeneralConstData
    def RewPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityYear5GeneralConstData
    def RewMainDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def RewApDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def RewEndDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def ActPrimaryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def ActEntryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def ActSecondaryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def ActRewardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def MissionArchiveTopicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityYear5GeneralConstData
    def MissionArchiveUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityYear5GeneralConstDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_ActivityYear5GeneralConstDataAddRewPoint(builder, rewPoint):
    builder.PrependInt32Slot(0, rewPoint, 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddRewMainDesc(builder, rewMainDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewMainDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddRewApDesc(builder, rewApDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewApDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddRewEndDesc(builder, rewEndDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewEndDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddActPrimaryDesc(builder, actPrimaryDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actPrimaryDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddActEntryDesc(builder, actEntryDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actEntryDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddActSecondaryDesc(builder, actSecondaryDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(actSecondaryDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddActRewardDesc(builder, actRewardDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actRewardDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddMissionArchiveTopicId(builder, missionArchiveTopicId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(missionArchiveTopicId), 0)

def clz_Torappu_ActivityYear5GeneralConstDataAddMissionArchiveUnlockDesc(builder, missionArchiveUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(missionArchiveUnlockDesc), 0)

def clz_Torappu_ActivityYear5GeneralConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityYear5GeneralUnlimitedApRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData
    def RewardIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityYear5GeneralUnlimitedApRewardDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityYear5GeneralUnlimitedApRewardDataAddRewardIndex(builder, rewardIndex):
    builder.PrependInt32Slot(0, rewardIndex, 0)

def clz_Torappu_ActivityYear5GeneralUnlimitedApRewardDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_ActivityYear5GeneralUnlimitedApRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityYear5GeneralData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityYear5GeneralData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityYear5GeneralData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityYear5GeneralData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityYear5GeneralData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityYear5GeneralConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityYear5GeneralData
    def UnlimitedApRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityYear5GeneralUnlimitedApRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityYear5GeneralData
    def UnlimitedApRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityYear5GeneralData
    def UnlimitedApRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ActivityYear5GeneralDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityYear5GeneralDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActivityYear5GeneralDataAddUnlimitedApRewards(builder, unlimitedApRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlimitedApRewards), 0)

def clz_Torappu_ActivityYear5GeneralDataStartUnlimitedApRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityYear5GeneralDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityYear5GeneralData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityYear5GeneralData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityYear5GeneralData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityYear5GeneralData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityYear5GeneralData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityYear5GeneralData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityYear5GeneralData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityYear5GeneralDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityYear5GeneralDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityYear5GeneralDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityYear5GeneralDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideChallengeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideChallengeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideChallengeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def ChallengeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def ChallengeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def ChallengeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def ChallengePicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def ChallengeIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def OpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def PreposedChallengeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def PassRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def PassRoundScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def RoundIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def RoundIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeData
    def RoundIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_Act35SideData_Act35SideChallengeDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddChallengeId(builder, challengeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(challengeId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddChallengeName(builder, challengeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(challengeName), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddChallengeDesc(builder, challengeDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(challengeDesc), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddChallengePicId(builder, challengePicId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(challengePicId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddChallengeIconId(builder, challengeIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(challengeIconId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddOpenTime(builder, openTime):
    builder.PrependInt64Slot(6, openTime, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddPreposedChallengeId(builder, preposedChallengeId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(preposedChallengeId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddPassRound(builder, passRound):
    builder.PrependInt32Slot(8, passRound, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddPassRoundScore(builder, passRoundScore):
    builder.PrependInt32Slot(9, passRoundScore, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataAddRoundIdList(builder, roundIdList):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(roundIdList), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeDataStartRoundIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideChallengeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideChallengeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideChallengeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideRoundData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideRoundData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideRoundData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideRoundData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def RoundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def ChallengeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def Round(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def RoundPassRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def IsMaterialRandom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def FixedMaterialList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def FixedMaterialListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def FixedMaterialListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act35SideData_Act35SideRoundData
    def PassRoundCoin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35SideRoundDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddRoundId(builder, roundId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(roundId), 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddChallengeId(builder, challengeId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(challengeId), 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddRound(builder, round):
    builder.PrependInt32Slot(2, round, 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddRoundPassRating(builder, roundPassRating):
    builder.PrependInt32Slot(3, roundPassRating, 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddIsMaterialRandom(builder, isMaterialRandom):
    builder.PrependBoolSlot(4, isMaterialRandom, 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddFixedMaterialList(builder, fixedMaterialList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(fixedMaterialList), 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataStartFixedMaterialListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideRoundDataAddPassRoundCoin(builder, passRoundCoin):
    builder.PrependInt32Slot(6, passRoundCoin, 0)

def clz_Torappu_Act35SideData_Act35SideRoundDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideRoundData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideRoundData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideRoundData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideRoundData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideRoundData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideRoundData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideRoundData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideRoundDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideRoundDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideRoundDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideRoundDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideChallengeTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideChallengeTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideChallengeTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def TaskDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def MaterialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def MaterialNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def PassTaskCoin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddTaskDesc(builder, taskDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskDesc), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddMaterialId(builder, materialId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(materialId), 0)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddMaterialNum(builder, materialNum):
    builder.PrependInt32Slot(3, materialNum, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddPassTaskCoin(builder, passTaskCoin):
    builder.PrependInt32Slot(4, passTaskCoin, 0)

def clz_Torappu_Act35SideData_Act35SideChallengeTaskDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideChallengeTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35sideCardMaterialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35sideCardMaterialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35sideCardMaterialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35sideCardMaterialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35sideCardMaterialData
    def MaterialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35sideCardMaterialData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35sideCardMaterialDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act35SideData_Act35sideCardMaterialDataAddMaterialId(builder, materialId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(materialId), 0)

def clz_Torappu_Act35SideData_Act35sideCardMaterialDataAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_Act35SideData_Act35sideCardMaterialDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideCardLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideCardLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideCardLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def CardLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def CardName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def CardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def InputMaterialList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35sideCardMaterialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def InputMaterialListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def InputMaterialListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def OutputMaterialList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35sideCardMaterialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def OutputMaterialListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardLevelData
    def OutputMaterialListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act35SideData_Act35SideCardLevelDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataAddCardLevel(builder, cardLevel):
    builder.PrependInt32Slot(0, cardLevel, 0)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataAddCardName(builder, cardName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cardName), 0)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataAddCardDesc(builder, cardDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cardDesc), 0)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataAddInputMaterialList(builder, inputMaterialList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(inputMaterialList), 0)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataStartInputMaterialListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataAddOutputMaterialList(builder, outputMaterialList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(outputMaterialList), 0)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataStartOutputMaterialListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideCardLevelDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideCardData
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideCardData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardData
    def Rank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardData
    def CardFace(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideCardData
    def CardPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideCardData
    def LevelDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35SideCardLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideCardData
    def LevelDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideCardData
    def LevelDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act35SideData_Act35SideCardDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act35SideData_Act35SideCardDataAddCardId(builder, cardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cardId), 0)

def clz_Torappu_Act35SideData_Act35SideCardDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act35SideData_Act35SideCardDataAddRank(builder, rank):
    builder.PrependInt32Slot(2, rank, 0)

def clz_Torappu_Act35SideData_Act35SideCardDataAddCardFace(builder, cardFace):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cardFace), 0)

def clz_Torappu_Act35SideData_Act35SideCardDataAddCardPic(builder, cardPic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cardPic), 0)

def clz_Torappu_Act35SideData_Act35SideCardDataAddLevelDataList(builder, levelDataList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(levelDataList), 0)

def clz_Torappu_Act35SideData_Act35SideCardDataStartLevelDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideCardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideCardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideCardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideCardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideCardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideCardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideCardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideMaterialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideMaterialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideMaterialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def MaterialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def MaterialIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def MaterialName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideMaterialData
    def MaterialRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35SideMaterialDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act35SideData_Act35SideMaterialDataAddMaterialId(builder, materialId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(materialId), 0)

def clz_Torappu_Act35SideData_Act35SideMaterialDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_Act35SideData_Act35SideMaterialDataAddMaterialIcon(builder, materialIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(materialIcon), 0)

def clz_Torappu_Act35SideData_Act35SideMaterialDataAddMaterialName(builder, materialName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materialName), 0)

def clz_Torappu_Act35SideData_Act35SideMaterialDataAddMaterialRating(builder, materialRating):
    builder.PrependInt32Slot(4, materialRating, 0)

def clz_Torappu_Act35SideData_Act35SideMaterialDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideMaterialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideMaterialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideMaterialDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideMaterialDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideMaterialDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideMaterialDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideDialogueData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideDialogueData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideDialogueData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideDialogueData
    def BgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35SideDialogueDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act35SideData_Act35SideDialogueDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_Act35SideData_Act35SideDialogueDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act35SideData_Act35SideDialogueDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act35SideData_Act35SideDialogueDataAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_Act35SideData_Act35SideDialogueDataAddBgType(builder, bgType):
    builder.PrependInt32Slot(4, bgType, 0)

def clz_Torappu_Act35SideData_Act35SideDialogueDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideDialogueGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideDialogueGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideDialogueGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def DialogDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35SideDialogueData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def DialogDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def DialogDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act35SideData_Act35SideDialogueGroupDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act35SideData_Act35SideDialogueGroupDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_Act35SideData_Act35SideDialogueGroupDataAddDialogDataList(builder, dialogDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dialogDataList), 0)

def clz_Torappu_Act35SideData_Act35SideDialogueGroupDataStartDialogDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideDialogueGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideDialogueGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideConstData
    def CampaignStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def CampaignEnemyCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def MilestoneGrandRewardInfoList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35SideMileStoneGrandRewardInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def MilestoneGrandRewardInfoListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def MilestoneGrandRewardInfoListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def UnlockLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def BirdSpineLowRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def BirdSpineHighRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def CardMaxLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def MaxSlotCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def CardRefreshNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def InitSlotCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def BonusMaterialId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def IntroRoundIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act35SideData_Act35SideConstData
    def IntroRoundIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def IntroRoundIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def ChallengeUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def SlotUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideConstData
    def EstimateRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideConstData
    def CarvingUnlockToastText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act35SideData_Act35SideConstDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_Act35SideData_Act35SideConstDataAddCampaignStageId(builder, campaignStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(campaignStageId), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddCampaignEnemyCnt(builder, campaignEnemyCnt):
    builder.PrependInt32Slot(1, campaignEnemyCnt, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddMilestoneGrandRewardInfoList(builder, milestoneGrandRewardInfoList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneGrandRewardInfoList), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataStartMilestoneGrandRewardInfoListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideConstDataAddUnlockLevelId(builder, unlockLevelId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unlockLevelId), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddBirdSpineLowRate(builder, birdSpineLowRate):
    builder.PrependFloat32Slot(4, birdSpineLowRate, 0.0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddBirdSpineHighRate(builder, birdSpineHighRate):
    builder.PrependFloat32Slot(5, birdSpineHighRate, 0.0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddCardMaxLevel(builder, cardMaxLevel):
    builder.PrependInt32Slot(6, cardMaxLevel, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddMaxSlotCnt(builder, maxSlotCnt):
    builder.PrependInt32Slot(7, maxSlotCnt, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddCardRefreshNum(builder, cardRefreshNum):
    builder.PrependInt32Slot(8, cardRefreshNum, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddInitSlotCnt(builder, initSlotCnt):
    builder.PrependInt32Slot(9, initSlotCnt, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddBonusMaterialId(builder, bonusMaterialId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(bonusMaterialId), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddIntroRoundIdList(builder, introRoundIdList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(introRoundIdList), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataStartIntroRoundIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideData_Act35SideConstDataAddChallengeUnlockText(builder, challengeUnlockText):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(challengeUnlockText), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddSlotUnlockText(builder, slotUnlockText):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(slotUnlockText), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddEstimateRatio(builder, estimateRatio):
    builder.PrependInt32Slot(14, estimateRatio, 0)

def clz_Torappu_Act35SideData_Act35SideConstDataAddCarvingUnlockToastText(builder, carvingUnlockToastText):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(carvingUnlockToastText), 0)

def clz_Torappu_Act35SideData_Act35SideConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideMileStoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideMileStoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideMileStoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideMileStoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideMileStoneData
    def MileStoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideMileStoneData
    def MileStoneLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideMileStoneData
    def NeedPointCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act35SideData_Act35SideMileStoneData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act35SideData_Act35SideMileStoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act35SideData_Act35SideMileStoneDataAddMileStoneId(builder, mileStoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneId), 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneDataAddMileStoneLvl(builder, mileStoneLvl):
    builder.PrependInt32Slot(1, mileStoneLvl, 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneDataAddNeedPointCnt(builder, needPointCnt):
    builder.PrependInt32Slot(2, needPointCnt, 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_Act35SideData_Act35SideMileStoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData_Act35SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData_Act35SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData_Act35SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act35SideData_Act35SideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act35SideData_Act35SideZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act35SideData_Act35SideZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act35SideData_Act35SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act35SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act35SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act35SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act35SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act35SideData
    def ChallengeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideChallengeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def ChallengeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def ChallengeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act35SideData
    def RoundDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideRoundData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def RoundDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def RoundDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act35SideData
    def TaskDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideChallengeTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def TaskDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def TaskDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act35SideData
    def CardDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def CardDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def CardDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act35SideData
    def MaterialDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideMaterialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def MaterialDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def MaterialDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act35SideData
    def DialogueGroupDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideDialogueGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def DialogueGroupDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def DialogueGroupDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act35SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData_Act35SideConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def MileStoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act35SideData_Act35SideMileStoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def MileStoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def MileStoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act35SideData
    def ZoneAdditionDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData_Act35SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act35SideData
    def ZoneAdditionDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act35SideData
    def ZoneAdditionDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_Act35SideDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_Act35SideDataAddChallengeDataMap(builder, challengeDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(challengeDataMap), 0)

def clz_Torappu_Act35SideDataStartChallengeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddRoundDataMap(builder, roundDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(roundDataMap), 0)

def clz_Torappu_Act35SideDataStartRoundDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddTaskDataMap(builder, taskDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(taskDataMap), 0)

def clz_Torappu_Act35SideDataStartTaskDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddCardDataMap(builder, cardDataMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cardDataMap), 0)

def clz_Torappu_Act35SideDataStartCardDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddMaterialDataMap(builder, materialDataMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(materialDataMap), 0)

def clz_Torappu_Act35SideDataStartMaterialDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddDialogueGroupDataMap(builder, dialogueGroupDataMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dialogueGroupDataMap), 0)

def clz_Torappu_Act35SideDataStartDialogueGroupDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act35SideDataAddMileStoneList(builder, mileStoneList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mileStoneList), 0)

def clz_Torappu_Act35SideDataStartMileStoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataAddZoneAdditionDataMap(builder, zoneAdditionDataMap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionDataMap), 0)

def clz_Torappu_Act35SideDataStartZoneAdditionDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act35SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act35SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act35SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act35SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act35SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act35SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act35SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act35SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act35SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act35SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act35SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act35SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakOffenseBossData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakOffenseBossData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakOffenseBossData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakOffenseBossData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakOffenseBossData
    def EnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakOffenseBossData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakOffenseBossData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakOffenseBossData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakOffenseBossData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActVecBreakOffenseBossDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActVecBreakOffenseBossDataAddEnemyId(builder, enemyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyId), 0)

def clz_Torappu_ActVecBreakOffenseBossDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActVecBreakOffenseBossDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActVecBreakOffenseBossDataAddLevel(builder, level):
    builder.PrependInt32Slot(3, level, 0)

def clz_Torappu_ActVecBreakOffenseBossDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ActVecBreakOffenseBossDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakOffenseStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakOffenseStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakOffenseStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakOffenseStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakOffenseStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakOffenseStageData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakOffenseStageData
    def StoryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakOffenseStageData
    def BossData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakOffenseBossData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakOffenseStageData
    def ParticleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakOffenseStageData
    def FirstReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakOffenseStageData
    def CommonReward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActVecBreakOffenseStageDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActVecBreakOffenseStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddStoryDesc(builder, storyDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyDesc), 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddBossData(builder, bossData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bossData), 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddParticleType(builder, particleType):
    builder.PrependInt32Slot(4, particleType, 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddFirstReward(builder, firstReward):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(firstReward), 0)

def clz_Torappu_ActVecBreakOffenseStageDataAddCommonReward(builder, commonReward):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(commonReward), 0)

def clz_Torappu_ActVecBreakOffenseStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActVecBreakOffenseStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActVecBreakOffenseStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActVecBreakOffenseStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActVecBreakOffenseStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActVecBreakOffenseStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActVecBreakOffenseStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakOffenseStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActVecBreakOffenseStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActVecBreakOffenseStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActVecBreakOffenseStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActVecBreakOffenseStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakDefenseStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakDefenseStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakDefenseStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakDefenseStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakDefenseStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakDefenseStageData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakDefenseStageData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakDefenseStageData
    def DefenseCharLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakDefenseStageData
    def BossIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakDefenseStageData
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActVecBreakDefenseStageDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActVecBreakDefenseStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActVecBreakDefenseStageDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActVecBreakDefenseStageDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_ActVecBreakDefenseStageDataAddDefenseCharLimit(builder, defenseCharLimit):
    builder.PrependInt32Slot(3, defenseCharLimit, 0)

def clz_Torappu_ActVecBreakDefenseStageDataAddBossIconId(builder, bossIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bossIconId), 0)

def clz_Torappu_ActVecBreakDefenseStageDataAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_ActVecBreakDefenseStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActVecBreakDefenseStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActVecBreakDefenseStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActVecBreakDefenseStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActVecBreakDefenseStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActVecBreakDefenseStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActVecBreakDefenseStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakDefenseStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActVecBreakDefenseStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActVecBreakDefenseStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActVecBreakDefenseStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActVecBreakDefenseStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakMilestoneItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakMilestoneItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakMilestoneItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakMilestoneItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakMilestoneItemData
    def MilestoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakMilestoneItemData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakMilestoneItemData
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakMilestoneItemData
    def Reward(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakMilestoneItemData
    def AvailTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActVecBreakMilestoneItemDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActVecBreakMilestoneItemDataAddMilestoneId(builder, milestoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneId), 0)

def clz_Torappu_ActVecBreakMilestoneItemDataAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_ActVecBreakMilestoneItemDataAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_ActVecBreakMilestoneItemDataAddReward(builder, reward):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(reward), 0)

def clz_Torappu_ActVecBreakMilestoneItemDataAddAvailTime(builder, availTime):
    builder.PrependInt64Slot(4, availTime, 0)

def clz_Torappu_ActVecBreakMilestoneItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakBattleBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakBattleBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakBattleBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakBattleBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakBattleBuffData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakBattleBuffData
    def OpenTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakBattleBuffData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakBattleBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakBattleBuffData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakBattleBuffData
    def RuneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActVecBreakBattleBuffDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActVecBreakBattleBuffDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_ActVecBreakBattleBuffDataAddOpenTime(builder, openTime):
    builder.PrependInt64Slot(1, openTime, 0)

def clz_Torappu_ActVecBreakBattleBuffDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActVecBreakBattleBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActVecBreakBattleBuffDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ActVecBreakBattleBuffDataAddRuneData(builder, runeData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(runeData), 0)

def clz_Torappu_ActVecBreakBattleBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActVecBreakBattleBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActVecBreakBattleBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActVecBreakBattleBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActVecBreakBattleBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActVecBreakBattleBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActVecBreakBattleBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakBattleBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActVecBreakBattleBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActVecBreakBattleBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActVecBreakBattleBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActVecBreakBattleBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakConstData
    def DefenceDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def MilestoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def MilestoneItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def BossDescTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def DefenseUnlockRequireStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def DefenseUnlockHint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def DefenceRetreatText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def SetDefendDialogText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def DefenceActivateToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def DefenceRetreatToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakConstData
    def OffenseNavLockToastStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActVecBreakConstDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_ActVecBreakConstDataAddDefenceDesc(builder, defenceDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(defenceDesc), 0)

def clz_Torappu_ActVecBreakConstDataAddMilestoneName(builder, milestoneName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneName), 0)

def clz_Torappu_ActVecBreakConstDataAddMilestoneItemId(builder, milestoneItemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneItemId), 0)

def clz_Torappu_ActVecBreakConstDataAddBossDescTitle(builder, bossDescTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bossDescTitle), 0)

def clz_Torappu_ActVecBreakConstDataAddDefenseUnlockRequireStageId(builder, defenseUnlockRequireStageId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(defenseUnlockRequireStageId), 0)

def clz_Torappu_ActVecBreakConstDataAddDefenseUnlockHint(builder, defenseUnlockHint):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defenseUnlockHint), 0)

def clz_Torappu_ActVecBreakConstDataAddDefenceRetreatText(builder, defenceRetreatText):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(defenceRetreatText), 0)

def clz_Torappu_ActVecBreakConstDataAddSetDefendDialogText(builder, setDefendDialogText):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(setDefendDialogText), 0)

def clz_Torappu_ActVecBreakConstDataAddDefenceActivateToast(builder, defenceActivateToast):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(defenceActivateToast), 0)

def clz_Torappu_ActVecBreakConstDataAddDefenceRetreatToast(builder, defenceRetreatToast):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(defenceRetreatToast), 0)

def clz_Torappu_ActVecBreakConstDataAddOffenseNavLockToastStr(builder, offenseNavLockToastStr):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(offenseNavLockToastStr), 0)

def clz_Torappu_ActVecBreakConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakData_ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakData_ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakData_ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakData_ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakData_ZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakData_ZoneData
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActVecBreakData_ZoneData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActVecBreakData_ZoneData
    def IsOffence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_ActVecBreakData_ZoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActVecBreakData_ZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_ActVecBreakData_ZoneDataAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def clz_Torappu_ActVecBreakData_ZoneDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(2, startTs, 0)

def clz_Torappu_ActVecBreakData_ZoneDataAddIsOffence(builder, isOffence):
    builder.PrependBoolSlot(3, isOffence, 0)

def clz_Torappu_ActVecBreakData_ZoneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActVecBreakData_ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActVecBreakData_ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActVecBreakData_ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActVecBreakData_ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActVecBreakData_ZoneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActVecBreakData_ZoneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakData_ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActVecBreakData_ZoneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActVecBreakData_ZoneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActVecBreakData_ZoneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActVecBreakData_ZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakZoneData
    def OffenseZoneDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakData_ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakZoneData
    def OffenseZoneDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakZoneData
    def OffenseZoneDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActVecBreakZoneData
    def DefenseZoneDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakData_ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakZoneData
    def DefenseZoneDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakZoneData
    def DefenseZoneDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ActVecBreakZoneDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActVecBreakZoneDataAddOffenseZoneDict(builder, offenseZoneDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(offenseZoneDict), 0)

def clz_Torappu_ActVecBreakZoneDataStartOffenseZoneDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakZoneDataAddDefenseZoneDict(builder, defenseZoneDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(defenseZoneDict), 0)

def clz_Torappu_ActVecBreakZoneDataStartDefenseZoneDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActVecBreakData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActVecBreakData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActVecBreakData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActVecBreakData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActVecBreakData
    def OffenseStageDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakOffenseStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakData
    def OffenseStageDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakData
    def OffenseStageDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActVecBreakData
    def DefenseStageDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakDefenseStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakData
    def DefenseStageDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakData
    def DefenseStageDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActVecBreakData
    def MilestoneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActVecBreakMilestoneItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakData
    def MilestoneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakData
    def MilestoneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActVecBreakData
    def BattleBuffDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakBattleBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakData
    def BattleBuffDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActVecBreakData
    def BattleBuffDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActVecBreakData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActVecBreakData
    def ActZoneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActVecBreakDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActVecBreakDataAddOffenseStageDict(builder, offenseStageDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(offenseStageDict), 0)

def clz_Torappu_ActVecBreakDataStartOffenseStageDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakDataAddDefenseStageDict(builder, defenseStageDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(defenseStageDict), 0)

def clz_Torappu_ActVecBreakDataStartDefenseStageDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakDataAddMilestoneList(builder, milestoneList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneList), 0)

def clz_Torappu_ActVecBreakDataStartMilestoneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakDataAddBattleBuffDict(builder, battleBuffDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(battleBuffDict), 0)

def clz_Torappu_ActVecBreakDataStartBattleBuffDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActVecBreakDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ActVecBreakDataAddActZoneData(builder, actZoneData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actZoneData), 0)

def clz_Torappu_ActVecBreakDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActVecBreakData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActVecBreakData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActVecBreakData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActVecBreakData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActVecBreakData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActVecBreakData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActVecBreakData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActVecBreakDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActVecBreakDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActVecBreakDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActVecBreakDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act36SideData_Act36SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act36SideData_Act36SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act36SideData_Act36SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def ZoneIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddZoneIconId(builder, zoneIconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIconId), 0)

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddDisplayTime(builder, displayTime):
    builder.PrependInt64Slot(3, displayTime, 0)

def clz_Torappu_Act36SideData_Act36SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act36SideData_Act36SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act36SideData_Act36SideEnemyHandbookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act36SideData_Act36SideEnemyHandbookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act36SideData_Act36SideEnemyHandbookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def EnemyHandbookId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def SpriteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def FoodTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def FoodAmountId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddEnemyHandbookId(builder, enemyHandbookId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyHandbookId), 0)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddSpriteId(builder, spriteId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(spriteId), 0)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddFoodTypeId(builder, foodTypeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(foodTypeId), 0)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddFoodAmountId(builder, foodAmountId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(foodAmountId), 0)

def clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act36SideData_Act36SideEnemyHandbookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act36SideData_Act36SideTokenHandbookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act36SideData_Act36SideTokenHandbookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act36SideData_Act36SideTokenHandbookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def TokenHandbookId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def SpriteId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def TokenAbility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def TokenDescrption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddTokenHandbookId(builder, tokenHandbookId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tokenHandbookId), 0)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddSpriteId(builder, spriteId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(spriteId), 0)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddTokenAbility(builder, tokenAbility):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenAbility), 0)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddTokenDescrption(builder, tokenDescrption):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tokenDescrption), 0)

def clz_Torappu_Act36SideData_Act36SideTokenHandbookDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act36SideData_Act36SideTokenHandbookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act36SideData_Act36SideConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act36SideData_Act36SideConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act36SideData_Act36SideConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act36SideData_Act36SideConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act36SideData_Act36SideConstData
    def RewardFailed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act36SideData_Act36SideConstData
    def RewardReceiveNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act36SideData_Act36SideConstDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act36SideData_Act36SideConstDataAddRewardFailed(builder, rewardFailed):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardFailed), 0)

def clz_Torappu_Act36SideData_Act36SideConstDataAddRewardReceiveNumber(builder, rewardReceiveNumber):
    builder.PrependInt32Slot(1, rewardReceiveNumber, 0)

def clz_Torappu_Act36SideData_Act36SideConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act36SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act36SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act36SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act36SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act36SideData
    def ZoneAdditionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act36SideData_Act36SideZoneAdditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act36SideData
    def ZoneAdditionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act36SideData
    def ZoneAdditionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act36SideData
    def EnemyHandbookData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act36SideData_Act36SideEnemyHandbookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act36SideData
    def EnemyHandbookDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act36SideData
    def EnemyHandbookDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act36SideData
    def TokenHandbookData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act36SideData_Act36SideTokenHandbookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act36SideData
    def TokenHandbookDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act36SideData
    def TokenHandbookDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act36SideData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act36SideData_Act36SideConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_Act36SideDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act36SideDataAddZoneAdditionData(builder, zoneAdditionData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneAdditionData), 0)

def clz_Torappu_Act36SideDataStartZoneAdditionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act36SideDataAddEnemyHandbookData(builder, enemyHandbookData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enemyHandbookData), 0)

def clz_Torappu_Act36SideDataStartEnemyHandbookDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act36SideDataAddTokenHandbookData(builder, tokenHandbookData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tokenHandbookData), 0)

def clz_Torappu_Act36SideDataStartTokenHandbookDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act36SideDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act36SideDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act36SideData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act36SideData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act36SideData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act36SideData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act36SideData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act36SideData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act36SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act36SideDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act36SideDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act36SideDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act36SideDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityDetailTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityDetailTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityDetailTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Default(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_DefaultFirstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def DefaultLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def DefaultIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinOnly(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_DefaultCheckInData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinOnlyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinOnlyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinAllPlayer(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_AllPlayerCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinAllPlayerLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinAllPlayerIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinVs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_VersusCheckInData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinVsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CheckinVsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct3D0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act3D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct3D0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct3D0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct4D0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct4D0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct4D0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D1(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5D1Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D1Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct5D1IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Collection(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityCollectionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CollectionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def CollectionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct9D0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act9D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct9D0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct9D0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct12Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act12SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct12SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct12SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct13Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act13SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct13SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct13SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct17Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act17sideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct17SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct17SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct20Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act20SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct20SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct20SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct21Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act21SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct21SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct21SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def LoginOnly(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityLoginData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def LoginOnlyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def LoginOnlyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def SwitchOnly(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivitySwitchCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def SwitchOnlyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def SwitchOnlyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Ministory(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMiniStoryData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MinistoryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MinistoryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Roguelike(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityRoguelikeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def RoguelikeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def RoguelikeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MultiplayVerify2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMultiplayVerify2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MultiplayVerify2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MultiplayVerify2IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Interlock(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityInterlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def InterlockLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def InterlockIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def BossRush(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityBossRushData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def BossRushLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def BossRushIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def FloatParade(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityFloatParadeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def FloatParadeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def FloatParadeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MainBuff(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityMainlineBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MainBuffLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def MainBuffIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct24Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act24SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct24SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct24SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct25Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act25SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct25SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct25SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct27Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act27SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct27SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct27SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct42D0(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act42D0Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct42D0Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct42D0IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct29Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act29SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct29SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct29SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Year5General(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityYear5GeneralData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Year5GeneralLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def Year5GeneralIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct35Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act35SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct35SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct35SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def VecBreak(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActVecBreakData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def VecBreakLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def VecBreakIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct36Side(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act36SideData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct36SideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityDetailTable
    def TypeAct36SideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

def clz_Torappu_ActivityTable_ActivityDetailTableStart(builder):
    builder.StartObject(33)

def clz_Torappu_ActivityTable_ActivityDetailTableAddDefault(builder, default):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(default), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartDefaultVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddCheckinOnly(builder, checkinOnly):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checkinOnly), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartCheckinOnlyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddCheckinAllPlayer(builder, checkinAllPlayer):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkinAllPlayer), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartCheckinAllPlayerVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddCheckinVs(builder, checkinVs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(checkinVs), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartCheckinVsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct3D0(builder, typeAct3D0):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct3D0), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct3D0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct4D0(builder, typeAct4D0):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct4D0), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct4D0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct5D0(builder, typeAct5D0):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct5D0), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct5D0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct5D1(builder, typeAct5D1):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct5D1), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct5D1Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddCollection(builder, collection):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collection), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartCollectionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct9D0(builder, typeAct9D0):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct9D0), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct9D0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct12Side(builder, typeAct12Side):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct12Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct12SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct13Side(builder, typeAct13Side):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct13Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct13SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct17Side(builder, typeAct17Side):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct17Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct17SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct20Side(builder, typeAct20Side):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct20Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct20SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct21Side(builder, typeAct21Side):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct21Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct21SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddLoginOnly(builder, loginOnly):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(loginOnly), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartLoginOnlyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddSwitchOnly(builder, switchOnly):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(switchOnly), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartSwitchOnlyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddMinistory(builder, ministory):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(ministory), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartMinistoryVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddRoguelike(builder, roguelike):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(roguelike), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartRoguelikeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddMultiplayVerify2(builder, multiplayVerify2):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(multiplayVerify2), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartMultiplayVerify2Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddInterlock(builder, interlock):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(interlock), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartInterlockVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddBossRush(builder, bossRush):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(bossRush), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartBossRushVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddFloatParade(builder, floatParade):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(floatParade), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartFloatParadeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddMainBuff(builder, mainBuff):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(mainBuff), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartMainBuffVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct24Side(builder, typeAct24Side):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct24Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct24SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct25Side(builder, typeAct25Side):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct25Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct25SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct27Side(builder, typeAct27Side):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct27Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct27SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct42D0(builder, typeAct42D0):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct42D0), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct42D0Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct29Side(builder, typeAct29Side):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct29Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct29SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddYear5General(builder, year5General):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(year5General), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartYear5GeneralVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct35Side(builder, typeAct35Side):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct35Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct35SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddVecBreak(builder, vecBreak):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(vecBreak), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartVecBreakVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableAddTypeAct36Side(builder, typeAct36Side):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(typeAct36Side), 0)

def clz_Torappu_ActivityTable_ActivityDetailTableStartTypeAct36SideVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityDetailTableEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData
    def PeriodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodDataAddPeriodId(builder, periodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(periodId), 0)

def clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(1, startTs, 0)

def clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(2, endTs, 0)

def clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActMainlineBpExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActMainlineBpExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActMainlineBpExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActMainlineBpExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActMainlineBpExtraData
    def PeriodDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActMainlineBpExtraData_ActMainlineBpExtraPeriodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActMainlineBpExtraData
    def PeriodDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActMainlineBpExtraData
    def PeriodDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActMainlineBpExtraDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActMainlineBpExtraDataAddPeriodDataList(builder, periodDataList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(periodDataList), 0)

def clz_Torappu_ActMainlineBpExtraDataStartPeriodDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActMainlineBpExtraDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActMainlineBpExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActMainlineBpExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActMainlineBpExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActMainlineBpExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActMainlineBpExtraData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActMainlineBpExtraData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActMainlineBpExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActMainlineBpExtraDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActMainlineBpExtraDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActMainlineBpExtraDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActMainlineBpExtraDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityExtraData
    def MainlineBp(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActMainlineBpExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityExtraData
    def MainlineBpLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityExtraData
    def MainlineBpIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityTable_ActivityExtraDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityTable_ActivityExtraDataAddMainlineBp(builder, mainlineBp):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineBp), 0)

def clz_Torappu_ActivityTable_ActivityExtraDataStartMainlineBpVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityExtraDataEnd(builder):
    return builder.EndObject()



class dict__string__list_long(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_long()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_long(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_long
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_long
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_long
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # dict__string__list_long
    def ValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # dict__string__list_long
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_long
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_longStart(builder):
    builder.StartObject(2)

def dict__string__list_longAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_longAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_longStartValueVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def dict__string__list_longEnd(builder):
    return builder.EndObject()



class hg__internal__JObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hg__internal__JObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshg__internal__JObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # hg__internal__JObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hg__internal__JObject
    def Base64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def hg__internal__JObjectStart(builder):
    builder.StartObject(1)

def hg__internal__JObjectAddBase64(builder, base64):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(base64), 0)

def hg__internal__JObjectEnd(builder):
    return builder.EndObject()



class dict__string__hg__internal__JObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__hg__internal__JObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__hg__internal__JObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__hg__internal__JObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__hg__internal__JObject
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__hg__internal__JObject
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__JObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__hg__internal__JObjectStart(builder):
    builder.StartObject(2)

def dict__string__hg__internal__JObjectAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__hg__internal__JObjectAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__hg__internal__JObjectEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_StageData_DisplayDetailRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_StageData_DisplayDetailRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_StageData_DisplayDetailRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_StageData_DisplayDetailRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_StageData_DisplayDetailRewards
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_StageData_DisplayDetailRewards
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_StageData_DisplayDetailRewards
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_StageData_DisplayDetailRewards
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_StageData_DisplayDetailRewardsStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_StageData_DisplayDetailRewardsAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_StageData_DisplayDetailRewardsAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_StageData_DisplayDetailRewardsStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_StageData_DisplayDetailRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityStageRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityStageRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityStageRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityStageRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityStageRewardData
    def StageRewardsDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_StageData_DisplayDetailRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityStageRewardData
    def StageRewardsDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityStageRewardData
    def StageRewardsDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityStageRewardDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityStageRewardDataAddStageRewardsDict(builder, stageRewardsDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageRewardsDict), 0)

def clz_Torappu_ActivityStageRewardDataStartStageRewardsDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityStageRewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityStageRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityStageRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityStageRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityStageRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityStageRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityStageRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityStageRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityStageRewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityStageRewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityStageRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityStageRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityThemeData_TimeNode(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityThemeData_TimeNode()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityThemeData_TimeNode(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityThemeData_TimeNode
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityThemeData_TimeNode
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityThemeData_TimeNode
    def Ts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityThemeData_TimeNodeStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityThemeData_TimeNodeAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_ActivityThemeData_TimeNodeAddTs(builder, ts):
    builder.PrependInt64Slot(1, ts, 0)

def clz_Torappu_ActivityThemeData_TimeNodeEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityThemeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityThemeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityThemeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityThemeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityThemeData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityThemeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityThemeData
    def FuncId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityThemeData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityThemeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityThemeData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityThemeData
    def TimeNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityThemeData_TimeNode()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityThemeData
    def TimeNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityThemeData
    def TimeNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActivityThemeData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActivityThemeDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityThemeDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityThemeDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ActivityThemeDataAddFuncId(builder, funcId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(funcId), 0)

def clz_Torappu_ActivityThemeDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def clz_Torappu_ActivityThemeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_ActivityThemeDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_ActivityThemeDataAddTimeNodes(builder, timeNodes):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(timeNodes), 0)

def clz_Torappu_ActivityThemeDataStartTimeNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityThemeDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(7, startTs, 0)

def clz_Torappu_ActivityThemeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_StageData_ConditionDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StageData_ConditionDesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StageData_ConditionDesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StageData_ConditionDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StageData_ConditionDesc
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_StageData_ConditionDesc
    def CompleteState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_StageData_ConditionDescStart(builder):
    builder.StartObject(2)

def clz_Torappu_StageData_ConditionDescAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_StageData_ConditionDescAddCompleteState(builder, completeState):
    builder.PrependInt32Slot(1, completeState, 0)

def clz_Torappu_StageData_ConditionDescEnd(builder):
    return builder.EndObject()



class clz_Torappu_AprilFoolStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AprilFoolStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AprilFoolStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AprilFoolStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AprilFoolStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolStageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolStageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolStageData
    def AppearanceStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AprilFoolStageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolStageData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AprilFoolStageData
    def UnlockCondition(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_StageData_ConditionDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolStageData
    def UnlockConditionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AprilFoolStageData
    def UnlockConditionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_AprilFoolStageData
    def StageDropInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolStageData
    def StageDropInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AprilFoolStageData
    def StageDropInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_AprilFoolStageDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_AprilFoolStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_AprilFoolStageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_AprilFoolStageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_AprilFoolStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_AprilFoolStageDataAddAppearanceStyle(builder, appearanceStyle):
    builder.PrependInt32Slot(4, appearanceStyle, 0)

def clz_Torappu_AprilFoolStageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_AprilFoolStageDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(6, difficulty, 0)

def clz_Torappu_AprilFoolStageDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_AprilFoolStageDataStartUnlockConditionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AprilFoolStageDataAddStageDropInfo(builder, stageDropInfo):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(stageDropInfo), 0)

def clz_Torappu_AprilFoolStageDataStartStageDropInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AprilFoolStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_AprilFoolStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_AprilFoolStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_AprilFoolStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_AprilFoolStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_AprilFoolStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_AprilFoolStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AprilFoolStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_AprilFoolStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_AprilFoolStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_AprilFoolStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_AprilFoolStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AprilFoolScoreData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AprilFoolScoreData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AprilFoolScoreData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AprilFoolScoreData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AprilFoolScoreData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolScoreData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AprilFoolScoreData
    def PlayerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolScoreData
    def PlayerScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_AprilFoolScoreDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_AprilFoolScoreDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_AprilFoolScoreDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_AprilFoolScoreDataAddPlayerName(builder, playerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(playerName), 0)

def clz_Torappu_AprilFoolScoreDataAddPlayerScore(builder, playerScore):
    builder.PrependInt64Slot(3, playerScore, 0)

def clz_Torappu_AprilFoolScoreDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_AprilFoolScoreData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_AprilFoolScoreData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_AprilFoolScoreData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_AprilFoolScoreData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_AprilFoolScoreData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_AprilFoolScoreData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_AprilFoolScoreData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_AprilFoolScoreData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_AprilFoolScoreData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_AprilFoolScoreDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_AprilFoolScoreDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_AprilFoolScoreDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_AprilFoolScoreDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_AprilFoolScoreDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AprilFoolConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AprilFoolConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AprilFoolConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AprilFoolConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AprilFoolConst
    def BattleFinishLoseDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolConst
    def KillEnemyDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolConst
    def KillBossDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_AprilFoolConst
    def TotalTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_AprilFoolConstStart(builder):
    builder.StartObject(4)

def clz_Torappu_AprilFoolConstAddBattleFinishLoseDes(builder, battleFinishLoseDes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battleFinishLoseDes), 0)

def clz_Torappu_AprilFoolConstAddKillEnemyDes(builder, killEnemyDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(killEnemyDes), 0)

def clz_Torappu_AprilFoolConstAddKillBossDes(builder, killBossDes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(killBossDes), 0)

def clz_Torappu_AprilFoolConstAddTotalTime(builder, totalTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(totalTime), 0)

def clz_Torappu_AprilFoolConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funPerformGroupInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funPerformGroupInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funPerformGroupInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funPerformGroupInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funPerformGroupInfo
    def PerformGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformGroupInfo
    def PerformIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funPerformGroupInfo
    def PerformIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funPerformGroupInfo
    def PerformIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act4funPerformGroupInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act4funPerformGroupInfoAddPerformGroupId(builder, performGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(performGroupId), 0)

def clz_Torappu_Act4funPerformGroupInfoAddPerformIds(builder, performIds):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(performIds), 0)

def clz_Torappu_Act4funPerformGroupInfoStartPerformIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funPerformGroupInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funPerformGroupInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funPerformGroupInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funPerformGroupInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funPerformGroupInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funPerformGroupInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funPerformGroupInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funPerformGroupInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funPerformGroupInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funPerformGroupInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funPerformGroupInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funPerformGroupInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funPerformWordData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funPerformWordData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funPerformWordData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funPerformWordData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funPerformWordData
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformWordData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformWordData
    def BackgroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funPerformWordDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act4funPerformWordDataAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def clz_Torappu_Act4funPerformWordDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_Act4funPerformWordDataAddBackgroundId(builder, backgroundId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundId), 0)

def clz_Torappu_Act4funPerformWordDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funPerformInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funPerformInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funPerformInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funPerformInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funPerformInfo
    def PerformId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformInfo
    def PerformFinishedPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformInfo
    def FixedCmpGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funPerformInfo
    def CmpGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funPerformInfo
    def CmpGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funPerformInfo
    def CmpGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act4funPerformInfo
    def Words(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4funPerformWordData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funPerformInfo
    def WordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funPerformInfo
    def WordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act4funPerformInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4funPerformInfoAddPerformId(builder, performId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(performId), 0)

def clz_Torappu_Act4funPerformInfoAddPerformFinishedPicId(builder, performFinishedPicId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(performFinishedPicId), 0)

def clz_Torappu_Act4funPerformInfoAddFixedCmpGroup(builder, fixedCmpGroup):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fixedCmpGroup), 0)

def clz_Torappu_Act4funPerformInfoAddCmpGroups(builder, cmpGroups):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cmpGroups), 0)

def clz_Torappu_Act4funPerformInfoStartCmpGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funPerformInfoAddWords(builder, words):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(words), 0)

def clz_Torappu_Act4funPerformInfoStartWordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funPerformInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funPerformInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funPerformInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funPerformInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funPerformInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funPerformInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funPerformInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funPerformInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funPerformInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funPerformInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funPerformInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funPerformInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funLiveMatEffectInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funLiveMatEffectInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funLiveMatEffectInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funLiveMatEffectInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funLiveMatEffectInfo
    def LiveMatEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatEffectInfo
    def ValueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatEffectInfo
    def PerformGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funLiveMatEffectInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act4funLiveMatEffectInfoAddLiveMatEffectId(builder, liveMatEffectId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(liveMatEffectId), 0)

def clz_Torappu_Act4funLiveMatEffectInfoAddValueId(builder, valueId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(valueId), 0)

def clz_Torappu_Act4funLiveMatEffectInfoAddPerformGroup(builder, performGroup):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(performGroup), 0)

def clz_Torappu_Act4funLiveMatEffectInfoEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funLiveMatEffectInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funLiveMatInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funLiveMatInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funLiveMatInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funLiveMatInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funLiveMatInfoData
    def LiveMatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def TagTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def EmojiIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def SelectedPerformId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def EffectInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_Act4funStageAttributeType__clz_Torappu_Act4funLiveMatEffectInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funLiveMatInfoData
    def EffectInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funLiveMatInfoData
    def EffectInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_Act4funLiveMatInfoDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act4funLiveMatInfoDataAddLiveMatId(builder, liveMatId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(liveMatId), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddTagTxt(builder, tagTxt):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tagTxt), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddEmojiIcon(builder, emojiIcon):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(emojiIcon), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddSelectedPerformId(builder, selectedPerformId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(selectedPerformId), 0)

def clz_Torappu_Act4funLiveMatInfoDataAddEffectInfos(builder, effectInfos):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(effectInfos), 0)

def clz_Torappu_Act4funLiveMatInfoDataStartEffectInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funLiveMatInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funLiveMatInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funLiveMatInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funLiveMatInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funLiveMatInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funLiveMatInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funLiveMatInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funLiveMatInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funLiveMatInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funLiveMatInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funLiveMatInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funLiveMatInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funSpLiveMatInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funSpLiveMatInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funSpLiveMatInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funSpLiveMatInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funSpLiveMatInfoData
    def SpLiveMatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def SpLiveEveId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def TagTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def EmojiIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def AccordingPerformId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def SelectedPerformId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def ValueEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSpLiveMatInfoData
    def AccordingSuperChatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funSpLiveMatInfoDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_Act4funSpLiveMatInfoDataAddSpLiveMatId(builder, spLiveMatId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(spLiveMatId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddSpLiveEveId(builder, spLiveEveId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(spLiveEveId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddTagTxt(builder, tagTxt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tagTxt), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddEmojiIcon(builder, emojiIcon):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(emojiIcon), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddAccordingPerformId(builder, accordingPerformId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(accordingPerformId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddSelectedPerformId(builder, selectedPerformId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(selectedPerformId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddValueEffectId(builder, valueEffectId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(valueEffectId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataAddAccordingSuperChatId(builder, accordingSuperChatId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(accordingSuperChatId), 0)

def clz_Torappu_Act4funSpLiveMatInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funSpLiveMatInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funSpLiveMatInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funSpLiveMatInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funSpLiveMatInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funSpLiveMatInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funSpLiveMatInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funSpLiveMatInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funSpLiveMatInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funSpLiveMatInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funSpLiveMatInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funSpLiveMatInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funValueEffectInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funValueEffectInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funValueEffectInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funValueEffectInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funValueEffectInfoData
    def ValueEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funValueEffectInfoData
    def EffectParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funValueEffectInfoData
    def EffectParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funValueEffectInfoData
    def EffectParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act4funValueEffectInfoDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act4funValueEffectInfoDataAddValueEffectId(builder, valueEffectId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(valueEffectId), 0)

def clz_Torappu_Act4funValueEffectInfoDataAddEffectParams(builder, effectParams):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(effectParams), 0)

def clz_Torappu_Act4funValueEffectInfoDataStartEffectParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funValueEffectInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funValueEffectInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funValueEffectInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funValueEffectInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funValueEffectInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funValueEffectInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funValueEffectInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funValueEffectInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funValueEffectInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funValueEffectInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funValueEffectInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funValueEffectInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funLiveValueInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funLiveValueInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funLiveValueInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funLiveValueInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funLiveValueInfoData
    def LiveValueId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def HighEndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def LowEndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def IncreaseToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funLiveValueInfoData
    def DecreaseToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funLiveValueInfoDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_Act4funLiveValueInfoDataAddLiveValueId(builder, liveValueId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(liveValueId), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddHighEndingId(builder, highEndingId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(highEndingId), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddLowEndingId(builder, lowEndingId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(lowEndingId), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddIncreaseToastTxt(builder, increaseToastTxt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(increaseToastTxt), 0)

def clz_Torappu_Act4funLiveValueInfoDataAddDecreaseToastTxt(builder, decreaseToastTxt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(decreaseToastTxt), 0)

def clz_Torappu_Act4funLiveValueInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funLiveValueInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funLiveValueInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funLiveValueInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funLiveValueInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funLiveValueInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funLiveValueInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funLiveValueInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funLiveValueInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funLiveValueInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funLiveValueInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funLiveValueInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funSuperChatInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funSuperChatInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funSuperChatInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funSuperChatInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funSuperChatInfo
    def SuperChatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSuperChatInfo
    def ChatType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funSuperChatInfo
    def UserName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSuperChatInfo
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSuperChatInfo
    def ValueEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSuperChatInfo
    def PerformId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funSuperChatInfo
    def SuperChatTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funSuperChatInfoStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act4funSuperChatInfoAddSuperChatId(builder, superChatId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(superChatId), 0)

def clz_Torappu_Act4funSuperChatInfoAddChatType(builder, chatType):
    builder.PrependInt32Slot(1, chatType, 0)

def clz_Torappu_Act4funSuperChatInfoAddUserName(builder, userName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(userName), 0)

def clz_Torappu_Act4funSuperChatInfoAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act4funSuperChatInfoAddValueEffectId(builder, valueEffectId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(valueEffectId), 0)

def clz_Torappu_Act4funSuperChatInfoAddPerformId(builder, performId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(performId), 0)

def clz_Torappu_Act4funSuperChatInfoAddSuperChatTxt(builder, superChatTxt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(superChatTxt), 0)

def clz_Torappu_Act4funSuperChatInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funSuperChatInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funSuperChatInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funSuperChatInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funSuperChatInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funSuperChatInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funSuperChatInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funSuperChatInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funSuperChatInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funSuperChatInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funSuperChatInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funSuperChatInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funCmtInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funCmtInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funCmtInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funCmtInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funCmtInfo
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funCmtInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funCmtInfo
    def CmtTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funCmtInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act4funCmtInfoAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_Act4funCmtInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act4funCmtInfoAddCmtTxt(builder, cmtTxt):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cmtTxt), 0)

def clz_Torappu_Act4funCmtInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funCmtGroupInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funCmtGroupInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funCmtGroupInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funCmtGroupInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funCmtGroupInfo
    def CmtGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funCmtGroupInfo
    def CmtList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act4funCmtInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funCmtGroupInfo
    def CmtListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funCmtGroupInfo
    def CmtListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Act4funCmtGroupInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act4funCmtGroupInfoAddCmtGroupId(builder, cmtGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cmtGroupId), 0)

def clz_Torappu_Act4funCmtGroupInfoAddCmtList(builder, cmtList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cmtList), 0)

def clz_Torappu_Act4funCmtGroupInfoStartCmtListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funCmtGroupInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funCmtGroupInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funCmtGroupInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funCmtGroupInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funCmtGroupInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funCmtGroupInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funCmtGroupInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funCmtGroupInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funCmtGroupInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funCmtGroupInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funCmtGroupInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funCmtGroupInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funEndingInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funEndingInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funEndingInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funEndingInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funEndingInfo
    def EndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funEndingInfo
    def EndingAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funEndingInfo
    def EndingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funEndingInfo
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funEndingInfo
    def IsGoodEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act4funEndingInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4funEndingInfoAddEndingId(builder, endingId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endingId), 0)

def clz_Torappu_Act4funEndingInfoAddEndingAvg(builder, endingAvg):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endingAvg), 0)

def clz_Torappu_Act4funEndingInfoAddEndingDesc(builder, endingDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endingDesc), 0)

def clz_Torappu_Act4funEndingInfoAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act4funEndingInfoAddIsGoodEnding(builder, isGoodEnding):
    builder.PrependBoolSlot(4, isGoodEnding, 0)

def clz_Torappu_Act4funEndingInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funEndingInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funEndingInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funEndingInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funEndingInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funEndingInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funEndingInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funEndingInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funEndingInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funEndingInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funEndingInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funEndingInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funTokenInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funTokenInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funTokenInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funTokenInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funTokenInfoData
    def TokenLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funTokenInfoData
    def LevelDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funTokenInfoData
    def SkillDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funTokenInfoData
    def TokenLevelNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funTokenInfoData
    def LevelIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funTokenInfoDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4funTokenInfoDataAddTokenLevelId(builder, tokenLevelId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tokenLevelId), 0)

def clz_Torappu_Act4funTokenInfoDataAddLevelDesc(builder, levelDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelDesc), 0)

def clz_Torappu_Act4funTokenInfoDataAddSkillDesc(builder, skillDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(skillDesc), 0)

def clz_Torappu_Act4funTokenInfoDataAddTokenLevelNum(builder, tokenLevelNum):
    builder.PrependInt32Slot(3, tokenLevelNum, 0)

def clz_Torappu_Act4funTokenInfoDataAddLevelIconId(builder, levelIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(levelIconId), 0)

def clz_Torappu_Act4funTokenInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funTokenInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funTokenInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funTokenInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funTokenInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funTokenInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funTokenInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funTokenInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funTokenInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funTokenInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funTokenInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funTokenInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funMissionData
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funMissionData
    def MissionDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funMissionData
    def RewardIconIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funMissionData
    def RewardIconIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funMissionData
    def RewardIconIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act4funMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_Act4funMissionDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_Act4funMissionDataAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_Act4funMissionDataAddSortId(builder, sortId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sortId), 0)

def clz_Torappu_Act4funMissionDataAddMissionDes(builder, missionDes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(missionDes), 0)

def clz_Torappu_Act4funMissionDataAddRewardIconIds(builder, rewardIconIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardIconIds), 0)

def clz_Torappu_Act4funMissionDataStartRewardIconIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_Act4funMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funConst
    def LiveMatAmtLowerLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funConst
    def LiveTurnUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funConst
    def SuperChatCountDownNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funConst
    def BadEndingPerformEffectTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def PerformEffectTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def DefaultPerformPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def DefaultTxtBackground(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def OpeningPerformGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def ForgetPerformGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def RunPerformGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def LiveMatDefaultUserIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def LiveMatAttributeIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def LiveMatAttribIconDiffNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funConst
    def LiveValueAbsLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act4funConst
    def CmtAppearTimeLowerLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act4funConst
    def CmtAppearTimeUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act4funConst
    def SubtitleIntervalTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act4funConst
    def MainPageEventDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def SpStageEndingTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def NoLiveEndingTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def NotEnoughEndingTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def EnoughEndingTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def MainPagePersonal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def MainPageJobDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def EndingPageConfirmTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def RunConfirmTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def MainPageDiamondMissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def ReconnectConfirmTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def StudyStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def GoodEndingToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def TokenLevelUpToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def StudyStageToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def MatNotEnoughToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funConst
    def FormalLevelUnlockToastTxt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funConstStart(builder):
    builder.StartObject(34)

def clz_Torappu_Act4funConstAddLiveMatAmtLowerLimit(builder, liveMatAmtLowerLimit):
    builder.PrependInt32Slot(0, liveMatAmtLowerLimit, 0)

def clz_Torappu_Act4funConstAddLiveTurnUpperLimit(builder, liveTurnUpperLimit):
    builder.PrependInt32Slot(1, liveTurnUpperLimit, 0)

def clz_Torappu_Act4funConstAddSuperChatCountDownNum(builder, superChatCountDownNum):
    builder.PrependInt32Slot(2, superChatCountDownNum, 0)

def clz_Torappu_Act4funConstAddBadEndingPerformEffectTitle(builder, badEndingPerformEffectTitle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(badEndingPerformEffectTitle), 0)

def clz_Torappu_Act4funConstAddPerformEffectTitle(builder, performEffectTitle):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(performEffectTitle), 0)

def clz_Torappu_Act4funConstAddDefaultPerformPicId(builder, defaultPerformPicId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(defaultPerformPicId), 0)

def clz_Torappu_Act4funConstAddDefaultTxtBackground(builder, defaultTxtBackground):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(defaultTxtBackground), 0)

def clz_Torappu_Act4funConstAddOpeningPerformGroup(builder, openingPerformGroup):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(openingPerformGroup), 0)

def clz_Torappu_Act4funConstAddForgetPerformGroup(builder, forgetPerformGroup):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(forgetPerformGroup), 0)

def clz_Torappu_Act4funConstAddRunPerformGroup(builder, runPerformGroup):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(runPerformGroup), 0)

def clz_Torappu_Act4funConstAddLiveMatDefaultUserIcon(builder, liveMatDefaultUserIcon):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(liveMatDefaultUserIcon), 0)

def clz_Torappu_Act4funConstAddLiveMatAttributeIcon(builder, liveMatAttributeIcon):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(liveMatAttributeIcon), 0)

def clz_Torappu_Act4funConstAddLiveMatAttribIconDiffNum(builder, liveMatAttribIconDiffNum):
    builder.PrependInt32Slot(12, liveMatAttribIconDiffNum, 0)

def clz_Torappu_Act4funConstAddLiveValueAbsLimit(builder, liveValueAbsLimit):
    builder.PrependInt32Slot(13, liveValueAbsLimit, 0)

def clz_Torappu_Act4funConstAddCmtAppearTimeLowerLimit(builder, cmtAppearTimeLowerLimit):
    builder.PrependFloat32Slot(14, cmtAppearTimeLowerLimit, 0.0)

def clz_Torappu_Act4funConstAddCmtAppearTimeUpperLimit(builder, cmtAppearTimeUpperLimit):
    builder.PrependFloat32Slot(15, cmtAppearTimeUpperLimit, 0.0)

def clz_Torappu_Act4funConstAddSubtitleIntervalTime(builder, subtitleIntervalTime):
    builder.PrependFloat32Slot(16, subtitleIntervalTime, 0.0)

def clz_Torappu_Act4funConstAddMainPageEventDes(builder, mainPageEventDes):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(mainPageEventDes), 0)

def clz_Torappu_Act4funConstAddSpStageEndingTip(builder, spStageEndingTip):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(spStageEndingTip), 0)

def clz_Torappu_Act4funConstAddNoLiveEndingTip(builder, noLiveEndingTip):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(noLiveEndingTip), 0)

def clz_Torappu_Act4funConstAddNotEnoughEndingTip(builder, notEnoughEndingTip):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(notEnoughEndingTip), 0)

def clz_Torappu_Act4funConstAddEnoughEndingTip(builder, enoughEndingTip):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(enoughEndingTip), 0)

def clz_Torappu_Act4funConstAddMainPagePersonal(builder, mainPagePersonal):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(mainPagePersonal), 0)

def clz_Torappu_Act4funConstAddMainPageJobDes(builder, mainPageJobDes):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(mainPageJobDes), 0)

def clz_Torappu_Act4funConstAddEndingPageConfirmTxt(builder, endingPageConfirmTxt):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(endingPageConfirmTxt), 0)

def clz_Torappu_Act4funConstAddRunConfirmTxt(builder, runConfirmTxt):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(runConfirmTxt), 0)

def clz_Torappu_Act4funConstAddMainPageDiamondMissionId(builder, mainPageDiamondMissionId):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(mainPageDiamondMissionId), 0)

def clz_Torappu_Act4funConstAddReconnectConfirmTxt(builder, reconnectConfirmTxt):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(reconnectConfirmTxt), 0)

def clz_Torappu_Act4funConstAddStudyStageId(builder, studyStageId):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(studyStageId), 0)

def clz_Torappu_Act4funConstAddGoodEndingToastTxt(builder, goodEndingToastTxt):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(goodEndingToastTxt), 0)

def clz_Torappu_Act4funConstAddTokenLevelUpToastTxt(builder, tokenLevelUpToastTxt):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(tokenLevelUpToastTxt), 0)

def clz_Torappu_Act4funConstAddStudyStageToastTxt(builder, studyStageToastTxt):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(studyStageToastTxt), 0)

def clz_Torappu_Act4funConstAddMatNotEnoughToastTxt(builder, matNotEnoughToastTxt):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(matNotEnoughToastTxt), 0)

def clz_Torappu_Act4funConstAddFormalLevelUnlockToastTxt(builder, formalLevelUnlockToastTxt):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(formalLevelUnlockToastTxt), 0)

def clz_Torappu_Act4funConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funStageExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funStageExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funStageExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funStageExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funStageExtraData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act4funStageExtraData
    def ValueIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act4funStageExtraDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act4funStageExtraDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_Act4funStageExtraDataAddValueIconId(builder, valueIconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(valueIconId), 0)

def clz_Torappu_Act4funStageExtraDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act4funStageExtraData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act4funStageExtraData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act4funStageExtraData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act4funStageExtraData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act4funStageExtraData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act4funStageExtraData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funStageExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act4funStageExtraDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act4funStageExtraDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act4funStageExtraDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act4funStageExtraDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act4funData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act4funData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act4funData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act4funData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act4funData
    def PerformGroupInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funPerformGroupInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def PerformGroupInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def PerformGroupInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_Act4funData
    def PerformInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funPerformInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def PerformInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def PerformInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act4funData
    def NormalMatDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funLiveMatInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def NormalMatDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def NormalMatDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act4funData
    def SpMatDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funSpLiveMatInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def SpMatDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def SpMatDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act4funData
    def ValueEffectInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funValueEffectInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def ValueEffectInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def ValueEffectInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act4funData
    def LiveValueInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funLiveValueInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def LiveValueInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def LiveValueInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act4funData
    def SuperChatInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funSuperChatInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def SuperChatInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def SuperChatInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_Act4funData
    def CmtGroupInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funCmtGroupInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def CmtGroupInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def CmtGroupInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_Act4funData
    def CmtUsers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funData
    def CmtUsersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def CmtUsersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_Act4funData
    def EndingDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funEndingInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def EndingDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def EndingDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_Act4funData
    def TokenLevelInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funTokenInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def TokenLevelInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def TokenLevelInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_Act4funData
    def MissionDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def MissionDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def MissionDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_Act4funData
    def Constant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def StageExtraDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act4funStageExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act4funData
    def StageExtraDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def StageExtraDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_Act4funData
    def RandomMsgText(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funData
    def RandomMsgTextLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def RandomMsgTextIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_Act4funData
    def RandomUserIconId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Act4funData
    def RandomUserIconIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act4funData
    def RandomUserIconIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

def clz_Torappu_Act4funDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_Act4funDataAddPerformGroupInfoDict(builder, performGroupInfoDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(performGroupInfoDict), 0)

def clz_Torappu_Act4funDataStartPerformGroupInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddPerformInfoDict(builder, performInfoDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(performInfoDict), 0)

def clz_Torappu_Act4funDataStartPerformInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddNormalMatDict(builder, normalMatDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(normalMatDict), 0)

def clz_Torappu_Act4funDataStartNormalMatDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddSpMatDict(builder, spMatDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spMatDict), 0)

def clz_Torappu_Act4funDataStartSpMatDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddValueEffectInfoDict(builder, valueEffectInfoDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(valueEffectInfoDict), 0)

def clz_Torappu_Act4funDataStartValueEffectInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddLiveValueInfoDict(builder, liveValueInfoDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(liveValueInfoDict), 0)

def clz_Torappu_Act4funDataStartLiveValueInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddSuperChatInfoDict(builder, superChatInfoDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(superChatInfoDict), 0)

def clz_Torappu_Act4funDataStartSuperChatInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddCmtGroupInfoDict(builder, cmtGroupInfoDict):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(cmtGroupInfoDict), 0)

def clz_Torappu_Act4funDataStartCmtGroupInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddCmtUsers(builder, cmtUsers):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(cmtUsers), 0)

def clz_Torappu_Act4funDataStartCmtUsersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddEndingDict(builder, endingDict):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(endingDict), 0)

def clz_Torappu_Act4funDataStartEndingDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddTokenLevelInfos(builder, tokenLevelInfos):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(tokenLevelInfos), 0)

def clz_Torappu_Act4funDataStartTokenLevelInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddMissionDatas(builder, missionDatas):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionDatas), 0)

def clz_Torappu_Act4funDataStartMissionDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddConstant(builder, constant):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(constant), 0)

def clz_Torappu_Act4funDataAddStageExtraDatas(builder, stageExtraDatas):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(stageExtraDatas), 0)

def clz_Torappu_Act4funDataStartStageExtraDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddRandomMsgText(builder, randomMsgText):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(randomMsgText), 0)

def clz_Torappu_Act4funDataStartRandomMsgTextVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataAddRandomUserIconId(builder, randomUserIconId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(randomUserIconId), 0)

def clz_Torappu_Act4funDataStartRandomUserIconIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act4funDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5funConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5funConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5funConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5funConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5funConst
    def StoryStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def BetStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def StoryRoundnumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def BetRoundnumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def InitialFundStory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def InitialFundBet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def MinFundDrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def MaxFund(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def SelectTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5funConst
    def NpcCountInRound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funConst
    def SelectDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def SelectLeftDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def SelectRightDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def FundDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def ConfirmDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funConst
    def LoadingDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5funConstStart(builder):
    builder.StartObject(16)

def clz_Torappu_Act5funConstAddStoryStageId(builder, storyStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyStageId), 0)

def clz_Torappu_Act5funConstAddBetStageId(builder, betStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(betStageId), 0)

def clz_Torappu_Act5funConstAddStoryRoundnumber(builder, storyRoundnumber):
    builder.PrependInt32Slot(2, storyRoundnumber, 0)

def clz_Torappu_Act5funConstAddBetRoundnumber(builder, betRoundnumber):
    builder.PrependInt32Slot(3, betRoundnumber, 0)

def clz_Torappu_Act5funConstAddInitialFundStory(builder, initialFundStory):
    builder.PrependInt32Slot(4, initialFundStory, 0)

def clz_Torappu_Act5funConstAddInitialFundBet(builder, initialFundBet):
    builder.PrependInt32Slot(5, initialFundBet, 0)

def clz_Torappu_Act5funConstAddMinFundDrop(builder, minFundDrop):
    builder.PrependInt32Slot(6, minFundDrop, 0)

def clz_Torappu_Act5funConstAddMaxFund(builder, maxFund):
    builder.PrependInt64Slot(7, maxFund, 0)

def clz_Torappu_Act5funConstAddSelectTime(builder, selectTime):
    builder.PrependFloat32Slot(8, selectTime, 0.0)

def clz_Torappu_Act5funConstAddNpcCountInRound(builder, npcCountInRound):
    builder.PrependInt32Slot(9, npcCountInRound, 0)

def clz_Torappu_Act5funConstAddSelectDescription(builder, selectDescription):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(selectDescription), 0)

def clz_Torappu_Act5funConstAddSelectLeftDescription(builder, selectLeftDescription):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(selectLeftDescription), 0)

def clz_Torappu_Act5funConstAddSelectRightDescription(builder, selectRightDescription):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(selectRightDescription), 0)

def clz_Torappu_Act5funConstAddFundDescription(builder, fundDescription):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(fundDescription), 0)

def clz_Torappu_Act5funConstAddConfirmDescription(builder, confirmDescription):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(confirmDescription), 0)

def clz_Torappu_Act5funConstAddLoadingDescription(builder, loadingDescription):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(loadingDescription), 0)

def clz_Torappu_Act5funConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunRoundData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunRoundData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunRoundData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunRoundData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunRoundData
    def RoundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def EnemyPredefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Act5FunRoundData
    def Round(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunRoundData
    def EnemyPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5FunRoundData
    def EnemyScoreRandom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5FunRoundData
    def MinType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunRoundData
    def MaxType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunRoundData
    def ChoiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunRoundData
    def ChoiceId1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def ChoiceId2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def ChoiceId3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def ChoiceId4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunRoundData
    def EnableSideTarget(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act5FunRoundDataStart(builder):
    builder.StartObject(14)

def clz_Torappu_Act5FunRoundDataAddRoundId(builder, roundId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(roundId), 0)

def clz_Torappu_Act5FunRoundDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_Act5FunRoundDataAddEnemyPredefined(builder, enemyPredefined):
    builder.PrependBoolSlot(2, enemyPredefined, 0)

def clz_Torappu_Act5FunRoundDataAddRound(builder, round):
    builder.PrependInt32Slot(3, round, 0)

def clz_Torappu_Act5FunRoundDataAddEnemyPoint(builder, enemyPoint):
    builder.PrependFloat32Slot(4, enemyPoint, 0.0)

def clz_Torappu_Act5FunRoundDataAddEnemyScoreRandom(builder, enemyScoreRandom):
    builder.PrependFloat32Slot(5, enemyScoreRandom, 0.0)

def clz_Torappu_Act5FunRoundDataAddMinType(builder, minType):
    builder.PrependInt32Slot(6, minType, 0)

def clz_Torappu_Act5FunRoundDataAddMaxType(builder, maxType):
    builder.PrependInt32Slot(7, maxType, 0)

def clz_Torappu_Act5FunRoundDataAddChoiceCount(builder, choiceCount):
    builder.PrependInt32Slot(8, choiceCount, 0)

def clz_Torappu_Act5FunRoundDataAddChoiceId1(builder, choiceId1):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId1), 0)

def clz_Torappu_Act5FunRoundDataAddChoiceId2(builder, choiceId2):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId2), 0)

def clz_Torappu_Act5FunRoundDataAddChoiceId3(builder, choiceId3):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId3), 0)

def clz_Torappu_Act5FunRoundDataAddChoiceId4(builder, choiceId4):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId4), 0)

def clz_Torappu_Act5FunRoundDataAddEnableSideTarget(builder, enableSideTarget):
    builder.PrependBoolSlot(13, enableSideTarget, 0)

def clz_Torappu_Act5FunRoundDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5FunRoundData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5FunRoundData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5FunRoundData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5FunRoundData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5FunRoundData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5FunRoundData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunRoundData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5FunRoundDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5FunRoundDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5FunRoundDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5FunRoundDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunNpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunNpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunNpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunNpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunNpcData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunNpcData
    def AvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunNpcData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunNpcData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5FunNpcData
    def SpecialStrategy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunNpcData
    def NpcProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5FunNpcData
    def DefaultEnemyScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Act5FunNpcDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act5FunNpcDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_Act5FunNpcDataAddAvatarId(builder, avatarId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(avatarId), 0)

def clz_Torappu_Act5FunNpcDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act5FunNpcDataAddPriority(builder, priority):
    builder.PrependFloat32Slot(3, priority, 0.0)

def clz_Torappu_Act5FunNpcDataAddSpecialStrategy(builder, specialStrategy):
    builder.PrependInt32Slot(4, specialStrategy, 0)

def clz_Torappu_Act5FunNpcDataAddNpcProb(builder, npcProb):
    builder.PrependFloat32Slot(5, npcProb, 0.0)

def clz_Torappu_Act5FunNpcDataAddDefaultEnemyScore(builder, defaultEnemyScore):
    builder.PrependFloat32Slot(6, defaultEnemyScore, 0.0)

def clz_Torappu_Act5FunNpcDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5FunNpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5FunNpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5FunNpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5FunNpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5FunNpcData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5FunNpcData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunNpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5FunNpcDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5FunNpcDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5FunNpcDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5FunNpcDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunNpcSelectorData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunNpcSelectorData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunNpcSelectorData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunNpcSelectorData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunNpcSelectorData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunNpcSelectorData
    def EnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunNpcSelectorData
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Act5FunNpcSelectorDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act5FunNpcSelectorDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_Act5FunNpcSelectorDataAddEnemyId(builder, enemyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enemyId), 0)

def clz_Torappu_Act5FunNpcSelectorDataAddScore(builder, score):
    builder.PrependFloat32Slot(2, score, 0.0)

def clz_Torappu_Act5FunNpcSelectorDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunChoiceRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunChoiceRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunChoiceRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunChoiceRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunChoiceRewardData
    def ChoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunChoiceRewardData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunChoiceRewardData
    def Percentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Act5FunChoiceRewardData
    def IsSpecialStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Act5FunChoiceRewardDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_Act5FunChoiceRewardDataAddChoiceId(builder, choiceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId), 0)

def clz_Torappu_Act5FunChoiceRewardDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act5FunChoiceRewardDataAddPercentage(builder, percentage):
    builder.PrependFloat32Slot(2, percentage, 0.0)

def clz_Torappu_Act5FunChoiceRewardDataAddIsSpecialStyle(builder, isSpecialStyle):
    builder.PrependBoolSlot(3, isSpecialStyle, 0)

def clz_Torappu_Act5FunChoiceRewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5FunChoiceRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5FunChoiceRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5FunChoiceRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5FunChoiceRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5FunChoiceRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5FunChoiceRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunChoiceRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5FunChoiceRewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5FunChoiceRewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5FunChoiceRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5FunChoiceRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunEnemyIdMappingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunEnemyIdMappingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunEnemyIdMappingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunEnemyIdMappingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunEnemyIdMappingData
    def EnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunEnemyIdMappingData
    def OriginalEnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5FunEnemyIdMappingDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act5FunEnemyIdMappingDataAddEnemyId(builder, enemyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyId), 0)

def clz_Torappu_Act5FunEnemyIdMappingDataAddOriginalEnemyId(builder, originalEnemyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(originalEnemyId), 0)

def clz_Torappu_Act5FunEnemyIdMappingDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5FunEnemyIdMappingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5FunEnemyIdMappingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5FunEnemyIdMappingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5FunEnemyIdMappingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5FunEnemyIdMappingData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5FunEnemyIdMappingData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunEnemyIdMappingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5FunEnemyIdMappingDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5FunEnemyIdMappingDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5FunEnemyIdMappingDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5FunEnemyIdMappingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunData_BattleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunData_BattleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunData_BattleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunData_BattleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunData_BattleData
    def BattleConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5funConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def RoundData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5FunRoundData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def RoundDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def RoundDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_Act5FunData_BattleData
    def NpcData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5FunNpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def NpcDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def NpcDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act5FunData_BattleData
    def NpcSelectorData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5FunNpcSelectorData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def NpcSelectorDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def NpcSelectorDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act5FunData_BattleData
    def ChoiceRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5FunChoiceRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def ChoiceRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def ChoiceRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act5FunData_BattleData
    def EnemyIdMappingData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5FunEnemyIdMappingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData_BattleData
    def EnemyIdMappingDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def EnemyIdMappingDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_Act5FunData_BattleData
    def BattleStreak(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def BattleStreakAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def BattleStreakLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData_BattleData
    def BattleStreakIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_Act5FunData_BattleDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_Act5FunData_BattleDataAddBattleConstData(builder, battleConstData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battleConstData), 0)

def clz_Torappu_Act5FunData_BattleDataAddRoundData(builder, roundData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(roundData), 0)

def clz_Torappu_Act5FunData_BattleDataStartRoundDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataAddNpcData(builder, npcData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(npcData), 0)

def clz_Torappu_Act5FunData_BattleDataStartNpcDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataAddNpcSelectorData(builder, npcSelectorData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(npcSelectorData), 0)

def clz_Torappu_Act5FunData_BattleDataStartNpcSelectorDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataAddChoiceRewardData(builder, choiceRewardData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(choiceRewardData), 0)

def clz_Torappu_Act5FunData_BattleDataStartChoiceRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataAddEnemyIdMappingData(builder, enemyIdMappingData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdMappingData), 0)

def clz_Torappu_Act5FunData_BattleDataStartEnemyIdMappingDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataAddBattleStreak(builder, battleStreak):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(battleStreak), 0)

def clz_Torappu_Act5FunData_BattleDataStartBattleStreakVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunData_BattleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5funBasicConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5funBasicConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5funBasicConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5funBasicConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5funBasicConst
    def StoryStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funBasicConst
    def BetStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5funBasicConst
    def StoryRoundNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funBasicConst
    def BetRoundNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funBasicConst
    def MinFundDrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5funBasicConst
    def MaxFund(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Act5funBasicConstStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act5funBasicConstAddStoryStageId(builder, storyStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyStageId), 0)

def clz_Torappu_Act5funBasicConstAddBetStageId(builder, betStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(betStageId), 0)

def clz_Torappu_Act5funBasicConstAddStoryRoundNumber(builder, storyRoundNumber):
    builder.PrependInt32Slot(2, storyRoundNumber, 0)

def clz_Torappu_Act5funBasicConstAddBetRoundNumber(builder, betRoundNumber):
    builder.PrependInt32Slot(3, betRoundNumber, 0)

def clz_Torappu_Act5funBasicConstAddMinFundDrop(builder, minFundDrop):
    builder.PrependInt32Slot(4, minFundDrop, 0)

def clz_Torappu_Act5funBasicConstAddMaxFund(builder, maxFund):
    builder.PrependInt32Slot(5, maxFund, 0)

def clz_Torappu_Act5funBasicConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunBasicNpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunBasicNpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunBasicNpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunBasicNpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunBasicNpcData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunBasicNpcData
    def AvatarId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Act5FunBasicNpcData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5FunBasicNpcDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act5FunBasicNpcDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_Act5FunBasicNpcDataAddAvatarId(builder, avatarId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(avatarId), 0)

def clz_Torappu_Act5FunBasicNpcDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_Act5FunBasicNpcDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_Act5FunBasicNpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_Act5FunBasicNpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_Act5FunBasicNpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_Act5FunBasicNpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_Act5FunBasicNpcData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_Act5FunBasicNpcData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunBasicNpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_Act5FunBasicNpcDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_Act5FunBasicNpcDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_Act5FunBasicNpcDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_Act5FunBasicNpcDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunSettleRatingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunSettleRatingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunSettleRatingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunSettleRatingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunSettleRatingData
    def MinRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunSettleRatingData
    def MaxRating(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunSettleRatingData
    def RatingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5FunSettleRatingDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_Act5FunSettleRatingDataAddMinRating(builder, minRating):
    builder.PrependInt32Slot(0, minRating, 0)

def clz_Torappu_Act5FunSettleRatingDataAddMaxRating(builder, maxRating):
    builder.PrependInt32Slot(1, maxRating, 0)

def clz_Torappu_Act5FunSettleRatingDataAddRatingDesc(builder, ratingDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ratingDesc), 0)

def clz_Torappu_Act5FunSettleRatingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunSettleStreakData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunSettleStreakData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunSettleStreakData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunSettleStreakData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunSettleStreakData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunSettleStreakData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5FunSettleStreakDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act5FunSettleStreakDataAddCount(builder, count):
    builder.PrependInt32Slot(0, count, 0)

def clz_Torappu_Act5FunSettleStreakDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_Act5FunSettleStreakDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunSettleSuccessData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunSettleSuccessData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunSettleSuccessData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunSettleSuccessData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunSettleSuccessData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_Act5FunSettleSuccessData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Act5FunSettleSuccessDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_Act5FunSettleSuccessDataAddCount(builder, count):
    builder.PrependInt32Slot(0, count, 0)

def clz_Torappu_Act5FunSettleSuccessDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_Act5FunSettleSuccessDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Act5FunData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Act5FunData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Act5FunData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Act5FunData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Act5FunData
    def BattleData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunData_BattleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5funBasicConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def NpcData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_Act5FunBasicNpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def NpcDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData
    def NpcDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_Act5FunData
    def RatingData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5FunSettleRatingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def RatingDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData
    def RatingDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_Act5FunData
    def StreakData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5FunSettleStreakData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def StreakDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData
    def StreakDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_Act5FunData
    def SuccessData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Act5FunSettleSuccessData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_Act5FunData
    def SuccessDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Act5FunData
    def SuccessDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_Act5FunDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_Act5FunDataAddBattleData(builder, battleData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(battleData), 0)

def clz_Torappu_Act5FunDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_Act5FunDataAddNpcData(builder, npcData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(npcData), 0)

def clz_Torappu_Act5FunDataStartNpcDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunDataAddRatingData(builder, ratingData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ratingData), 0)

def clz_Torappu_Act5FunDataStartRatingDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunDataAddStreakData(builder, streakData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(streakData), 0)

def clz_Torappu_Act5FunDataStartStreakDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunDataAddSuccessData(builder, successData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(successData), 0)

def clz_Torappu_Act5FunDataStartSuccessDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Act5FunDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AprilFoolTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AprilFoolTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AprilFoolTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AprilFoolTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AprilFoolTable
    def Stages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_AprilFoolStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolTable
    def StagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AprilFoolTable
    def StagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_AprilFoolTable
    def ScoreDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_AprilFoolScoreData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolTable
    def ScoreDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_AprilFoolTable
    def ScoreDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_AprilFoolTable
    def Constant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AprilFoolConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolTable
    def Act4FunData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act4funData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_AprilFoolTable
    def Act5FunData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Act5FunData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_AprilFoolTableStart(builder):
    builder.StartObject(5)

def clz_Torappu_AprilFoolTableAddStages(builder, stages):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stages), 0)

def clz_Torappu_AprilFoolTableStartStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AprilFoolTableAddScoreDict(builder, scoreDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scoreDict), 0)

def clz_Torappu_AprilFoolTableStartScoreDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_AprilFoolTableAddConstant(builder, constant):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(constant), 0)

def clz_Torappu_AprilFoolTableAddAct4FunData(builder, act4FunData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(act4FunData), 0)

def clz_Torappu_AprilFoolTableAddAct5FunData(builder, act5FunData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(act5FunData), 0)

def clz_Torappu_AprilFoolTableEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_CartComponents_CartAccessoryPos__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_CartComponents_CartAccessoryPos__list_stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_CartComponents_CartAccessoryPos__list_stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_CartComponents_CartAccessoryPos__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_CartComponents_CartAccessoryPos__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_CartComponents_CartAccessoryPos__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_CartComponents(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CartComponents()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CartComponents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CartComponents
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CartComponents
    def CompId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartComponents
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartComponents
    def PosList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_CartComponents
    def PosListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_CartComponents
    def PosListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartComponents
    def PosListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_CartComponents
    def PosIdDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_CartComponents_CartAccessoryPos__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CartComponents
    def PosIdDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartComponents
    def PosIdDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_CartComponents
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def ShowScores(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartComponents
    def ItemUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def ItemObtain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartComponents
    def DetailDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def Price(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartComponents
    def SpecialObtain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartComponents
    def ObtainInRandom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_CartComponents
    def AdditiveColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CartComponentsStart(builder):
    builder.StartObject(17)

def clz_Torappu_CartComponentsAddCompId(builder, compId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(compId), 0)

def clz_Torappu_CartComponentsAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_CartComponentsAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_CartComponentsAddPosList(builder, posList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(posList), 0)

def clz_Torappu_CartComponentsStartPosListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartComponentsAddPosIdDict(builder, posIdDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(posIdDict), 0)

def clz_Torappu_CartComponentsStartPosIdDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartComponentsAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_CartComponentsAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_CartComponentsAddShowScores(builder, showScores):
    builder.PrependInt32Slot(7, showScores, 0)

def clz_Torappu_CartComponentsAddItemUsage(builder, itemUsage):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(itemUsage), 0)

def clz_Torappu_CartComponentsAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_CartComponentsAddItemObtain(builder, itemObtain):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(itemObtain), 0)

def clz_Torappu_CartComponentsAddRarity(builder, rarity):
    builder.PrependInt32Slot(11, rarity, 0)

def clz_Torappu_CartComponentsAddDetailDesc(builder, detailDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(detailDesc), 0)

def clz_Torappu_CartComponentsAddPrice(builder, price):
    builder.PrependInt32Slot(13, price, 0)

def clz_Torappu_CartComponentsAddSpecialObtain(builder, specialObtain):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(specialObtain), 0)

def clz_Torappu_CartComponentsAddObtainInRandom(builder, obtainInRandom):
    builder.PrependBoolSlot(15, obtainInRandom, 0)

def clz_Torappu_CartComponentsAddAdditiveColor(builder, additiveColor):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(additiveColor), 0)

def clz_Torappu_CartComponentsEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CartComponents(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CartComponents()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CartComponents(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CartComponents
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CartComponents
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CartComponents
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CartComponents()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CartComponentsStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CartComponentsAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CartComponentsAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CartComponentsEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CartData_CartConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CartData_CartConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CartData_CartConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CartData_CartConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CartData_CartConstData
    def CarItemUnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartData_CartConstData
    def CarItemUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CartData_CartConstData
    def SpLevelUnlockItemCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartData_CartConstData
    def MileStoneBaseInterval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CartData_CartConstData
    def SpStageIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_CartData_CartConstData
    def SpStageIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartData_CartConstData
    def SpStageIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_CartData_CartConstData
    def CarFrameDefaultColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CartData_CartConstDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_CartData_CartConstDataAddCarItemUnlockStageId(builder, carItemUnlockStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(carItemUnlockStageId), 0)

def clz_Torappu_CartData_CartConstDataAddCarItemUnlockDesc(builder, carItemUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(carItemUnlockDesc), 0)

def clz_Torappu_CartData_CartConstDataAddSpLevelUnlockItemCnt(builder, spLevelUnlockItemCnt):
    builder.PrependInt32Slot(2, spLevelUnlockItemCnt, 0)

def clz_Torappu_CartData_CartConstDataAddMileStoneBaseInterval(builder, mileStoneBaseInterval):
    builder.PrependInt32Slot(3, mileStoneBaseInterval, 0)

def clz_Torappu_CartData_CartConstDataAddSpStageIds(builder, spStageIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spStageIds), 0)

def clz_Torappu_CartData_CartConstDataStartSpStageIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartData_CartConstDataAddCarFrameDefaultColor(builder, carFrameDefaultColor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(carFrameDefaultColor), 0)

def clz_Torappu_CartData_CartConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CartData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CartData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CartData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CartData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CartData
    def CarDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CartComponents()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CartData
    def CarDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartData
    def CarDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_CartData
    def RuneDataDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CartData
    def RuneDataDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartData
    def RuneDataDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_CartData
    def CartStages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_CartData
    def CartStagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CartData
    def CartStagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_CartData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CartData_CartConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_CartDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_CartDataAddCarDict(builder, carDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(carDict), 0)

def clz_Torappu_CartDataStartCarDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartDataAddRuneDataDict(builder, runeDataDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(runeDataDict), 0)

def clz_Torappu_CartDataStartRuneDataDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartDataAddCartStages(builder, cartStages):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cartStages), 0)

def clz_Torappu_CartDataStartCartStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CartDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_CartDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_AreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_AreaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_AreaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_AreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_AreaData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AreaData
    def AreaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AreaData
    def AreaSubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AreaData
    def UnlockType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_AreaData
    def UnlockStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AreaData
    def AreaIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AreaData
    def PointList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SiracusaData_AreaData
    def PointListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData_AreaData
    def PointListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_SiracusaData_AreaDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SiracusaData_AreaDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_SiracusaData_AreaDataAddAreaName(builder, areaName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaName), 0)

def clz_Torappu_SiracusaData_AreaDataAddAreaSubName(builder, areaSubName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(areaSubName), 0)

def clz_Torappu_SiracusaData_AreaDataAddUnlockType(builder, unlockType):
    builder.PrependInt32Slot(3, unlockType, 0)

def clz_Torappu_SiracusaData_AreaDataAddUnlockStage(builder, unlockStage):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockStage), 0)

def clz_Torappu_SiracusaData_AreaDataAddAreaIconId(builder, areaIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(areaIconId), 0)

def clz_Torappu_SiracusaData_AreaDataAddPointList(builder, pointList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(pointList), 0)

def clz_Torappu_SiracusaData_AreaDataStartPointListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaData_AreaDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_AreaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_AreaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_AreaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_AreaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_AreaData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_AreaData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_AreaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_AreaDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_AreaDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_AreaDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_AreaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_PointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_PointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_PointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_PointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_PointData
    def PointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_PointData
    def AreaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_PointData
    def PointName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_PointData
    def PointDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_PointData
    def PointIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_PointData
    def PointItaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_PointDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SiracusaData_PointDataAddPointId(builder, pointId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pointId), 0)

def clz_Torappu_SiracusaData_PointDataAddAreaId(builder, areaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(areaId), 0)

def clz_Torappu_SiracusaData_PointDataAddPointName(builder, pointName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pointName), 0)

def clz_Torappu_SiracusaData_PointDataAddPointDesc(builder, pointDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pointDesc), 0)

def clz_Torappu_SiracusaData_PointDataAddPointIconId(builder, pointIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pointIconId), 0)

def clz_Torappu_SiracusaData_PointDataAddPointItaName(builder, pointItaName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pointItaName), 0)

def clz_Torappu_SiracusaData_PointDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_PointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_PointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_PointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_PointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_PointData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_PointData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_PointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_PointDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_PointDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_PointDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_PointDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_CharCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_CharCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_CharCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_CharCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_CharCardData
    def CharCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def SortIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_CharCardData
    def AvgChar(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def AvgCharOffsetY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SiracusaData_CharCardData
    def CharCardName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def CharCardItaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def CharCardTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def CharCardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def FullCompleteDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def GainDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def ThemeColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def TaskRingList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SiracusaData_CharCardData
    def TaskRingListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData_CharCardData
    def TaskRingListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_SiracusaData_CharCardData
    def OperaItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_CharCardData
    def GainType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_CharCardData
    def GainParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SiracusaData_CharCardData
    def GainParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData_CharCardData
    def GainParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def clz_Torappu_SiracusaData_CharCardDataStart(builder):
    builder.StartObject(15)

def clz_Torappu_SiracusaData_CharCardDataAddCharCardId(builder, charCardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charCardId), 0)

def clz_Torappu_SiracusaData_CharCardDataAddSortIndex(builder, sortIndex):
    builder.PrependInt32Slot(1, sortIndex, 0)

def clz_Torappu_SiracusaData_CharCardDataAddAvgChar(builder, avgChar):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(avgChar), 0)

def clz_Torappu_SiracusaData_CharCardDataAddAvgCharOffsetY(builder, avgCharOffsetY):
    builder.PrependFloat32Slot(3, avgCharOffsetY, 0.0)

def clz_Torappu_SiracusaData_CharCardDataAddCharCardName(builder, charCardName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(charCardName), 0)

def clz_Torappu_SiracusaData_CharCardDataAddCharCardItaName(builder, charCardItaName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(charCardItaName), 0)

def clz_Torappu_SiracusaData_CharCardDataAddCharCardTitle(builder, charCardTitle):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(charCardTitle), 0)

def clz_Torappu_SiracusaData_CharCardDataAddCharCardDesc(builder, charCardDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(charCardDesc), 0)

def clz_Torappu_SiracusaData_CharCardDataAddFullCompleteDes(builder, fullCompleteDes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(fullCompleteDes), 0)

def clz_Torappu_SiracusaData_CharCardDataAddGainDesc(builder, gainDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(gainDesc), 0)

def clz_Torappu_SiracusaData_CharCardDataAddThemeColor(builder, themeColor):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(themeColor), 0)

def clz_Torappu_SiracusaData_CharCardDataAddTaskRingList(builder, taskRingList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(taskRingList), 0)

def clz_Torappu_SiracusaData_CharCardDataStartTaskRingListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaData_CharCardDataAddOperaItemId(builder, operaItemId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(operaItemId), 0)

def clz_Torappu_SiracusaData_CharCardDataAddGainType(builder, gainType):
    builder.PrependInt32Slot(13, gainType, 0)

def clz_Torappu_SiracusaData_CharCardDataAddGainParamList(builder, gainParamList):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(gainParamList), 0)

def clz_Torappu_SiracusaData_CharCardDataStartGainParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaData_CharCardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_CharCardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_CharCardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_CharCardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_CharCardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_CharCardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_CharCardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_CharCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_CharCardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_CharCardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_CharCardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_CharCardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_TaskRingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_TaskRingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_TaskRingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_TaskRingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_TaskRingData
    def TaskRingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskRingData
    def SortIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_TaskRingData
    def CharCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskRingData
    def LogicType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_TaskRingData
    def RingText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskRingData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData_TaskRingData
    def IsPrecious(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SiracusaData_TaskRingData
    def TaskIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SiracusaData_TaskRingData
    def TaskIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData_TaskRingData
    def TaskIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_SiracusaData_TaskRingDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SiracusaData_TaskRingDataAddTaskRingId(builder, taskRingId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskRingId), 0)

def clz_Torappu_SiracusaData_TaskRingDataAddSortIndex(builder, sortIndex):
    builder.PrependInt32Slot(1, sortIndex, 0)

def clz_Torappu_SiracusaData_TaskRingDataAddCharCardId(builder, charCardId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charCardId), 0)

def clz_Torappu_SiracusaData_TaskRingDataAddLogicType(builder, logicType):
    builder.PrependInt32Slot(3, logicType, 0)

def clz_Torappu_SiracusaData_TaskRingDataAddRingText(builder, ringText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ringText), 0)

def clz_Torappu_SiracusaData_TaskRingDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_SiracusaData_TaskRingDataAddIsPrecious(builder, isPrecious):
    builder.PrependBoolSlot(6, isPrecious, 0)

def clz_Torappu_SiracusaData_TaskRingDataAddTaskIdList(builder, taskIdList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(taskIdList), 0)

def clz_Torappu_SiracusaData_TaskRingDataStartTaskIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaData_TaskRingDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_TaskRingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_TaskRingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_TaskRingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_TaskRingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_TaskRingData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_TaskRingData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_TaskRingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_TaskRingDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_TaskRingDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_TaskRingDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_TaskRingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_TaskBasicInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_TaskBasicInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_TaskBasicInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def TaskRingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def SortIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def PlaceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_TaskBasicInfoData
    def TaskType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SiracusaData_TaskBasicInfoDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddTaskRingId(builder, taskRingId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskRingId), 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddSortIndex(builder, sortIndex):
    builder.PrependInt32Slot(2, sortIndex, 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddPlaceId(builder, placeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(placeId), 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataAddTaskType(builder, taskType):
    builder.PrependInt32Slot(5, taskType, 0)

def clz_Torappu_SiracusaData_TaskBasicInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_TaskBasicInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_TaskBasicInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_TaskBasicInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_TaskBasicInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_TaskBasicInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_TaskBasicInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_BattleTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_BattleTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_BattleTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_BattleTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_BattleTaskData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_BattleTaskData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_BattleTaskData
    def BattleTaskDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_BattleTaskData
    def TargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_BattleTaskData
    def TargetTemplate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_BattleTaskData
    def TargetParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SiracusaData_BattleTaskData
    def TargetParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData_BattleTaskData
    def TargetParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_SiracusaData_BattleTaskDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SiracusaData_BattleTaskDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_SiracusaData_BattleTaskDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_SiracusaData_BattleTaskDataAddBattleTaskDesc(builder, battleTaskDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(battleTaskDesc), 0)

def clz_Torappu_SiracusaData_BattleTaskDataAddTargetType(builder, targetType):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetType), 0)

def clz_Torappu_SiracusaData_BattleTaskDataAddTargetTemplate(builder, targetTemplate):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetTemplate), 0)

def clz_Torappu_SiracusaData_BattleTaskDataAddTargetParamList(builder, targetParamList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(targetParamList), 0)

def clz_Torappu_SiracusaData_BattleTaskDataStartTargetParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaData_BattleTaskDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_BattleTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_BattleTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_BattleTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_BattleTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_BattleTaskData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_BattleTaskData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_BattleTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_BattleTaskDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_BattleTaskDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_BattleTaskDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_BattleTaskDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_AVGTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_AVGTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_AVGTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_AVGTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_AVGTaskData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_AVGTaskData
    def TaskAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_AVGTaskDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SiracusaData_AVGTaskDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_SiracusaData_AVGTaskDataAddTaskAvg(builder, taskAvg):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskAvg), 0)

def clz_Torappu_SiracusaData_AVGTaskDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_AVGTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_AVGTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_AVGTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_AVGTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_AVGTaskData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_AVGTaskData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_AVGTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_AVGTaskDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_AVGTaskDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_AVGTaskDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_AVGTaskDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_ItemInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_ItemInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_ItemInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_ItemInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_ItemInfoData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemInfoData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemInfoData
    def ItemItalyName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemInfoData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemInfoData
    def ItemIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_ItemInfoDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SiracusaData_ItemInfoDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SiracusaData_ItemInfoDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_SiracusaData_ItemInfoDataAddItemItalyName(builder, itemItalyName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemItalyName), 0)

def clz_Torappu_SiracusaData_ItemInfoDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_SiracusaData_ItemInfoDataAddItemIcon(builder, itemIcon):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemIcon), 0)

def clz_Torappu_SiracusaData_ItemInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_ItemInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_ItemInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_ItemInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_ItemInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_ItemInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_ItemInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_ItemInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_ItemInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_ItemInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_ItemInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_ItemInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_ItemCardInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_ItemCardInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_ItemCardInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_ItemCardInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_ItemCardInfoData
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemCardInfoData
    def CardName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemCardInfoData
    def CardDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_ItemCardInfoData
    def OptionScript(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_ItemCardInfoDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SiracusaData_ItemCardInfoDataAddCardId(builder, cardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cardId), 0)

def clz_Torappu_SiracusaData_ItemCardInfoDataAddCardName(builder, cardName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cardName), 0)

def clz_Torappu_SiracusaData_ItemCardInfoDataAddCardDesc(builder, cardDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cardDesc), 0)

def clz_Torappu_SiracusaData_ItemCardInfoDataAddOptionScript(builder, optionScript):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionScript), 0)

def clz_Torappu_SiracusaData_ItemCardInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_ItemCardInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_ItemCardInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_ItemCardInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_ItemCardInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_ItemCardInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_ItemCardInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_ItemCardInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_ItemCardInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_ItemCardInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_ItemCardInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_ItemCardInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_NavigationInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_NavigationInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_NavigationInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_NavigationInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_NavigationInfoData
    def EntryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_NavigationInfoData
    def NavigationType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_NavigationInfoData
    def EntryIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_NavigationInfoData
    def EntryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_NavigationInfoData
    def EntrySubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_NavigationInfoDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SiracusaData_NavigationInfoDataAddEntryId(builder, entryId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(entryId), 0)

def clz_Torappu_SiracusaData_NavigationInfoDataAddNavigationType(builder, navigationType):
    builder.PrependInt32Slot(1, navigationType, 0)

def clz_Torappu_SiracusaData_NavigationInfoDataAddEntryIcon(builder, entryIcon):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(entryIcon), 0)

def clz_Torappu_SiracusaData_NavigationInfoDataAddEntryName(builder, entryName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entryName), 0)

def clz_Torappu_SiracusaData_NavigationInfoDataAddEntrySubName(builder, entrySubName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(entrySubName), 0)

def clz_Torappu_SiracusaData_NavigationInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_NavigationInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_NavigationInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_NavigationInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_NavigationInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_NavigationInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_NavigationInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_NavigationInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_NavigationInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_NavigationInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_NavigationInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_NavigationInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_OptionInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_OptionInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_OptionInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_OptionInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_OptionInfoData
    def OptionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OptionInfoData
    def OptionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OptionInfoData
    def OptionScript(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OptionInfoData
    def OptionGoToScript(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OptionInfoData
    def IsLeaveOption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SiracusaData_OptionInfoData
    def NeedCommentLike(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SiracusaData_OptionInfoData
    def RequireCardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_OptionInfoDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SiracusaData_OptionInfoDataAddOptionId(builder, optionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(optionId), 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddOptionDesc(builder, optionDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(optionDesc), 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddOptionScript(builder, optionScript):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(optionScript), 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddOptionGoToScript(builder, optionGoToScript):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(optionGoToScript), 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddIsLeaveOption(builder, isLeaveOption):
    builder.PrependBoolSlot(4, isLeaveOption, 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddNeedCommentLike(builder, needCommentLike):
    builder.PrependBoolSlot(5, needCommentLike, 0)

def clz_Torappu_SiracusaData_OptionInfoDataAddRequireCardId(builder, requireCardId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(requireCardId), 0)

def clz_Torappu_SiracusaData_OptionInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_OptionInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_OptionInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_OptionInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_OptionInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_OptionInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_OptionInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_OptionInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_OptionInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_OptionInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_OptionInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_OptionInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_StagePointInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_StagePointInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_StagePointInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_StagePointInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_StagePointInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_StagePointInfoData
    def PointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_StagePointInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_StagePointInfoData
    def IsTaskStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_SiracusaData_StagePointInfoDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SiracusaData_StagePointInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_SiracusaData_StagePointInfoDataAddPointId(builder, pointId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pointId), 0)

def clz_Torappu_SiracusaData_StagePointInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_SiracusaData_StagePointInfoDataAddIsTaskStage(builder, isTaskStage):
    builder.PrependBoolSlot(3, isTaskStage, 0)

def clz_Torappu_SiracusaData_StagePointInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_StoryBriefInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_StoryBriefInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_StoryBriefInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_StoryBriefInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_StoryBriefInfoData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_StoryBriefInfoData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_StoryBriefInfoData
    def StoryInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_StoryBriefInfoDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SiracusaData_StoryBriefInfoDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_SiracusaData_StoryBriefInfoDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_SiracusaData_StoryBriefInfoDataAddStoryInfo(builder, storyInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyInfo), 0)

def clz_Torappu_SiracusaData_StoryBriefInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_StoryBriefInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_StoryBriefInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_StoryBriefInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_StoryBriefInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_StoryBriefInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_StoryBriefInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_OperaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_OperaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_OperaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_OperaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_OperaInfoData
    def OperaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaInfoData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_OperaInfoData
    def OperaName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaInfoData
    def OperaSubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaInfoData
    def OperaScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaInfoData
    def UnlockTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SiracusaData_OperaInfoDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SiracusaData_OperaInfoDataAddOperaId(builder, operaId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(operaId), 0)

def clz_Torappu_SiracusaData_OperaInfoDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SiracusaData_OperaInfoDataAddOperaName(builder, operaName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(operaName), 0)

def clz_Torappu_SiracusaData_OperaInfoDataAddOperaSubName(builder, operaSubName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(operaSubName), 0)

def clz_Torappu_SiracusaData_OperaInfoDataAddOperaScore(builder, operaScore):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(operaScore), 0)

def clz_Torappu_SiracusaData_OperaInfoDataAddUnlockTime(builder, unlockTime):
    builder.PrependInt64Slot(5, unlockTime, 0)

def clz_Torappu_SiracusaData_OperaInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_OperaInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_OperaInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_OperaInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_OperaInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_OperaInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_OperaInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_OperaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_OperaInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_OperaInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_OperaInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_OperaInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_OperaCommentInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_OperaCommentInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_OperaCommentInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def CommentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def ReferenceOperaId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def ColumnIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def ColumnSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def CommentTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def Score(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def CommentContent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SiracusaData_OperaCommentInfoData
    def CommentCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_OperaCommentInfoDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddCommentId(builder, commentId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(commentId), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddReferenceOperaId(builder, referenceOperaId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(referenceOperaId), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddColumnIndex(builder, columnIndex):
    builder.PrependInt32Slot(2, columnIndex, 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddColumnSortId(builder, columnSortId):
    builder.PrependInt32Slot(3, columnSortId, 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddCommentTitle(builder, commentTitle):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(commentTitle), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddScore(builder, score):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(score), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddCommentContent(builder, commentContent):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(commentContent), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataAddCommentCharId(builder, commentCharId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(commentCharId), 0)

def clz_Torappu_SiracusaData_OperaCommentInfoDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SiracusaData_OperaCommentInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_OperaCommentInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SiracusaData_OperaCommentInfoDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SiracusaData_OperaCommentInfoDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SiracusaData_OperaCommentInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SiracusaData_OperaCommentInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData_ConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData_ConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData_ConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData_ConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData_ConstData
    def OperaDailyNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_ConstData
    def OperaAllUnlockTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SiracusaData_ConstData
    def DefaultFocusArea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SiracusaData_ConstDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SiracusaData_ConstDataAddOperaDailyNum(builder, operaDailyNum):
    builder.PrependInt32Slot(0, operaDailyNum, 0)

def clz_Torappu_SiracusaData_ConstDataAddOperaAllUnlockTime(builder, operaAllUnlockTime):
    builder.PrependInt64Slot(1, operaAllUnlockTime, 0)

def clz_Torappu_SiracusaData_ConstDataAddDefaultFocusArea(builder, defaultFocusArea):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(defaultFocusArea), 0)

def clz_Torappu_SiracusaData_ConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SiracusaData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SiracusaData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SiracusaData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SiracusaData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SiracusaData
    def AreaDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_AreaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def AreaDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def AreaDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SiracusaData
    def PointDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_PointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def PointDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def PointDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SiracusaData
    def CharCardMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_CharCardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def CharCardMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def CharCardMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SiracusaData
    def TaskRingMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_TaskRingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def TaskRingMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def TaskRingMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SiracusaData
    def TaskInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_TaskBasicInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def TaskInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def TaskInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SiracusaData
    def BattleTaskMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_BattleTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def BattleTaskMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def BattleTaskMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SiracusaData
    def AvgTaskMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_AVGTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def AvgTaskMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def AvgTaskMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SiracusaData
    def ItemInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_ItemInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def ItemInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def ItemInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SiracusaData
    def ItemCardInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_ItemCardInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def ItemCardInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def ItemCardInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_SiracusaData
    def NavigationInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_NavigationInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def NavigationInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def NavigationInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_SiracusaData
    def OptionInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_OptionInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def OptionInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def OptionInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_SiracusaData
    def StagePointList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SiracusaData_StagePointInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def StagePointListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def StagePointListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_SiracusaData
    def StoryBriefInfoDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_StoryBriefInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def StoryBriefInfoDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def StoryBriefInfoDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_SiracusaData
    def OperaInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_OperaInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def OperaInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def OperaInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_SiracusaData
    def OperaCommentInfoMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SiracusaData_OperaCommentInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SiracusaData
    def OperaCommentInfoMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SiracusaData
    def OperaCommentInfoMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_SiracusaData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData_ConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SiracusaDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_SiracusaDataAddAreaDataMap(builder, areaDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(areaDataMap), 0)

def clz_Torappu_SiracusaDataStartAreaDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddPointDataMap(builder, pointDataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pointDataMap), 0)

def clz_Torappu_SiracusaDataStartPointDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddCharCardMap(builder, charCardMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charCardMap), 0)

def clz_Torappu_SiracusaDataStartCharCardMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddTaskRingMap(builder, taskRingMap):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(taskRingMap), 0)

def clz_Torappu_SiracusaDataStartTaskRingMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddTaskInfoMap(builder, taskInfoMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(taskInfoMap), 0)

def clz_Torappu_SiracusaDataStartTaskInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddBattleTaskMap(builder, battleTaskMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(battleTaskMap), 0)

def clz_Torappu_SiracusaDataStartBattleTaskMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddAvgTaskMap(builder, avgTaskMap):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(avgTaskMap), 0)

def clz_Torappu_SiracusaDataStartAvgTaskMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddItemInfoMap(builder, itemInfoMap):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(itemInfoMap), 0)

def clz_Torappu_SiracusaDataStartItemInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddItemCardInfoMap(builder, itemCardInfoMap):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(itemCardInfoMap), 0)

def clz_Torappu_SiracusaDataStartItemCardInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddNavigationInfoMap(builder, navigationInfoMap):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(navigationInfoMap), 0)

def clz_Torappu_SiracusaDataStartNavigationInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddOptionInfoMap(builder, optionInfoMap):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(optionInfoMap), 0)

def clz_Torappu_SiracusaDataStartOptionInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddStagePointList(builder, stagePointList):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(stagePointList), 0)

def clz_Torappu_SiracusaDataStartStagePointListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddStoryBriefInfoDataMap(builder, storyBriefInfoDataMap):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(storyBriefInfoDataMap), 0)

def clz_Torappu_SiracusaDataStartStoryBriefInfoDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddOperaInfoMap(builder, operaInfoMap):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(operaInfoMap), 0)

def clz_Torappu_SiracusaDataStartOperaInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddOperaCommentInfoMap(builder, operaCommentInfoMap):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(operaCommentInfoMap), 0)

def clz_Torappu_SiracusaDataStartOperaCommentInfoMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SiracusaDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_SiracusaDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_KVSwitchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_KVSwitchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_KVSwitchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_KVSwitchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_KVSwitchInfo
    def IsDefault(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_KVSwitchInfo
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_KVSwitchInfo
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_KVSwitchInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_KVSwitchInfoAddIsDefault(builder, isDefault):
    builder.PrependBoolSlot(0, isDefault, 0)

def clz_Torappu_KVSwitchInfoAddDisplayTime(builder, displayTime):
    builder.PrependInt64Slot(1, displayTime, 0)

def clz_Torappu_KVSwitchInfoAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_KVSwitchInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_KVSwitchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_KVSwitchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_KVSwitchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_KVSwitchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_KVSwitchInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_KVSwitchInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_KVSwitchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_KVSwitchInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_KVSwitchInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_KVSwitchInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_KVSwitchInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityKVSwitchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityKVSwitchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityKVSwitchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityKVSwitchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityKVSwitchData
    def KvSwitchInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_KVSwitchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityKVSwitchData
    def KvSwitchInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityKVSwitchData
    def KvSwitchInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityKVSwitchDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityKVSwitchDataAddKvSwitchInfo(builder, kvSwitchInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(kvSwitchInfo), 0)

def clz_Torappu_ActivityKVSwitchDataStartKvSwitchInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityKVSwitchDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityKVSwitchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityKVSwitchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityKVSwitchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityKVSwitchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityKVSwitchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityKVSwitchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityKVSwitchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityKVSwitchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityKVSwitchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityKVSwitchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityKVSwitchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_DynEntrySwitchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_DynEntrySwitchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_DynEntrySwitchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_DynEntrySwitchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_DynEntrySwitchInfo
    def EntryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_DynEntrySwitchInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_DynEntrySwitchInfo
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_DynEntrySwitchInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_DynEntrySwitchInfoAddEntryId(builder, entryId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(entryId), 0)

def clz_Torappu_DynEntrySwitchInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_DynEntrySwitchInfoAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_DynEntrySwitchInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_DynEntrySwitchInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_DynEntrySwitchInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_DynEntrySwitchInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_DynEntrySwitchInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_DynEntrySwitchInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_DynEntrySwitchInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_DynEntrySwitchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_DynEntrySwitchInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_DynEntrySwitchInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_DynEntrySwitchInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_DynEntrySwitchInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityDynEntrySwitchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityDynEntrySwitchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityDynEntrySwitchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityDynEntrySwitchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityDynEntrySwitchData
    def EntrySwitchInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_DynEntrySwitchInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityDynEntrySwitchData
    def EntrySwitchInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityDynEntrySwitchData
    def EntrySwitchInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityDynEntrySwitchDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityDynEntrySwitchDataAddEntrySwitchInfo(builder, entrySwitchInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(entrySwitchInfo), 0)

def clz_Torappu_ActivityDynEntrySwitchDataStartEntrySwitchInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityDynEntrySwitchDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityDynEntrySwitchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityDynEntrySwitchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityDynEntrySwitchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityDynEntrySwitchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityDynEntrySwitchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityDynEntrySwitchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityDynEntrySwitchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityDynEntrySwitchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityDynEntrySwitchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityDynEntrySwitchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityDynEntrySwitchDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockTemplate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def MissionStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockedName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def LockedName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def LockCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def UnlockedDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def TemplateDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData
    def Riddle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddUnlockStageId(builder, unlockStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockStageId), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddUnlockTemplate(builder, unlockTemplate):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockTemplate), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddUnlockParams(builder, unlockParams):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParams), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataStartUnlockParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddMissionStageId(builder, missionStageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionStageId), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddUnlockedName(builder, unlockedName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockedName), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddLockedName(builder, lockedName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(lockedName), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddLockCode(builder, lockCode):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lockCode), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddUnlockedDes(builder, unlockedDes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(unlockedDes), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddTemplateDesc(builder, templateDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(templateDesc), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataAddRiddle(builder, riddle):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(riddle), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityHiddenStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityHiddenStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityHiddenStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def EncodedName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def ShowStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def RewardDiamond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def Missions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityTable_ActivityHiddenStageUnlockConditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def MissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityHiddenStageData
    def MissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_ActivityTable_ActivityHiddenStageDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataAddEncodedName(builder, encodedName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(encodedName), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataAddShowStageId(builder, showStageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(showStageId), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataAddRewardDiamond(builder, rewardDiamond):
    builder.PrependBoolSlot(3, rewardDiamond, 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataAddMissions(builder, missions):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missions), 0)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataStartMissionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityHiddenStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionArchiveVoiceClipData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionArchiveVoiceClipData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionArchiveVoiceClipData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionArchiveVoiceClipData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionArchiveVoiceClipData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveVoiceClipData
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveVoiceClipData
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionArchiveVoiceClipDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_MissionArchiveVoiceClipDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_MissionArchiveVoiceClipDataAddVoiceId(builder, voiceId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(voiceId), 0)

def clz_Torappu_MissionArchiveVoiceClipDataAddIndex(builder, index):
    builder.PrependInt32Slot(2, index, 0)

def clz_Torappu_MissionArchiveVoiceClipDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionArchiveNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionArchiveNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionArchiveNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionArchiveNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionArchiveNodeData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveNodeData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveNodeData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveNodeData
    def Clips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionArchiveVoiceClipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionArchiveNodeData
    def ClipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionArchiveNodeData
    def ClipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_MissionArchiveNodeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_MissionArchiveNodeDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_MissionArchiveNodeDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MissionArchiveNodeDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_MissionArchiveNodeDataAddClips(builder, clips):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(clips), 0)

def clz_Torappu_MissionArchiveNodeDataStartClipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionArchiveNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionArchiveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionArchiveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionArchiveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionArchiveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionArchiveData
    def TopicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionArchiveData
    def Zones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionArchiveData
    def ZonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionArchiveData
    def ZonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MissionArchiveData
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionArchiveNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionArchiveData
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionArchiveData
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MissionArchiveData
    def HiddenClips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionArchiveVoiceClipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionArchiveData
    def HiddenClipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionArchiveData
    def HiddenClipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MissionArchiveData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_MissionArchiveDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_MissionArchiveDataAddTopicId(builder, topicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topicId), 0)

def clz_Torappu_MissionArchiveDataAddZones(builder, zones):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zones), 0)

def clz_Torappu_MissionArchiveDataStartZonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionArchiveDataAddNodes(builder, nodes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def clz_Torappu_MissionArchiveDataStartNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionArchiveDataAddHiddenClips(builder, hiddenClips):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenClips), 0)

def clz_Torappu_MissionArchiveDataStartHiddenClipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionArchiveDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_MissionArchiveDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MissionArchiveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MissionArchiveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MissionArchiveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MissionArchiveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MissionArchiveData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MissionArchiveData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MissionArchiveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MissionArchiveDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MissionArchiveDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MissionArchiveDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MissionArchiveDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreGroupData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def InitialValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreGroupData
    def InitialValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreGroupData
    def InitialValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_FifthAnnivExploreGroupData
    def HeritageValueType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_FifthAnnivExploreGroupDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_FifthAnnivExploreGroupDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreGroupDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_FifthAnnivExploreGroupDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_FifthAnnivExploreGroupDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_FifthAnnivExploreGroupDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_FifthAnnivExploreGroupDataAddInitialValues(builder, initialValues):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(initialValues), 0)

def clz_Torappu_FifthAnnivExploreGroupDataStartInitialValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreGroupDataAddHeritageValueType(builder, heritageValueType):
    builder.PrependInt32Slot(6, heritageValueType, 0)

def clz_Torappu_FifthAnnivExploreGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreStageData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreStageData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreStageData
    def NextStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreStageData
    def EventCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreStageData
    def PrevNodeCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreStageData
    def StageNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreStageData
    def StageEventNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreStageData
    def StageDisplayNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreStageData
    def StageFailureDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_FifthAnnivExploreStageDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_FifthAnnivExploreStageDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_FifthAnnivExploreStageDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_FifthAnnivExploreStageDataAddNextStageId(builder, nextStageId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nextStageId), 0)

def clz_Torappu_FifthAnnivExploreStageDataAddEventCount(builder, eventCount):
    builder.PrependInt32Slot(4, eventCount, 0)

def clz_Torappu_FifthAnnivExploreStageDataAddPrevNodeCount(builder, prevNodeCount):
    builder.PrependInt32Slot(5, prevNodeCount, 0)

def clz_Torappu_FifthAnnivExploreStageDataAddStageNum(builder, stageNum):
    builder.PrependInt32Slot(6, stageNum, 0)

def clz_Torappu_FifthAnnivExploreStageDataAddStageEventNum(builder, stageEventNum):
    builder.PrependInt32Slot(7, stageEventNum, 0)

def clz_Torappu_FifthAnnivExploreStageDataAddStageDisplayNum(builder, stageDisplayNum):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(stageDisplayNum), 0)

def clz_Torappu_FifthAnnivExploreStageDataAddStageFailureDescription(builder, stageFailureDescription):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(stageFailureDescription), 0)

def clz_Torappu_FifthAnnivExploreStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreTargetData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def LinkStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def TargetValues(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def TargetValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreTargetData
    def TargetValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_FifthAnnivExploreTargetData
    def RequireEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def LockedLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def IsEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_FifthAnnivExploreTargetData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def EndName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def SuccessDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreTargetData
    def SuccessIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_FifthAnnivExploreTargetDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_FifthAnnivExploreTargetDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddLinkStageId(builder, linkStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkStageId), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddTargetValues(builder, targetValues):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(targetValues), 0)

def clz_Torappu_FifthAnnivExploreTargetDataStartTargetValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreTargetDataAddRequireEventId(builder, requireEventId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(requireEventId), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddLockedLevelId(builder, lockedLevelId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lockedLevelId), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddIsEnd(builder, isEnd):
    builder.PrependBoolSlot(5, isEnd, 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddEndName(builder, endName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(endName), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddSuccessDesc(builder, successDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(successDesc), 0)

def clz_Torappu_FifthAnnivExploreTargetDataAddSuccessIconId(builder, successIconId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(successIconId), 0)

def clz_Torappu_FifthAnnivExploreTargetDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreTargetData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreTargetData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreTargetDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreTargetDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreTargetDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreTargetDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreEventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreEventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreEventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreEventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreEventData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventData
    def ChoiceIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FifthAnnivExploreEventData
    def ChoiceIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreEventData
    def ChoiceIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_FifthAnnivExploreEventDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_FifthAnnivExploreEventDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreEventDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_FifthAnnivExploreEventDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_FifthAnnivExploreEventDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_FifthAnnivExploreEventDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_FifthAnnivExploreEventDataAddChoiceIds(builder, choiceIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(choiceIds), 0)

def clz_Torappu_FifthAnnivExploreEventDataStartChoiceIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreEventDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreEventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreEventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreEventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreEventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreEventData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreEventData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreEventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreEventDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreEventDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreEventDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreEventDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreEventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreEventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreEventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def SuccessDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreEventChoiceData
    def FailureDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_FifthAnnivExploreEventChoiceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddSuccessDesc(builder, successDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(successDesc), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataAddFailureDesc(builder, failureDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(failureDesc), 0)

def clz_Torappu_FifthAnnivExploreEventChoiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreEventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreEventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreEventChoiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreEventChoiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreEventChoiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreEventChoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreBroadcastData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreBroadcastData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreBroadcastData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreBroadcastData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreBroadcastData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreBroadcastData
    def EventCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreBroadcastData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreBroadcastData
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_FifthAnnivExploreBroadcastDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_FifthAnnivExploreBroadcastDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreBroadcastDataAddEventCount(builder, eventCount):
    builder.PrependInt32Slot(1, eventCount, 0)

def clz_Torappu_FifthAnnivExploreBroadcastDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_FifthAnnivExploreBroadcastDataAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_FifthAnnivExploreBroadcastDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreBroadcastData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreBroadcastData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreBroadcastData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreBroadcastData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreBroadcastData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreBroadcastData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreBroadcastData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreBroadcastDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreBroadcastDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreBroadcastDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreBroadcastDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreConst
    def PrevRecordNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreConst
    def MaxBoard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreConst
    def ValueMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreConst
    def ValueMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreConst
    def TargetStuckDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreConst
    def StageStuckDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreConst
    def MissionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreConst
    def MissionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreConst
    def ChoiceValueOrder(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FifthAnnivExploreConst
    def ChoiceValueOrderLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreConst
    def ChoiceValueOrderIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_FifthAnnivExploreConst
    def TeamPassTargeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreConst
    def TeamPassEndDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_FifthAnnivExploreConstStart(builder):
    builder.StartObject(11)

def clz_Torappu_FifthAnnivExploreConstAddPrevRecordNum(builder, prevRecordNum):
    builder.PrependInt32Slot(0, prevRecordNum, 0)

def clz_Torappu_FifthAnnivExploreConstAddMaxBoard(builder, maxBoard):
    builder.PrependInt32Slot(1, maxBoard, 0)

def clz_Torappu_FifthAnnivExploreConstAddValueMin(builder, valueMin):
    builder.PrependInt32Slot(2, valueMin, 0)

def clz_Torappu_FifthAnnivExploreConstAddValueMax(builder, valueMax):
    builder.PrependInt32Slot(3, valueMax, 0)

def clz_Torappu_FifthAnnivExploreConstAddTargetStuckDesc(builder, targetStuckDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(targetStuckDesc), 0)

def clz_Torappu_FifthAnnivExploreConstAddStageStuckDesc(builder, stageStuckDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageStuckDesc), 0)

def clz_Torappu_FifthAnnivExploreConstAddMissionName(builder, missionName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionName), 0)

def clz_Torappu_FifthAnnivExploreConstAddMissionDesc(builder, missionDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(missionDesc), 0)

def clz_Torappu_FifthAnnivExploreConstAddChoiceValueOrder(builder, choiceValueOrder):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(choiceValueOrder), 0)

def clz_Torappu_FifthAnnivExploreConstStartChoiceValueOrderVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreConstAddTeamPassTargeDesc(builder, teamPassTargeDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(teamPassTargeDesc), 0)

def clz_Torappu_FifthAnnivExploreConstAddTeamPassEndDesc(builder, teamPassEndDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(teamPassEndDesc), 0)

def clz_Torappu_FifthAnnivExploreConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreMissionData
    def ProgressUpLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def ItemBgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def PreMissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FifthAnnivExploreMissionData
    def PreMissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def PreMissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FifthAnnivExploreMissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_FifthAnnivExploreMissionData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def MissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def ToPage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def PeriodicalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_FifthAnnivExploreMissionData
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def FoldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_FifthAnnivExploreMissionData
    def HaveSubMissionToUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_FifthAnnivExploreMissionDataStart(builder):
    builder.StartObject(19)

def clz_Torappu_FifthAnnivExploreMissionDataAddProgressUpLimit(builder, progressUpLimit):
    builder.PrependInt32Slot(0, progressUpLimit, 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddType(builder, type):
    builder.PrependInt32Slot(4, type, 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddItemBgType(builder, itemBgType):
    builder.PrependInt32Slot(5, itemBgType, 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddPreMissionIds(builder, preMissionIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionIds), 0)

def clz_Torappu_FifthAnnivExploreMissionDataStartPreMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreMissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_FifthAnnivExploreMissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreMissionDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_FifthAnnivExploreMissionDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreMissionDataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddToPage(builder, toPage):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(toPage), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddPeriodicalPoint(builder, periodicalPoint):
    builder.PrependInt32Slot(14, periodicalPoint, 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_FifthAnnivExploreMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreMissionDataAddBackImagePath(builder, backImagePath):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddFoldId(builder, foldId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(foldId), 0)

def clz_Torappu_FifthAnnivExploreMissionDataAddHaveSubMissionToUnlock(builder, haveSubMissionToUnlock):
    builder.PrependBoolSlot(18, haveSubMissionToUnlock, 0)

def clz_Torappu_FifthAnnivExploreMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FifthAnnivExploreMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FifthAnnivExploreMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FifthAnnivExploreMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FifthAnnivExploreMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FifthAnnivExploreMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FifthAnnivExploreMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FifthAnnivExploreMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FifthAnnivExploreMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FifthAnnivExploreMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FifthAnnivExploreMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FifthAnnivExploreData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FifthAnnivExploreData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FifthAnnivExploreData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FifthAnnivExploreData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FifthAnnivExploreData
    def ExploreGroupData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def ExploreGroupDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreGroupDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreStageData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def ExploreStageDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreStageDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreTargetData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def ExploreTargetDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreTargetDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreEventData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreEventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def ExploreEventDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreEventDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreChoiceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreEventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def ExploreChoiceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreChoiceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def BroadcastData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreBroadcastData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def BroadcastDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def BroadcastDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_FifthAnnivExploreData
    def ExploreConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def MissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FifthAnnivExploreMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FifthAnnivExploreData
    def MissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FifthAnnivExploreData
    def MissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_FifthAnnivExploreDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_FifthAnnivExploreDataAddExploreGroupData(builder, exploreGroupData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(exploreGroupData), 0)

def clz_Torappu_FifthAnnivExploreDataStartExploreGroupDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddExploreStageData(builder, exploreStageData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(exploreStageData), 0)

def clz_Torappu_FifthAnnivExploreDataStartExploreStageDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddExploreTargetData(builder, exploreTargetData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(exploreTargetData), 0)

def clz_Torappu_FifthAnnivExploreDataStartExploreTargetDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddExploreEventData(builder, exploreEventData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(exploreEventData), 0)

def clz_Torappu_FifthAnnivExploreDataStartExploreEventDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddExploreChoiceData(builder, exploreChoiceData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(exploreChoiceData), 0)

def clz_Torappu_FifthAnnivExploreDataStartExploreChoiceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddBroadcastData(builder, broadcastData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(broadcastData), 0)

def clz_Torappu_FifthAnnivExploreDataStartBroadcastDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataAddExploreConst(builder, exploreConst):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(exploreConst), 0)

def clz_Torappu_FifthAnnivExploreDataAddMissionData(builder, missionData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(missionData), 0)

def clz_Torappu_FifthAnnivExploreDataStartMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FifthAnnivExploreDataEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__string__string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__string__string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__string__string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__string__stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_TemplateTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_TemplateTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_TemplateTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_TemplateTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TemplateTrapData
    def TrapBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActivityTable_TemplateTrapDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapName(builder, trapName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trapName), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapDesc(builder, trapDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(trapDesc), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapText(builder, trapText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(trapText), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapTaskId(builder, trapTaskId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(trapTaskId), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapUnlockDesc(builder, trapUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(trapUnlockDesc), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataAddTrapBuffId(builder, trapBuffId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(trapBuffId), 0)

def clz_Torappu_ActivityTable_TemplateTrapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_TemplateTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_TemplateTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_TemplateTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_TemplateTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_TemplateTrapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_TemplateTrapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_TemplateTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_TemplateTrapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_TemplateTrapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_TemplateTrapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_TemplateTrapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityTrapConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityTrapConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityTrapConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def StageUnlockTrapDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def TrapMaximum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def StageCanNotUseTrap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def StageCanNotUseTrapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityTrapConstData
    def StageCanNotUseTrapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_ActivityTable_ActivityTrapConstDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActivityTable_ActivityTrapConstDataAddStageUnlockTrapDesc(builder, stageUnlockTrapDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageUnlockTrapDesc), 0)

def clz_Torappu_ActivityTable_ActivityTrapConstDataAddTrapMaximum(builder, trapMaximum):
    builder.PrependInt32Slot(1, trapMaximum, 0)

def clz_Torappu_ActivityTable_ActivityTrapConstDataAddStageCanNotUseTrap(builder, stageCanNotUseTrap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stageCanNotUseTrap), 0)

def clz_Torappu_ActivityTable_ActivityTrapConstDataStartStageCanNotUseTrapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityTrapConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityTrapsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityTrapsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityTrapsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityTrapsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityTrapsData
    def TemplateTraps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_TemplateTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityTrapsData
    def TemplateTrapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityTrapsData
    def TemplateTrapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityTable_ActivityTrapsData
    def TrapConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityTrapConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActivityTable_ActivityTrapsDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActivityTable_ActivityTrapsDataAddTemplateTraps(builder, templateTraps):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(templateTraps), 0)

def clz_Torappu_ActivityTable_ActivityTrapsDataStartTemplateTrapsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityTrapsDataAddTrapConstData(builder, trapConstData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapConstData), 0)

def clz_Torappu_ActivityTable_ActivityTrapsDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_ActivityTrapsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_ActivityTrapsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_ActivityTrapsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_ActivityTrapsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_ActivityTrapsData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_ActivityTrapsData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityTrapsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_ActivityTrapsDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapsDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapsDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapsDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_TrapMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_TrapMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_TrapMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_TrapMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_TrapMissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TrapMissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActivityTable_TrapMissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActivityTable_TrapMissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_TrapMissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_TrapMissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ActivityTable_TrapMissionDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActivityTable_TrapMissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActivityTable_TrapMissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_ActivityTable_TrapMissionDataAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ActivityTable_TrapMissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ActivityTable_TrapMissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_TrapMissionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_TrapMissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_TrapMissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_TrapMissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_TrapMissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_TrapMissionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_TrapMissionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_TrapMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_TrapMissionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_TrapMissionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_TrapMissionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_TrapMissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable_ActivityTrapMissionsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable_ActivityTrapMissionsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable_ActivityTrapMissionsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def TrapMissions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_TrapMissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def TrapMissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def TrapMissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActivityTable_ActivityTrapMissionsDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActivityTable_ActivityTrapMissionsDataAddTrapMissions(builder, trapMissions):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trapMissions), 0)

def clz_Torappu_ActivityTable_ActivityTrapMissionsDataStartTrapMissionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTable_ActivityTrapMissionsDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityTrapMissionsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TemplateMissionStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TemplateMissionStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TemplateMissionStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TemplateMissionStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TemplateMissionStyleData
    def BigRewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TemplateMissionStyleData
    def BigRewardParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_TemplateMissionStyleData
    def BigRewardParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TemplateMissionStyleData
    def BigRewardParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_TemplateMissionStyleData
    def IsMissionListCommonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TemplateMissionStyleData
    def IsMissionItemCommonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TemplateMissionStyleData
    def MissionItemMainColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TemplateMissionStyleData
    def IsMissionItemCompleteUseMainColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TemplateMissionStyleData
    def MissionItemCompleteColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TemplateMissionStyleData
    def IsMissionRewardItemCommonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TemplateMissionStyleData
    def IsClaimAllBtnCommonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_TemplateMissionStyleData
    def ClaimAllBtnMainColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TemplateMissionStyleData
    def ClaimAllBtnTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TemplateMissionStyleData
    def TitleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TemplateMissionStyleData
    def CoinType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TemplateMissionStyleData
    def CoinBackColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_TemplateMissionStyleDataStart(builder):
    builder.StartObject(14)

def clz_Torappu_TemplateMissionStyleDataAddBigRewardType(builder, bigRewardType):
    builder.PrependInt32Slot(0, bigRewardType, 0)

def clz_Torappu_TemplateMissionStyleDataAddBigRewardParamList(builder, bigRewardParamList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bigRewardParamList), 0)

def clz_Torappu_TemplateMissionStyleDataStartBigRewardParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TemplateMissionStyleDataAddIsMissionListCommonType(builder, isMissionListCommonType):
    builder.PrependBoolSlot(2, isMissionListCommonType, 0)

def clz_Torappu_TemplateMissionStyleDataAddIsMissionItemCommonType(builder, isMissionItemCommonType):
    builder.PrependBoolSlot(3, isMissionItemCommonType, 0)

def clz_Torappu_TemplateMissionStyleDataAddMissionItemMainColor(builder, missionItemMainColor):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionItemMainColor), 0)

def clz_Torappu_TemplateMissionStyleDataAddIsMissionItemCompleteUseMainColor(builder, isMissionItemCompleteUseMainColor):
    builder.PrependBoolSlot(5, isMissionItemCompleteUseMainColor, 0)

def clz_Torappu_TemplateMissionStyleDataAddMissionItemCompleteColor(builder, missionItemCompleteColor):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionItemCompleteColor), 0)

def clz_Torappu_TemplateMissionStyleDataAddIsMissionRewardItemCommonType(builder, isMissionRewardItemCommonType):
    builder.PrependBoolSlot(7, isMissionRewardItemCommonType, 0)

def clz_Torappu_TemplateMissionStyleDataAddIsClaimAllBtnCommonType(builder, isClaimAllBtnCommonType):
    builder.PrependBoolSlot(8, isClaimAllBtnCommonType, 0)

def clz_Torappu_TemplateMissionStyleDataAddClaimAllBtnMainColor(builder, claimAllBtnMainColor):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(claimAllBtnMainColor), 0)

def clz_Torappu_TemplateMissionStyleDataAddClaimAllBtnTips(builder, claimAllBtnTips):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(claimAllBtnTips), 0)

def clz_Torappu_TemplateMissionStyleDataAddTitleType(builder, titleType):
    builder.PrependInt32Slot(11, titleType, 0)

def clz_Torappu_TemplateMissionStyleDataAddCoinType(builder, coinType):
    builder.PrependInt32Slot(12, coinType, 0)

def clz_Torappu_TemplateMissionStyleDataAddCoinBackColor(builder, coinBackColor):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(coinBackColor), 0)

def clz_Torappu_TemplateMissionStyleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_TemplateMissionStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_TemplateMissionStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_TemplateMissionStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_TemplateMissionStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_TemplateMissionStyleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_TemplateMissionStyleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_TemplateMissionStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_TemplateMissionStyleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_TemplateMissionStyleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_TemplateMissionStyleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_TemplateMissionStyleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActivityTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActivityTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActivityTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActivityTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActivityTable
    def BasicInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_BasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def BasicInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def BasicInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActivityTable
    def HomeActConfig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_HomeActivityConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def HomeActConfigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def HomeActConfigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActivityTable
    def ZoneToActivity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ZoneToActivityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ZoneToActivityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActivityTable
    def MissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def MissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def MissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActivityTable
    def MissionGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def MissionGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def MissionGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActivityTable
    def ReplicateMissions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ReplicateMissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ReplicateMissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActivityTable
    def Activity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityDetailTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ExtraData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActivityTable_ActivityExtraData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActivityItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActivityItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ActivityItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_ActivityTable
    def SyncPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_long()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def SyncPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def SyncPointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_ActivityTable
    def DynActs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__hg__internal__JObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def DynActsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def DynActsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_ActivityTable
    def StageRewardsData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityStageRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def StageRewardsDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def StageRewardsDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_ActivityTable
    def ActThemes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityThemeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActThemesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ActThemesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_ActivityTable
    def ActFunData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AprilFoolTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def CarData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CartData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def SiracusaData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SiracusaData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def KvSwitchData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityKVSwitchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def KvSwitchDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def KvSwitchDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_ActivityTable
    def DynEntrySwitchData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityDynEntrySwitchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def DynEntrySwitchDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def DynEntrySwitchDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_ActivityTable
    def HiddenStageData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActivityTable_ActivityHiddenStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def HiddenStageDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def HiddenStageDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_ActivityTable
    def MissionArchives(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MissionArchiveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def MissionArchivesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def MissionArchivesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # clz_Torappu_ActivityTable
    def FifthAnnivExploreData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FifthAnnivExploreData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def StringRes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def StringResLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def StringResIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # clz_Torappu_ActivityTable
    def ActivityTraps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_ActivityTrapsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActivityTrapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ActivityTrapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # clz_Torappu_ActivityTable
    def ActivityTrapMissions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActivityTable_ActivityTrapMissionsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActivityTrapMissionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ActivityTrapMissionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # clz_Torappu_ActivityTable
    def TrapRuneDataDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def TrapRuneDataDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def TrapRuneDataDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_ActivityTable
    def ActivityTemplateMissionStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_TemplateMissionStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActivityTable
    def ActivityTemplateMissionStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActivityTable
    def ActivityTemplateMissionStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

def clz_Torappu_ActivityTableStart(builder):
    builder.StartObject(26)

def clz_Torappu_ActivityTableAddBasicInfo(builder, basicInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(basicInfo), 0)

def clz_Torappu_ActivityTableStartBasicInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddHomeActConfig(builder, homeActConfig):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(homeActConfig), 0)

def clz_Torappu_ActivityTableStartHomeActConfigVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddZoneToActivity(builder, zoneToActivity):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneToActivity), 0)

def clz_Torappu_ActivityTableStartZoneToActivityVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddMissionData(builder, missionData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(missionData), 0)

def clz_Torappu_ActivityTableStartMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_ActivityTableStartMissionGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddReplicateMissions(builder, replicateMissions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(replicateMissions), 0)

def clz_Torappu_ActivityTableStartReplicateMissionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActivity(builder, activity):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(activity), 0)

def clz_Torappu_ActivityTableAddExtraData(builder, extraData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(extraData), 0)

def clz_Torappu_ActivityTableAddActivityItems(builder, activityItems):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(activityItems), 0)

def clz_Torappu_ActivityTableStartActivityItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddSyncPoints(builder, syncPoints):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(syncPoints), 0)

def clz_Torappu_ActivityTableStartSyncPointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddDynActs(builder, dynActs):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(dynActs), 0)

def clz_Torappu_ActivityTableStartDynActsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddStageRewardsData(builder, stageRewardsData):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(stageRewardsData), 0)

def clz_Torappu_ActivityTableStartStageRewardsDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActThemes(builder, actThemes):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(actThemes), 0)

def clz_Torappu_ActivityTableStartActThemesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActFunData(builder, actFunData):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(actFunData), 0)

def clz_Torappu_ActivityTableAddCarData(builder, carData):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(carData), 0)

def clz_Torappu_ActivityTableAddSiracusaData(builder, siracusaData):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(siracusaData), 0)

def clz_Torappu_ActivityTableAddKvSwitchData(builder, kvSwitchData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(kvSwitchData), 0)

def clz_Torappu_ActivityTableStartKvSwitchDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddDynEntrySwitchData(builder, dynEntrySwitchData):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(dynEntrySwitchData), 0)

def clz_Torappu_ActivityTableStartDynEntrySwitchDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddHiddenStageData(builder, hiddenStageData):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenStageData), 0)

def clz_Torappu_ActivityTableStartHiddenStageDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddMissionArchives(builder, missionArchives):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(missionArchives), 0)

def clz_Torappu_ActivityTableStartMissionArchivesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddFifthAnnivExploreData(builder, fifthAnnivExploreData):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(fifthAnnivExploreData), 0)

def clz_Torappu_ActivityTableAddStringRes(builder, stringRes):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(stringRes), 0)

def clz_Torappu_ActivityTableStartStringResVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActivityTraps(builder, activityTraps):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(activityTraps), 0)

def clz_Torappu_ActivityTableStartActivityTrapsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActivityTrapMissions(builder, activityTrapMissions):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(activityTrapMissions), 0)

def clz_Torappu_ActivityTableStartActivityTrapMissionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddTrapRuneDataDict(builder, trapRuneDataDict):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(trapRuneDataDict), 0)

def clz_Torappu_ActivityTableStartTrapRuneDataDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableAddActivityTemplateMissionStyles(builder, activityTemplateMissionStyles):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(activityTemplateMissionStyles), 0)

def clz_Torappu_ActivityTableStartActivityTemplateMissionStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActivityTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_ActivityTable
