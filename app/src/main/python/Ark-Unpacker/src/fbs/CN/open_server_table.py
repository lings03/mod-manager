# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_MissionType(object):
    UNKNOWN = 0
    MAIN = 1
    DAILY = 2
    WEEKLY = 3
    GUIDE = 4
    SUB = 5
    ACTIVITY = 6
    OPENSERVER = 7
    TOWERSEASON = 8


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_MissionItemBgType(object):
    COMMON = 0
    Equipment = 1
    Char = 2


class enum__Torappu_ReturnV2JumpType(object):
    NONE = 0
    ZONE_GROUP = 1
    ROGUE = 2
    CLIMB_TOWER = 3
    CAMPAIGN = 4
    BUILDING = 5
    RECRUIT_BUILD = 6
    DAILY_MISSION = 7
    SANDBOX = 8


class clz_Torappu_OpenServerScheduleItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_OpenServerScheduleItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_OpenServerScheduleItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_OpenServerScheduleItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_OpenServerScheduleItem
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerScheduleItem
    def VersionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerScheduleItem
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerScheduleItem
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerScheduleItem
    def TotalCheckinDescption(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerScheduleItem
    def ChainLoginDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerScheduleItem
    def CharImg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_OpenServerScheduleItemStart(builder):
    builder.StartObject(7)

def clz_Torappu_OpenServerScheduleItemAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_OpenServerScheduleItemAddVersionId(builder, versionId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(versionId), 0)

def clz_Torappu_OpenServerScheduleItemAddStartTs(builder, startTs):
    builder.PrependInt32Slot(2, startTs, 0)

def clz_Torappu_OpenServerScheduleItemAddEndTs(builder, endTs):
    builder.PrependInt32Slot(3, endTs, 0)

def clz_Torappu_OpenServerScheduleItemAddTotalCheckinDescption(builder, totalCheckinDescption):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(totalCheckinDescption), 0)

def clz_Torappu_OpenServerScheduleItemAddChainLoginDescription(builder, chainLoginDescription):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chainLoginDescription), 0)

def clz_Torappu_OpenServerScheduleItemAddCharImg(builder, charImg):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(charImg), 0)

def clz_Torappu_OpenServerScheduleItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionDisplayRewards(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionDisplayRewards()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionDisplayRewards(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionDisplayRewards
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionDisplayRewards
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionDisplayRewards
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionDisplayRewards
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionDisplayRewardsStart(builder):
    builder.StartObject(3)

def clz_Torappu_MissionDisplayRewardsAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_MissionDisplayRewardsAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDisplayRewardsAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_MissionDisplayRewardsEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionGroup
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def PreMissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionGroup
    def Period(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_MissionGroup
    def PeriodAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def PeriodIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MissionGroup
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionGroup
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionGroup
    def MissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionGroup
    def MissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionGroup
    def MissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_MissionGroup
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionGroup
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MissionGroupStart(builder):
    builder.StartObject(9)

def clz_Torappu_MissionGroupAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionGroupAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_MissionGroupAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_MissionGroupAddPreMissionGroup(builder, preMissionGroup):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionGroup), 0)

def clz_Torappu_MissionGroupAddPeriod(builder, period):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(period), 0)

def clz_Torappu_MissionGroupStartPeriodVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionGroupStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddMissionIds(builder, missionIds):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(missionIds), 0)

def clz_Torappu_MissionGroupStartMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionGroupAddStartTs(builder, startTs):
    builder.PrependInt64Slot(7, startTs, 0)

def clz_Torappu_MissionGroupAddEndTs(builder, endTs):
    builder.PrependInt64Slot(8, endTs, 0)

def clz_Torappu_MissionGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_MissionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MissionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MissionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MissionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MissionData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def ItemBgType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def PreMissionIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def PreMissionIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_MissionData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def TemplateType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_MissionData
    def UnlockCondition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MissionData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_MissionData
    def MissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def ToPage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def PeriodicalPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MissionData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MissionData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MissionData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_MissionData
    def BackImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def FoldId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MissionData
    def HaveSubMissionToUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_MissionDataStart(builder):
    builder.StartObject(18)

def clz_Torappu_MissionDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_MissionDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_MissionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_MissionDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_MissionDataAddItemBgType(builder, itemBgType):
    builder.PrependInt32Slot(4, itemBgType, 0)

def clz_Torappu_MissionDataAddPreMissionIds(builder, preMissionIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(preMissionIds), 0)

def clz_Torappu_MissionDataStartPreMissionIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_MissionDataAddTemplateType(builder, templateType):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(templateType), 0)

def clz_Torappu_MissionDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_MissionDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddUnlockCondition(builder, unlockCondition):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondition), 0)

def clz_Torappu_MissionDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_MissionDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddMissionGroup(builder, missionGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroup), 0)

def clz_Torappu_MissionDataAddToPage(builder, toPage):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(toPage), 0)

def clz_Torappu_MissionDataAddPeriodicalPoint(builder, periodicalPoint):
    builder.PrependInt32Slot(13, periodicalPoint, 0)

def clz_Torappu_MissionDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_MissionDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MissionDataAddBackImagePath(builder, backImagePath):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(backImagePath), 0)

def clz_Torappu_MissionDataAddFoldId(builder, foldId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(foldId), 0)

def clz_Torappu_MissionDataAddHaveSubMissionToUnlock(builder, haveSubMissionToUnlock):
    builder.PrependBoolSlot(17, haveSubMissionToUnlock, 0)

def clz_Torappu_MissionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_OpenServerItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_OpenServerItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_OpenServerItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_OpenServerItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_OpenServerItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerItemData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerItemData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerItemData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_OpenServerItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_OpenServerItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_OpenServerItemDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_OpenServerItemDataAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_OpenServerItemDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_OpenServerItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TotalCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TotalCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TotalCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TotalCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TotalCheckinData
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TotalCheckinData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_OpenServerItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TotalCheckinData
    def ColorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TotalCheckinDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TotalCheckinDataAddOrder(builder, order):
    builder.PrependInt32Slot(0, order, 0)

def clz_Torappu_TotalCheckinDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_TotalCheckinDataAddColorId(builder, colorId):
    builder.PrependInt32Slot(2, colorId, 0)

def clz_Torappu_TotalCheckinDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ChainLoginData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ChainLoginData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ChainLoginData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ChainLoginData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ChainLoginData
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ChainLoginData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_OpenServerItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ChainLoginData
    def ColorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ChainLoginDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ChainLoginDataAddOrder(builder, order):
    builder.PrependInt32Slot(0, order, 0)

def clz_Torappu_ChainLoginDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_ChainLoginDataAddColorId(builder, colorId):
    builder.PrependInt32Slot(2, colorId, 0)

def clz_Torappu_ChainLoginDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_OpenServerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_OpenServerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_OpenServerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_OpenServerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_OpenServerData
    def OpenServerMissionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MissionGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerData
    def OpenServerMissionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerData
    def OpenServerMissionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerData
    def OpenServerMissionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_OpenServerData
    def CheckInData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TotalCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerData
    def CheckInDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerData
    def CheckInDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_OpenServerData
    def ChainLoginData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ChainLoginData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerData
    def ChainLoginDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerData
    def ChainLoginDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_OpenServerData
    def TotalCheckinCharData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_OpenServerData
    def TotalCheckinCharDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerData
    def TotalCheckinCharDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_OpenServerData
    def ChainLoginCharData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_OpenServerData
    def ChainLoginCharDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerData
    def ChainLoginCharDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_OpenServerDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_OpenServerDataAddOpenServerMissionGroup(builder, openServerMissionGroup):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(openServerMissionGroup), 0)

def clz_Torappu_OpenServerDataAddOpenServerMissionData(builder, openServerMissionData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(openServerMissionData), 0)

def clz_Torappu_OpenServerDataStartOpenServerMissionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerDataAddCheckInData(builder, checkInData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkInData), 0)

def clz_Torappu_OpenServerDataStartCheckInDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerDataAddChainLoginData(builder, chainLoginData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chainLoginData), 0)

def clz_Torappu_OpenServerDataStartChainLoginDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerDataAddTotalCheckinCharData(builder, totalCheckinCharData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(totalCheckinCharData), 0)

def clz_Torappu_OpenServerDataStartTotalCheckinCharDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerDataAddChainLoginCharData(builder, chainLoginCharData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(chainLoginCharData), 0)

def clz_Torappu_OpenServerDataStartChainLoginCharDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_OpenServerData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_OpenServerData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_OpenServerData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_OpenServerData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_OpenServerData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_OpenServerData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_OpenServerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_OpenServerDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_OpenServerDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_OpenServerDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_OpenServerDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_OpenServerConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_OpenServerConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_OpenServerConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_OpenServerConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_OpenServerConst
    def FirstDiamondShardMailCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerConst
    def InitApMailEndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerConst
    def ResFullOpenUnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerConst
    def ResFullOpenDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_OpenServerConst
    def ResFullOpenTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerConst
    def ResFullOpenDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerConst
    def ResFullOpenGuideGroupThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_OpenServerConst
    def ResFullOpenStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_OpenServerConstStart(builder):
    builder.StartObject(8)

def clz_Torappu_OpenServerConstAddFirstDiamondShardMailCount(builder, firstDiamondShardMailCount):
    builder.PrependInt32Slot(0, firstDiamondShardMailCount, 0)

def clz_Torappu_OpenServerConstAddInitApMailEndTs(builder, initApMailEndTs):
    builder.PrependInt64Slot(1, initApMailEndTs, 0)

def clz_Torappu_OpenServerConstAddResFullOpenUnlockStageId(builder, resFullOpenUnlockStageId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resFullOpenUnlockStageId), 0)

def clz_Torappu_OpenServerConstAddResFullOpenDuration(builder, resFullOpenDuration):
    builder.PrependInt32Slot(3, resFullOpenDuration, 0)

def clz_Torappu_OpenServerConstAddResFullOpenTitle(builder, resFullOpenTitle):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resFullOpenTitle), 0)

def clz_Torappu_OpenServerConstAddResFullOpenDesc(builder, resFullOpenDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(resFullOpenDesc), 0)

def clz_Torappu_OpenServerConstAddResFullOpenGuideGroupThreshold(builder, resFullOpenGuideGroupThreshold):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(resFullOpenGuideGroupThreshold), 0)

def clz_Torappu_OpenServerConstAddResFullOpenStartTime(builder, resFullOpenStartTime):
    builder.PrependInt64Slot(7, resFullOpenStartTime, 0)

def clz_Torappu_OpenServerConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnConst
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def SystemTabTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def AfkDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def UnlockLv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def UnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnConst
    def JuniorClear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ReturnConst
    def Ifvisitor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ReturnConst
    def PermMissionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def NeedPoints(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnConst
    def DefaultIntro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnConst
    def PointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ReturnConstStart(builder):
    builder.StartObject(11)

def clz_Torappu_ReturnConstAddStartTime(builder, startTime):
    builder.PrependInt64Slot(0, startTime, 0)

def clz_Torappu_ReturnConstAddSystemTabTime(builder, systemTabTime):
    builder.PrependInt32Slot(1, systemTabTime, 0)

def clz_Torappu_ReturnConstAddAfkDays(builder, afkDays):
    builder.PrependInt32Slot(2, afkDays, 0)

def clz_Torappu_ReturnConstAddUnlockLv(builder, unlockLv):
    builder.PrependInt32Slot(3, unlockLv, 0)

def clz_Torappu_ReturnConstAddUnlockLevel(builder, unlockLevel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockLevel), 0)

def clz_Torappu_ReturnConstAddJuniorClear(builder, juniorClear):
    builder.PrependBoolSlot(5, juniorClear, 0)

def clz_Torappu_ReturnConstAddIfvisitor(builder, ifvisitor):
    builder.PrependBoolSlot(6, ifvisitor, 0)

def clz_Torappu_ReturnConstAddPermMissionTime(builder, permMissionTime):
    builder.PrependInt32Slot(7, permMissionTime, 0)

def clz_Torappu_ReturnConstAddNeedPoints(builder, needPoints):
    builder.PrependInt32Slot(8, needPoints, 0)

def clz_Torappu_ReturnConstAddDefaultIntro(builder, defaultIntro):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(defaultIntro), 0)

def clz_Torappu_ReturnConstAddPointId(builder, pointId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(pointId), 0)

def clz_Torappu_ReturnConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnIntroData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnIntroData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnIntroData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnIntroData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnIntroData
    def Sort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnIntroData
    def PubTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnIntroData
    def Image(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ReturnIntroDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ReturnIntroDataAddSort(builder, sort):
    builder.PrependInt32Slot(0, sort, 0)

def clz_Torappu_ReturnIntroDataAddPubTime(builder, pubTime):
    builder.PrependInt64Slot(1, pubTime, 0)

def clz_Torappu_ReturnIntroDataAddImage(builder, image):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(image), 0)

def clz_Torappu_ReturnIntroDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnDailyTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnDailyTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnDailyTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnDailyTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnDailyTaskData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnDailyTaskData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnDailyTaskData
    def GroupSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnDailyTaskData
    def TaskSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnDailyTaskData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnDailyTaskData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ReturnDailyTaskData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnDailyTaskData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ReturnDailyTaskData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnDailyTaskData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnDailyTaskData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnDailyTaskData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ReturnDailyTaskData
    def PlayPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ReturnDailyTaskDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_ReturnDailyTaskDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnDailyTaskDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ReturnDailyTaskDataAddGroupSortId(builder, groupSortId):
    builder.PrependInt32Slot(2, groupSortId, 0)

def clz_Torappu_ReturnDailyTaskDataAddTaskSortId(builder, taskSortId):
    builder.PrependInt32Slot(3, taskSortId, 0)

def clz_Torappu_ReturnDailyTaskDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_ReturnDailyTaskDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_ReturnDailyTaskDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDailyTaskDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ReturnDailyTaskDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ReturnDailyTaskDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDailyTaskDataAddPlayPoint(builder, playPoint):
    builder.PrependInt32Slot(8, playPoint, 0)

def clz_Torappu_ReturnDailyTaskDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_ReturnDailyTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_ReturnDailyTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_ReturnDailyTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_ReturnDailyTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_ReturnDailyTaskData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_ReturnDailyTaskData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnDailyTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_ReturnDailyTaskData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_ReturnDailyTaskData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_ReturnDailyTaskDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_ReturnDailyTaskDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_ReturnDailyTaskDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_ReturnDailyTaskDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_ReturnDailyTaskDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnLongTermTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnLongTermTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnLongTermTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnLongTermTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnLongTermTaskData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnLongTermTaskData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnLongTermTaskData
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnLongTermTaskData
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ReturnLongTermTaskData
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnLongTermTaskData
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ReturnLongTermTaskData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnLongTermTaskData
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MissionDisplayRewards()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnLongTermTaskData
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnLongTermTaskData
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ReturnLongTermTaskData
    def PlayPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ReturnLongTermTaskDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnLongTermTaskDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ReturnLongTermTaskDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ReturnLongTermTaskDataAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_ReturnLongTermTaskDataAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_ReturnLongTermTaskDataStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnLongTermTaskDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ReturnLongTermTaskDataAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_ReturnLongTermTaskDataStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnLongTermTaskDataAddPlayPoint(builder, playPoint):
    builder.PrependInt32Slot(6, playPoint, 0)

def clz_Torappu_ReturnLongTermTaskDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnCheckinData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnCheckinData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnCheckinData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnCheckinData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnCheckinData
    def IsImportant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ReturnCheckinData
    def CheckinRewardItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnCheckinData
    def CheckinRewardItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnCheckinData
    def CheckinRewardItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ReturnCheckinDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ReturnCheckinDataAddIsImportant(builder, isImportant):
    builder.PrependBoolSlot(0, isImportant, 0)

def clz_Torappu_ReturnCheckinDataAddCheckinRewardItems(builder, checkinRewardItems):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checkinRewardItems), 0)

def clz_Torappu_ReturnCheckinDataStartCheckinRewardItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnCheckinDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ReturnConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def OnceRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def OnceRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def OnceRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ReturnData
    def Intro(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnIntroData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def IntroLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def IntroIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ReturnData
    def ReturnDailyTaskDic(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_ReturnDailyTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def ReturnDailyTaskDicLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def ReturnDailyTaskDicIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ReturnData
    def ReturnLongTermTaskList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnLongTermTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def ReturnLongTermTaskListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def ReturnLongTermTaskListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ReturnData
    def CreditsList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def CreditsListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def CreditsListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ReturnData
    def CheckinRewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnCheckinData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnData
    def CheckinRewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnData
    def CheckinRewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ReturnDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ReturnDataAddOnceRewards(builder, onceRewards):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(onceRewards), 0)

def clz_Torappu_ReturnDataStartOnceRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataAddIntro(builder, intro):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(intro), 0)

def clz_Torappu_ReturnDataStartIntroVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataAddReturnDailyTaskDic(builder, returnDailyTaskDic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(returnDailyTaskDic), 0)

def clz_Torappu_ReturnDataStartReturnDailyTaskDicVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataAddReturnLongTermTaskList(builder, returnLongTermTaskList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(returnLongTermTaskList), 0)

def clz_Torappu_ReturnDataStartReturnLongTermTaskListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataAddCreditsList(builder, creditsList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(creditsList), 0)

def clz_Torappu_ReturnDataStartCreditsListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataAddCheckinRewardList(builder, checkinRewardList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(checkinRewardList), 0)

def clz_Torappu_ReturnDataStartCheckinRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2Const(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2Const()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2Const(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2Const
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2Const
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2Const
    def UnlockLv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2Const
    def UnlockStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2Const
    def PermMissionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2Const
    def PointId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2Const
    def ReturnPriceDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2Const
    def DailySupplyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ReturnV2ConstStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnV2ConstAddStartTime(builder, startTime):
    builder.PrependInt64Slot(0, startTime, 0)

def clz_Torappu_ReturnV2ConstAddUnlockLv(builder, unlockLv):
    builder.PrependInt32Slot(1, unlockLv, 0)

def clz_Torappu_ReturnV2ConstAddUnlockStage(builder, unlockStage):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockStage), 0)

def clz_Torappu_ReturnV2ConstAddPermMissionTime(builder, permMissionTime):
    builder.PrependInt32Slot(3, permMissionTime, 0)

def clz_Torappu_ReturnV2ConstAddPointId(builder, pointId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pointId), 0)

def clz_Torappu_ReturnV2ConstAddReturnPriceDesc(builder, returnPriceDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(returnPriceDesc), 0)

def clz_Torappu_ReturnV2ConstAddDailySupplyDesc(builder, dailySupplyDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(dailySupplyDesc), 0)

def clz_Torappu_ReturnV2ConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2ItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2ItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2ItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2ItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2ItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2ItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2ItemData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2ItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ReturnV2ItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ReturnV2ItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ReturnV2ItemDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ReturnV2ItemDataAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_ReturnV2ItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_ReturnV2ItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2OnceRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2OnceRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2OnceRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2OnceRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2OnceRewardData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2OnceRewardData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2OnceRewardData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2OnceRewardData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2ItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2OnceRewardData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2OnceRewardData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ReturnV2OnceRewardDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ReturnV2OnceRewardDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2OnceRewardDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ReturnV2OnceRewardDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ReturnV2OnceRewardDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2OnceRewardDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2OnceRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2CheckInRewardItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2CheckInRewardItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2CheckInRewardItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2CheckInRewardItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2CheckInRewardItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2CheckInRewardItemData
    def IsImportant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ReturnV2CheckInRewardItemData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2CheckInRewardItemData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2CheckInRewardItemData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_ReturnV2CheckInRewardItemDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ReturnV2CheckInRewardItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_ReturnV2CheckInRewardItemDataAddIsImportant(builder, isImportant):
    builder.PrependBoolSlot(1, isImportant, 0)

def clz_Torappu_ReturnV2CheckInRewardItemDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2CheckInRewardItemDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2CheckInRewardItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2CheckInRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2CheckInRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2CheckInRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2CheckInRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2CheckInRewardData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2CheckInRewardData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2CheckInRewardData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2CheckInRewardData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2CheckInRewardItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2CheckInRewardData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2CheckInRewardData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ReturnV2CheckInRewardDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ReturnV2CheckInRewardDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2CheckInRewardDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ReturnV2CheckInRewardDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ReturnV2CheckInRewardDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2CheckInRewardDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2CheckInRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2PriceRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2PriceRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2PriceRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2PriceRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2PriceRewardData
    def ContentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PriceRewardData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PriceRewardData
    def PointRequire(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PriceRewardData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PriceRewardData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PriceRewardData
    def TopIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PriceRewardData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2ItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2PriceRewardData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2PriceRewardData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ReturnV2PriceRewardDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnV2PriceRewardDataAddContentId(builder, contentId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(contentId), 0)

def clz_Torappu_ReturnV2PriceRewardDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ReturnV2PriceRewardDataAddPointRequire(builder, pointRequire):
    builder.PrependInt32Slot(2, pointRequire, 0)

def clz_Torappu_ReturnV2PriceRewardDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ReturnV2PriceRewardDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ReturnV2PriceRewardDataAddTopIconId(builder, topIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(topIconId), 0)

def clz_Torappu_ReturnV2PriceRewardDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2PriceRewardDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2PriceRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2PriceRewardGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2PriceRewardGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2PriceRewardGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2PriceRewardGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def ContentList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2PriceRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def ContentListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2PriceRewardGroupData
    def ContentListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ReturnV2PriceRewardGroupDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ReturnV2PriceRewardGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2PriceRewardGroupDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ReturnV2PriceRewardGroupDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ReturnV2PriceRewardGroupDataAddContentList(builder, contentList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(contentList), 0)

def clz_Torappu_ReturnV2PriceRewardGroupDataStartContentListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2PriceRewardGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2MissionItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2MissionItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2MissionItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2MissionItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2MissionItemData
    def MissionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionItemData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionItemData
    def JumpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionItemData
    def JumpParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionItemData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2MissionItemData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2MissionItemData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ReturnV2MissionItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnV2MissionItemDataAddMissionId(builder, missionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(missionId), 0)

def clz_Torappu_ReturnV2MissionItemDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2MissionItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ReturnV2MissionItemDataAddJumpType(builder, jumpType):
    builder.PrependInt32Slot(3, jumpType, 0)

def clz_Torappu_ReturnV2MissionItemDataAddJumpParam(builder, jumpParam):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(jumpParam), 0)

def clz_Torappu_ReturnV2MissionItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ReturnV2MissionItemDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2MissionItemDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2MissionItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2MissionGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2MissionGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2MissionGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2MissionGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2MissionGroupData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionGroupData
    def TabTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def DiffMissionCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionGroupData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionGroupData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2MissionGroupData
    def ImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def MissionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2MissionItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2MissionGroupData
    def MissionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2MissionGroupData
    def MissionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_ReturnV2MissionGroupDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_ReturnV2MissionGroupDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ReturnV2MissionGroupDataAddTabTitle(builder, tabTitle):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tabTitle), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddDiffMissionCount(builder, diffMissionCount):
    builder.PrependInt32Slot(5, diffMissionCount, 0)

def clz_Torappu_ReturnV2MissionGroupDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(6, startTime, 0)

def clz_Torappu_ReturnV2MissionGroupDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(7, endTime, 0)

def clz_Torappu_ReturnV2MissionGroupDataAddImageId(builder, imageId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(imageId), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ReturnV2MissionGroupDataAddMissionList(builder, missionList):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(missionList), 0)

def clz_Torappu_ReturnV2MissionGroupDataStartMissionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2MissionGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2DailySupplyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2DailySupplyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2DailySupplyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2DailySupplyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2DailySupplyData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2DailySupplyData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2DailySupplyData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2DailySupplyData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2DailySupplyData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2DailySupplyData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_ReturnV2DailySupplyDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ReturnV2DailySupplyDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2DailySupplyDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ReturnV2DailySupplyDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ReturnV2DailySupplyDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_ReturnV2DailySupplyDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DailySupplyDataEnd(builder):
    return builder.EndObject()



class dict__int__list_clz_Torappu_ReturnV2ItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_clz_Torappu_ReturnV2ItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_clz_Torappu_ReturnV2ItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_clz_Torappu_ReturnV2ItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_clz_Torappu_ReturnV2ItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_clz_Torappu_ReturnV2ItemData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2ItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_clz_Torappu_ReturnV2ItemData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_clz_Torappu_ReturnV2ItemData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_clz_Torappu_ReturnV2ItemDataStart(builder):
    builder.StartObject(2)

def dict__int__list_clz_Torappu_ReturnV2ItemDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_clz_Torappu_ReturnV2ItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_clz_Torappu_ReturnV2ItemDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_clz_Torappu_ReturnV2ItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2PackageCheckInRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2PackageCheckInRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2PackageCheckInRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def GetTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def BindGpgoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def TotalCheckInDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def RewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_clz_Torappu_ReturnV2ItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def RewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2PackageCheckInRewardData
    def RewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_ReturnV2PackageCheckInRewardDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddGetTime(builder, getTime):
    builder.PrependInt32Slot(3, getTime, 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddBindGpgoodId(builder, bindGpgoodId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bindGpgoodId), 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddTotalCheckInDay(builder, totalCheckInDay):
    builder.PrependInt32Slot(5, totalCheckInDay, 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataAddRewardDict(builder, rewardDict):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(rewardDict), 0)

def clz_Torappu_ReturnV2PackageCheckInRewardDataStartRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2PackageCheckInRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ReturnV2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ReturnV2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ReturnV2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ReturnV2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ReturnV2Data
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ReturnV2Const()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def OnceRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2OnceRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def OnceRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def OnceRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ReturnV2Data
    def CheckInRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2CheckInRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def CheckInRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def CheckInRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ReturnV2Data
    def PriceRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2PriceRewardGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def PriceRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def PriceRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ReturnV2Data
    def MissionGroupData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2MissionGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def MissionGroupDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def MissionGroupDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ReturnV2Data
    def DailySupplyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2DailySupplyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def DailySupplyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def DailySupplyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ReturnV2Data
    def PackageCheckInRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ReturnV2PackageCheckInRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ReturnV2Data
    def PackageCheckInRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ReturnV2Data
    def PackageCheckInRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_ReturnV2DataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ReturnV2DataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_ReturnV2DataAddOnceRewardData(builder, onceRewardData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(onceRewardData), 0)

def clz_Torappu_ReturnV2DataStartOnceRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataAddCheckInRewardData(builder, checkInRewardData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkInRewardData), 0)

def clz_Torappu_ReturnV2DataStartCheckInRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataAddPriceRewardData(builder, priceRewardData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(priceRewardData), 0)

def clz_Torappu_ReturnV2DataStartPriceRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataAddMissionGroupData(builder, missionGroupData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(missionGroupData), 0)

def clz_Torappu_ReturnV2DataStartMissionGroupDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataAddDailySupplyData(builder, dailySupplyData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(dailySupplyData), 0)

def clz_Torappu_ReturnV2DataStartDailySupplyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataAddPackageCheckInRewardData(builder, packageCheckInRewardData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(packageCheckInRewardData), 0)

def clz_Torappu_ReturnV2DataStartPackageCheckInRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ReturnV2DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NewbieCheckInPackageRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NewbieCheckInPackageRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NewbieCheckInPackageRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NewbieCheckInPackageRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NewbieCheckInPackageRewardData
    def OrderNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbieCheckInPackageRewardData
    def ItemBundle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_NewbieCheckInPackageRewardDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_NewbieCheckInPackageRewardDataAddOrderNum(builder, orderNum):
    builder.PrependInt32Slot(0, orderNum, 0)

def clz_Torappu_NewbieCheckInPackageRewardDataAddItemBundle(builder, itemBundle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemBundle), 0)

def clz_Torappu_NewbieCheckInPackageRewardDataEnd(builder):
    return builder.EndObject()



class dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_clz_Torappu_NewbieCheckInPackageRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NewbieCheckInPackageRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_clz_Torappu_NewbieCheckInPackageRewardDataStart(builder):
    builder.StartObject(2)

def dict__int__list_clz_Torappu_NewbieCheckInPackageRewardDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_clz_Torappu_NewbieCheckInPackageRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_clz_Torappu_NewbieCheckInPackageRewardDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_clz_Torappu_NewbieCheckInPackageRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NewbieCheckInPackageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NewbieCheckInPackageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NewbieCheckInPackageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NewbieCheckInPackageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NewbieCheckInPackageData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbieCheckInPackageData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbieCheckInPackageData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbieCheckInPackageData
    def BindGpgoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbieCheckInPackageData
    def CheckInDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbieCheckInPackageData
    def TotalCheckInDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewbieCheckInPackageData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_NewbieCheckInPackageData
    def CheckInRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_clz_Torappu_NewbieCheckInPackageRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_NewbieCheckInPackageData
    def CheckInRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NewbieCheckInPackageData
    def CheckInRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_NewbieCheckInPackageDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_NewbieCheckInPackageDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_NewbieCheckInPackageDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_NewbieCheckInPackageDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_NewbieCheckInPackageDataAddBindGpgoodId(builder, bindGpgoodId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bindGpgoodId), 0)

def clz_Torappu_NewbieCheckInPackageDataAddCheckInDuration(builder, checkInDuration):
    builder.PrependInt32Slot(4, checkInDuration, 0)

def clz_Torappu_NewbieCheckInPackageDataAddTotalCheckInDay(builder, totalCheckInDay):
    builder.PrependInt32Slot(5, totalCheckInDay, 0)

def clz_Torappu_NewbieCheckInPackageDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_NewbieCheckInPackageDataAddCheckInRewardDict(builder, checkInRewardDict):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(checkInRewardDict), 0)

def clz_Torappu_NewbieCheckInPackageDataStartCheckInRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NewbieCheckInPackageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_OpenServerSchedule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_OpenServerSchedule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_OpenServerSchedule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_OpenServerSchedule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_OpenServerSchedule
    def Schedule(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_OpenServerScheduleItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def ScheduleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerSchedule
    def ScheduleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_OpenServerSchedule
    def DataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_OpenServerData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def DataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerSchedule
    def DataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_OpenServerSchedule
    def Constant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_OpenServerConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def PlayerReturn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ReturnData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def PlayerReturnV2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ReturnV2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def NewbieCheckInPackageList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NewbieCheckInPackageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_OpenServerSchedule
    def NewbieCheckInPackageListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_OpenServerSchedule
    def NewbieCheckInPackageListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_OpenServerScheduleStart(builder):
    builder.StartObject(6)

def clz_Torappu_OpenServerScheduleAddSchedule(builder, schedule):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(schedule), 0)

def clz_Torappu_OpenServerScheduleStartScheduleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerScheduleAddDataMap(builder, dataMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dataMap), 0)

def clz_Torappu_OpenServerScheduleStartDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerScheduleAddConstant(builder, constant):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(constant), 0)

def clz_Torappu_OpenServerScheduleAddPlayerReturn(builder, playerReturn):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(playerReturn), 0)

def clz_Torappu_OpenServerScheduleAddPlayerReturnV2(builder, playerReturnV2):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(playerReturnV2), 0)

def clz_Torappu_OpenServerScheduleAddNewbieCheckInPackageList(builder, newbieCheckInPackageList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(newbieCheckInPackageList), 0)

def clz_Torappu_OpenServerScheduleStartNewbieCheckInPackageListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_OpenServerScheduleEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_OpenServerSchedule
