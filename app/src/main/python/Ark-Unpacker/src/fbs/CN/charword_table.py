# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_CharWordVoiceType(object):
    ONLY_TEXT = 0
    HAVE_CV = 1
    ENUM = 2


class enum__Torappu_DataUnlockType(object):
    DIRECT = 0
    AWAKE = 1
    FAVOR = 2
    STAGE = 3
    ITEM = 4
    NEVER = 5
    PATCH = 6
    NONE = 7


class enum__Torappu_CharWordShowType(object):
    HOME_SHOW = 0
    HOME_PLACE = 1
    HOME_WAIT = 2
    GACHA = 3
    EVOLVE_ONE = 4
    EVOLVE_TWO = 5
    FOUR_STAR = 6
    THREE_STAR = 7
    TWO_STAR = 8
    LOSE = 9
    LEVEL_UP = 10
    SQUAD = 11
    SQUAD_FIRST = 12
    BATTLE_START = 13
    BATTLE_FACE_ENEMY = 14
    BATTLE_SELECT = 15
    BATTLE_PLACE = 16
    BATTLE_SKILL_1 = 17
    BATTLE_SKILL_2 = 18
    BATTLE_SKILL_3 = 19
    BATTLE_SKILL_4 = 20
    BUILDING_PLACE = 21
    BUILDING_DRAGGING = 22
    BUILDING_FAVOR_BUBBLE = 23
    BUILDING_TOUCHING = 24
    LOADING_PANEL = 25
    BIRTHDAY = 26
    NEW_YEAR = 27
    VALENT_DAY = 28
    DRAGON_BOAT_FESTIVAL = 29
    HALLOWEEN_DAY = 30
    CHRISMATS_DAY = 31
    GREETING = 32
    ANNIVERSARY = 33
    UNUSED = 34
    E_ALL = 35


class enum__Torappu_VoiceLangType(object):
    NONE = 0
    JP = 1
    CN_MANDARIN = 2
    EN = 3
    KR = 4
    CN_TOPOLECT = 5
    LINKAGE = 6
    ITA = 7
    GER = 8
    RUS = 9


class enum__Torappu_VoiceLangGroupType(object):
    NONE = 0
    CN_MANDARIN = 1
    JP = 2
    EN = 3
    KR = 4
    CUSTOM = 5
    LINKAGE = 6


class enum__Torappu_FestivalVoiceTimeType(object):
    NONE = 0
    FESTIVAL = 1


class clz_Torappu_CharWordUnlockParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharWordUnlockParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharWordUnlockParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharWordUnlockParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharWordUnlockParam
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordUnlockParam
    def ValueInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharWordUnlockParamStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharWordUnlockParamAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_CharWordUnlockParamAddValueInt(builder, valueInt):
    builder.PrependInt32Slot(1, valueInt, 0)

def clz_Torappu_CharWordUnlockParamEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharWordData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharWordData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharWordData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharWordData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharWordData
    def CharWordId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def WordKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def VoiceText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def VoiceTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def VoiceIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordData
    def VoiceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordData
    def UnlockType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordData
    def UnlockParam(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharWordUnlockParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordData
    def UnlockParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordData
    def UnlockParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_CharWordData
    def LockDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharWordData
    def PlaceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordData
    def VoiceAsset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CharWordDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_CharWordDataAddCharWordId(builder, charWordId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charWordId), 0)

def clz_Torappu_CharWordDataAddWordKey(builder, wordKey):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(wordKey), 0)

def clz_Torappu_CharWordDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_CharWordDataAddVoiceId(builder, voiceId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(voiceId), 0)

def clz_Torappu_CharWordDataAddVoiceText(builder, voiceText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(voiceText), 0)

def clz_Torappu_CharWordDataAddVoiceTitle(builder, voiceTitle):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(voiceTitle), 0)

def clz_Torappu_CharWordDataAddVoiceIndex(builder, voiceIndex):
    builder.PrependInt32Slot(6, voiceIndex, 0)

def clz_Torappu_CharWordDataAddVoiceType(builder, voiceType):
    builder.PrependInt32Slot(7, voiceType, 0)

def clz_Torappu_CharWordDataAddUnlockType(builder, unlockType):
    builder.PrependInt32Slot(8, unlockType, 0)

def clz_Torappu_CharWordDataAddUnlockParam(builder, unlockParam):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(unlockParam), 0)

def clz_Torappu_CharWordDataStartUnlockParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordDataAddLockDescription(builder, lockDescription):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(lockDescription), 0)

def clz_Torappu_CharWordDataAddPlaceType(builder, placeType):
    builder.PrependInt32Slot(11, placeType, 0)

def clz_Torappu_CharWordDataAddVoiceAsset(builder, voiceAsset):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(voiceAsset), 0)

def clz_Torappu_CharWordDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharWordData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharWordData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharWordData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharWordData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharWordData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharWordData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharWordData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharWordDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharWordDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharWordDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharWordDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharExtraWordData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharExtraWordData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharExtraWordData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharExtraWordData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharExtraWordData
    def WordKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharExtraWordData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharExtraWordData
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharExtraWordData
    def VoiceText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_CharExtraWordDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_CharExtraWordDataAddWordKey(builder, wordKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(wordKey), 0)

def clz_Torappu_CharExtraWordDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_CharExtraWordDataAddVoiceId(builder, voiceId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(voiceId), 0)

def clz_Torappu_CharExtraWordDataAddVoiceText(builder, voiceText):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(voiceText), 0)

def clz_Torappu_CharExtraWordDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_CharExtraWordData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_CharExtraWordData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_CharExtraWordData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_CharExtraWordData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_CharExtraWordData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_CharExtraWordData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharExtraWordData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_CharExtraWordDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_CharExtraWordDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_CharExtraWordDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_CharExtraWordDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VoiceLangInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VoiceLangInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VoiceLangInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VoiceLangInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VoiceLangInfoData
    def Wordkey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_VoiceLangInfoData
    def VoiceLangType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_VoiceLangInfoData
    def CvName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_VoiceLangInfoData
    def CvNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VoiceLangInfoData
    def CvNameIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_VoiceLangInfoData
    def VoicePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_VoiceLangInfoDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_VoiceLangInfoDataAddWordkey(builder, wordkey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(wordkey), 0)

def clz_Torappu_VoiceLangInfoDataAddVoiceLangType(builder, voiceLangType):
    builder.PrependInt32Slot(1, voiceLangType, 0)

def clz_Torappu_VoiceLangInfoDataAddCvName(builder, cvName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cvName), 0)

def clz_Torappu_VoiceLangInfoDataStartCvNameVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VoiceLangInfoDataAddVoicePath(builder, voicePath):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(voicePath), 0)

def clz_Torappu_VoiceLangInfoDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VoiceLangInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VoiceLangData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VoiceLangData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VoiceLangData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VoiceLangData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VoiceLangData
    def Wordkeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_VoiceLangData
    def WordkeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VoiceLangData
    def WordkeysIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_VoiceLangData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_VoiceLangData
    def Dict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangInfoData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_VoiceLangData
    def DictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VoiceLangData
    def DictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_VoiceLangDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_VoiceLangDataAddWordkeys(builder, wordkeys):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(wordkeys), 0)

def clz_Torappu_VoiceLangDataStartWordkeysVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VoiceLangDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_VoiceLangDataAddDict(builder, dict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dict), 0)

def clz_Torappu_VoiceLangDataStartDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VoiceLangDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_VoiceLangData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_VoiceLangData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_VoiceLangData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_VoiceLangData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_VoiceLangData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_VoiceLangData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VoiceLangData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_VoiceLangDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_VoiceLangDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_VoiceLangDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_VoiceLangDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VoiceLangTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VoiceLangTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VoiceLangTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VoiceLangTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VoiceLangTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_VoiceLangTypeData
    def GroupType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_VoiceLangTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_VoiceLangTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_VoiceLangTypeDataAddGroupType(builder, groupType):
    builder.PrependInt32Slot(1, groupType, 0)

def clz_Torappu_VoiceLangTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VoiceLangTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_VoiceLangGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_VoiceLangGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_VoiceLangGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_VoiceLangGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_VoiceLangGroupData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_VoiceLangGroupData
    def Members(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_VoiceLangGroupData
    def MembersAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_VoiceLangGroupData
    def MembersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_VoiceLangGroupData
    def MembersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_VoiceLangGroupDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_VoiceLangGroupDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_VoiceLangGroupDataAddMembers(builder, members):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(members), 0)

def clz_Torappu_VoiceLangGroupDataStartMembersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_VoiceLangGroupDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_VoiceLangGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__enum__Torappu_VoiceLangType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__enum__Torappu_VoiceLangType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__enum__Torappu_VoiceLangType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__enum__Torappu_VoiceLangType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__enum__Torappu_VoiceLangType
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__enum__Torappu_VoiceLangType
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__enum__Torappu_VoiceLangTypeStart(builder):
    builder.StartObject(2)

def dict__string__enum__Torappu_VoiceLangTypeAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__enum__Torappu_VoiceLangTypeAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__enum__Torappu_VoiceLangTypeEnd(builder):
    return builder.EndObject()



class clz_Torappu_NewVoiceTimeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NewVoiceTimeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NewVoiceTimeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NewVoiceTimeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NewVoiceTimeData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewVoiceTimeData
    def CharSet(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_NewVoiceTimeData
    def CharSetLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NewVoiceTimeData
    def CharSetIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_NewVoiceTimeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_NewVoiceTimeDataAddTimestamp(builder, timestamp):
    builder.PrependInt64Slot(0, timestamp, 0)

def clz_Torappu_NewVoiceTimeDataAddCharSet(builder, charSet):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charSet), 0)

def clz_Torappu_NewVoiceTimeDataStartCharSetVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NewVoiceTimeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NewVoiceTimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FestivalTimeInterval(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FestivalTimeInterval()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FestivalTimeInterval(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FestivalTimeInterval
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FestivalTimeInterval
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FestivalTimeInterval
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_FestivalTimeIntervalStart(builder):
    builder.StartObject(2)

def clz_Torappu_FestivalTimeIntervalAddStartTs(builder, startTs):
    builder.PrependInt64Slot(0, startTs, 0)

def clz_Torappu_FestivalTimeIntervalAddEndTs(builder, endTs):
    builder.PrependInt64Slot(1, endTs, 0)

def clz_Torappu_FestivalTimeIntervalEnd(builder):
    return builder.EndObject()



class clz_Torappu_FestivalTimeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FestivalTimeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FestivalTimeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FestivalTimeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FestivalTimeData
    def TimeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FestivalTimeData
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FestivalTimeInterval()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_FestivalTimeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_FestivalTimeDataAddTimeType(builder, timeType):
    builder.PrependInt32Slot(0, timeType, 0)

def clz_Torappu_FestivalTimeDataAddInterval(builder, interval):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(interval), 0)

def clz_Torappu_FestivalTimeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FestivalVoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FestivalVoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FestivalVoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FestivalVoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FestivalVoiceData
    def ShowType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FestivalVoiceData
    def TimeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_FestivalTimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_FestivalVoiceData
    def TimeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_FestivalVoiceData
    def TimeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_FestivalVoiceDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_FestivalVoiceDataAddShowType(builder, showType):
    builder.PrependInt32Slot(0, showType, 0)

def clz_Torappu_FestivalVoiceDataAddTimeData(builder, timeData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timeData), 0)

def clz_Torappu_FestivalVoiceDataStartTimeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_FestivalVoiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FestivalVoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FestivalVoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FestivalVoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FestivalVoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FestivalVoiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FestivalVoiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FestivalVoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FestivalVoiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FestivalVoiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FestivalVoiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FestivalVoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_FestivalVoiceWeightData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_FestivalVoiceWeightData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_FestivalVoiceWeightData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_FestivalVoiceWeightData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_FestivalVoiceWeightData
    def ShowType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_FestivalVoiceWeightData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_FestivalVoiceWeightDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_FestivalVoiceWeightDataAddShowType(builder, showType):
    builder.PrependInt32Slot(0, showType, 0)

def clz_Torappu_FestivalVoiceWeightDataAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_FestivalVoiceWeightDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_FestivalVoiceWeightData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_FestivalVoiceWeightData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_FestivalVoiceWeightData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_FestivalVoiceWeightData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_FestivalVoiceWeightData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_FestivalVoiceWeightData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_FestivalVoiceWeightData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_FestivalVoiceWeightDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_FestivalVoiceWeightDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_FestivalVoiceWeightDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_FestivalVoiceWeightDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ExtraVoiceConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ExtraVoiceConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ExtraVoiceConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ExtraVoiceConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ExtraVoiceConfigData
    def VoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ExtraVoiceConfigData
    def ValidVoiceLang(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_ExtraVoiceConfigData
    def ValidVoiceLangAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_ExtraVoiceConfigData
    def ValidVoiceLangLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ExtraVoiceConfigData
    def ValidVoiceLangIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_ExtraVoiceConfigDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ExtraVoiceConfigDataAddVoiceId(builder, voiceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(voiceId), 0)

def clz_Torappu_ExtraVoiceConfigDataAddValidVoiceLang(builder, validVoiceLang):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(validVoiceLang), 0)

def clz_Torappu_ExtraVoiceConfigDataStartValidVoiceLangVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ExtraVoiceConfigDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ExtraVoiceConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ExtraVoiceConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ExtraVoiceConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ExtraVoiceConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ExtraVoiceConfigData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ExtraVoiceConfigData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ExtraVoiceConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ExtraVoiceConfigDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ExtraVoiceConfigDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ExtraVoiceConfigDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ExtraVoiceConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharWordTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharWordTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharWordTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharWordTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharWordTable
    def CharWords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharWordData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def CharWordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def CharWordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_CharWordTable
    def CharExtraWords(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_CharExtraWordData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def CharExtraWordsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def CharExtraWordsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_CharWordTable
    def VoiceLangDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_VoiceLangData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def VoiceLangDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def VoiceLangDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_CharWordTable
    def DefaultLangType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordTable
    def NewTagList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_CharWordTable
    def NewTagListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def NewTagListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_CharWordTable
    def VoiceLangTypeDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VoiceLangType__clz_Torappu_VoiceLangTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def VoiceLangTypeDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def VoiceLangTypeDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_CharWordTable
    def VoiceLangGroupTypeDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VoiceLangGroupType__clz_Torappu_VoiceLangGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def VoiceLangGroupTypeDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def VoiceLangGroupTypeDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_CharWordTable
    def CharDefaultTypeDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__enum__Torappu_VoiceLangType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def CharDefaultTypeDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def CharDefaultTypeDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_CharWordTable
    def StartTimeWithTypeDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_VoiceLangType__list_clz_Torappu_NewVoiceTimeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def StartTimeWithTypeDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def StartTimeWithTypeDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_CharWordTable
    def DisplayGroupTypeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_CharWordTable
    def DisplayGroupTypeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_CharWordTable
    def DisplayGroupTypeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def DisplayGroupTypeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_CharWordTable
    def DisplayTypeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_CharWordTable
    def DisplayTypeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_CharWordTable
    def DisplayTypeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def DisplayTypeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_CharWordTable
    def PlayVoiceRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharWordTable
    def FesVoiceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FestivalVoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def FesVoiceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def FesVoiceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_CharWordTable
    def FesVoiceWeight(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_FestivalVoiceWeightData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def FesVoiceWeightLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def FesVoiceWeightIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_CharWordTable
    def ExtraVoiceConfigData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ExtraVoiceConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_CharWordTable
    def ExtraVoiceConfigDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_CharWordTable
    def ExtraVoiceConfigDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

def clz_Torappu_CharWordTableStart(builder):
    builder.StartObject(15)

def clz_Torappu_CharWordTableAddCharWords(builder, charWords):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charWords), 0)

def clz_Torappu_CharWordTableStartCharWordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddCharExtraWords(builder, charExtraWords):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charExtraWords), 0)

def clz_Torappu_CharWordTableStartCharExtraWordsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddVoiceLangDict(builder, voiceLangDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(voiceLangDict), 0)

def clz_Torappu_CharWordTableStartVoiceLangDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddDefaultLangType(builder, defaultLangType):
    builder.PrependInt32Slot(3, defaultLangType, 0)

def clz_Torappu_CharWordTableAddNewTagList(builder, newTagList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(newTagList), 0)

def clz_Torappu_CharWordTableStartNewTagListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddVoiceLangTypeDict(builder, voiceLangTypeDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(voiceLangTypeDict), 0)

def clz_Torappu_CharWordTableStartVoiceLangTypeDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddVoiceLangGroupTypeDict(builder, voiceLangGroupTypeDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(voiceLangGroupTypeDict), 0)

def clz_Torappu_CharWordTableStartVoiceLangGroupTypeDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddCharDefaultTypeDict(builder, charDefaultTypeDict):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(charDefaultTypeDict), 0)

def clz_Torappu_CharWordTableStartCharDefaultTypeDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddStartTimeWithTypeDict(builder, startTimeWithTypeDict):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(startTimeWithTypeDict), 0)

def clz_Torappu_CharWordTableStartStartTimeWithTypeDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddDisplayGroupTypeList(builder, displayGroupTypeList):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(displayGroupTypeList), 0)

def clz_Torappu_CharWordTableStartDisplayGroupTypeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddDisplayTypeList(builder, displayTypeList):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(displayTypeList), 0)

def clz_Torappu_CharWordTableStartDisplayTypeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddPlayVoiceRange(builder, playVoiceRange):
    builder.PrependInt32Slot(11, playVoiceRange, 0)

def clz_Torappu_CharWordTableAddFesVoiceData(builder, fesVoiceData):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(fesVoiceData), 0)

def clz_Torappu_CharWordTableStartFesVoiceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddFesVoiceWeight(builder, fesVoiceWeight):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(fesVoiceWeight), 0)

def clz_Torappu_CharWordTableStartFesVoiceWeightVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableAddExtraVoiceConfigData(builder, extraVoiceConfigData):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(extraVoiceConfigData), 0)

def clz_Torappu_CharWordTableStartExtraVoiceConfigDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_CharWordTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_CharWordTable
