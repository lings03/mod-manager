# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_MiniActTrialData_RuleType(object):
    NONE = 0
    TITLE = 1
    CONTENT = 2


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_ActArchivePicType(object):
    IMAGE = 0
    BACKGROUND = 1
    ENDING_IMAGE = 2
    ROGUE_IMAGE = 3


class enum__Torappu_ActArchiveResData_ArchiveNewsLineType(object):
    TextContent = 0
    ImageContent = 1


class enum__Torappu_Act17sideData_ChapterIconType(object):
    NORMAL = 0
    EX = 1
    HARD = 2


class clz_Torappu_MiniActTrialData_RuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MiniActTrialData_RuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MiniActTrialData_RuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MiniActTrialData_RuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MiniActTrialData_RuleData
    def RuleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MiniActTrialData_RuleData
    def RuleText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_MiniActTrialData_RuleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_MiniActTrialData_RuleDataAddRuleType(builder, ruleType):
    builder.PrependInt32Slot(0, ruleType, 0)

def clz_Torappu_MiniActTrialData_RuleDataAddRuleText(builder, ruleText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ruleText), 0)

def clz_Torappu_MiniActTrialData_RuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_MiniActTrialData_MiniActTrialRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MiniActTrialData_MiniActTrialRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MiniActTrialData_MiniActTrialRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def TrialRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def ActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def TargetStoryCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MiniActTrialData_MiniActTrialRewardData
    def Item(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataAddTrialRewardId(builder, trialRewardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trialRewardId), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataAddOrderId(builder, orderId):
    builder.PrependInt32Slot(1, orderId, 0)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataAddActId(builder, actId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actId), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataAddTargetStoryCount(builder, targetStoryCount):
    builder.PrependInt32Slot(3, targetStoryCount, 0)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataAddItem(builder, item):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(item), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MiniActTrialData_MiniActTrialSingleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MiniActTrialData_MiniActTrialSingleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MiniActTrialData_MiniActTrialSingleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def ActId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def RewardStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def ThemeColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MiniActTrialData_MiniActTrialRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddActId(builder, actId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actId), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddRewardStartTime(builder, rewardStartTime):
    builder.PrependInt64Slot(1, rewardStartTime, 0)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddThemeColor(builder, themeColor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(themeColor), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MiniActTrialData_MiniActTrialSingleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MiniActTrialData_MiniActTrialSingleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_MiniActTrialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MiniActTrialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MiniActTrialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MiniActTrialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MiniActTrialData
    def PreShowDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MiniActTrialData
    def RuleDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MiniActTrialData_RuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MiniActTrialData
    def RuleDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MiniActTrialData
    def RuleDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MiniActTrialData
    def MiniActTrialDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_MiniActTrialData_MiniActTrialSingleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MiniActTrialData
    def MiniActTrialDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MiniActTrialData
    def MiniActTrialDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_MiniActTrialDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_MiniActTrialDataAddPreShowDays(builder, preShowDays):
    builder.PrependInt32Slot(0, preShowDays, 0)

def clz_Torappu_MiniActTrialDataAddRuleDataList(builder, ruleDataList):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ruleDataList), 0)

def clz_Torappu_MiniActTrialDataStartRuleDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MiniActTrialDataAddMiniActTrialDataMap(builder, miniActTrialDataMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(miniActTrialDataMap), 0)

def clz_Torappu_MiniActTrialDataStartMiniActTrialDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MiniActTrialDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_PicArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_PicArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_PicArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def AssetPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def PicDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def KvId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddAssetPath(builder, assetPath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(assetPath), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddType(builder, type):
    builder.PrependInt32Slot(3, type, 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddSubType(builder, subType):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(subType), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddPicDescription(builder, picDescription):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(picDescription), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddKvId(builder, kvId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(kvId), 0)

def clz_Torappu_ActArchiveResData_PicArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_PicArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_AudioArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_AudioArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_AudioArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_AudioArchiveResItemDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActArchiveResData_AudioArchiveResItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveResData_AudioArchiveResItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveResData_AudioArchiveResItemDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActArchiveResData_AudioArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_AudioArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_AvgArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_AvgArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_AvgArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def BreifPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def ContentPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def ImagePath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def RawBrief(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def TitleIconPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddBreifPath(builder, breifPath):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(breifPath), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddContentPath(builder, contentPath):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(contentPath), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddImagePath(builder, imagePath):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(imagePath), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddRawBrief(builder, rawBrief):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rawBrief), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddTitleIconPath(builder, titleIconPath):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(titleIconPath), 0)

def clz_Torappu_ActArchiveResData_AvgArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_AvgArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_StoryArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_StoryArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_StoryArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Date(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Pic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def TitlePic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddDate(builder, date):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(date), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddPic(builder, pic):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(pic), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddTitlePic(builder, titlePic):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(titlePic), 0)

def clz_Torappu_ActArchiveResData_StoryArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_StoryArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_NewsFormatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_NewsFormatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_NewsFormatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_NewsFormatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_NewsFormatData
    def TypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsFormatData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsFormatData
    def TypeLogo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsFormatData
    def TypeMainLogo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsFormatData
    def TypeMainSealing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_NewsFormatDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActArchiveResData_NewsFormatDataAddTypeId(builder, typeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(typeId), 0)

def clz_Torappu_ActArchiveResData_NewsFormatDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_ActArchiveResData_NewsFormatDataAddTypeLogo(builder, typeLogo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeLogo), 0)

def clz_Torappu_ActArchiveResData_NewsFormatDataAddTypeMainLogo(builder, typeMainLogo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(typeMainLogo), 0)

def clz_Torappu_ActArchiveResData_NewsFormatDataAddTypeMainSealing(builder, typeMainSealing):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(typeMainSealing), 0)

def clz_Torappu_ActArchiveResData_NewsFormatDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_ActivityNewsLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_ActivityNewsLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_ActivityNewsLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_ActivityNewsLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_ActivityNewsLine
    def LineType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveResData_ActivityNewsLine
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_ActivityNewsLineStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveResData_ActivityNewsLineAddLineType(builder, lineType):
    builder.PrependInt32Slot(0, lineType, 0)

def clz_Torappu_ActArchiveResData_ActivityNewsLineAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_ActArchiveResData_ActivityNewsLineEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_NewsArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_NewsArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_NewsArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_NewsFormatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsAuthor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def ParamP0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def ParamK(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def ParamR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsLines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActArchiveResData_ActivityNewsLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsLinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def NewsLinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddNewsType(builder, newsType):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(newsType), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddNewsFormat(builder, newsFormat):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(newsFormat), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddNewsText(builder, newsText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(newsText), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddNewsAuthor(builder, newsAuthor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(newsAuthor), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddParamP0(builder, paramP0):
    builder.PrependInt32Slot(6, paramP0, 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddParamK(builder, paramK):
    builder.PrependInt32Slot(7, paramK, 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddParamR(builder, paramR):
    builder.PrependFloat32Slot(8, paramR, 0.0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddNewsLines(builder, newsLines):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(newsLines), 0)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataStartNewsLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResData_NewsArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_NewsArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_LandmarkArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def LandmarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def LandmarkName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def LandmarkPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def LandmarkDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def LandmarkEngName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddLandmarkId(builder, landmarkId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkId), 0)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddLandmarkName(builder, landmarkName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkName), 0)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddLandmarkPic(builder, landmarkPic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkPic), 0)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddLandmarkDesc(builder, landmarkDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkDesc), 0)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddLandmarkEngName(builder, landmarkEngName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkEngName), 0)

def clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_LogArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_LogArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_LogArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def LogId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def LogDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_LogArchiveResItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveResData_LogArchiveResItemDataAddLogId(builder, logId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(logId), 0)

def clz_Torappu_ActArchiveResData_LogArchiveResItemDataAddLogDesc(builder, logDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(logDesc), 0)

def clz_Torappu_ActArchiveResData_LogArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_LogArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def TitleName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def StoryName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def TextId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddTitleName(builder, titleName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(titleName), 0)

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddStoryName(builder, storyName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(storyName), 0)

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddTextId(builder, textId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(textId), 0)

def clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveResData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveResData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveResData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveResData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveResData
    def Pics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_PicArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def PicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def PicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def Audios(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_AudioArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def AudiosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def AudiosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def Avgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_AvgArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def AvgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def AvgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def Stories(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_StoryArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def StoriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def StoriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def News(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_NewsArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def NewsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def NewsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def Landmarks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_LandmarkArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def LandmarksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def LandmarksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def Logs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_LogArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def LogsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def LogsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActArchiveResData
    def ChallengeBooks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveResData_ChallengeBookArchiveResItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveResData
    def ChallengeBooksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveResData
    def ChallengeBooksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_ActArchiveResDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActArchiveResDataAddPics(builder, pics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pics), 0)

def clz_Torappu_ActArchiveResDataStartPicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddAudios(builder, audios):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(audios), 0)

def clz_Torappu_ActArchiveResDataStartAudiosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddAvgs(builder, avgs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(avgs), 0)

def clz_Torappu_ActArchiveResDataStartAvgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddStories(builder, stories):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stories), 0)

def clz_Torappu_ActArchiveResDataStartStoriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddNews(builder, news):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(news), 0)

def clz_Torappu_ActArchiveResDataStartNewsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddLandmarks(builder, landmarks):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(landmarks), 0)

def clz_Torappu_ActArchiveResDataStartLandmarksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddLogs(builder, logs):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(logs), 0)

def clz_Torappu_ActArchiveResDataStartLogsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataAddChallengeBooks(builder, challengeBooks):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(challengeBooks), 0)

def clz_Torappu_ActArchiveResDataStartChallengeBooksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveResDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTimelineItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTimelineItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTimelineItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTimelineItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTimelineItemData
    def TimelineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTimelineItemData
    def TimelineSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def TimelineTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTimelineItemData
    def TimelineDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTimelineItemData
    def PicIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveTimelineItemData
    def PicIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def PicIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_ActArchiveTimelineItemData
    def AudioIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveTimelineItemData
    def AudioIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def AudioIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_ActArchiveTimelineItemData
    def AvgIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveTimelineItemData
    def AvgIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def AvgIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActArchiveTimelineItemData
    def StoryIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveTimelineItemData
    def StoryIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def StoryIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ActArchiveTimelineItemData
    def NewsIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveTimelineItemData
    def NewsIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineItemData
    def NewsIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

def clz_Torappu_ActArchiveTimelineItemDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_ActArchiveTimelineItemDataAddTimelineId(builder, timelineId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timelineId), 0)

def clz_Torappu_ActArchiveTimelineItemDataAddTimelineSortId(builder, timelineSortId):
    builder.PrependInt32Slot(1, timelineSortId, 0)

def clz_Torappu_ActArchiveTimelineItemDataAddTimelineTitle(builder, timelineTitle):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timelineTitle), 0)

def clz_Torappu_ActArchiveTimelineItemDataAddTimelineDes(builder, timelineDes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(timelineDes), 0)

def clz_Torappu_ActArchiveTimelineItemDataAddPicIdList(builder, picIdList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(picIdList), 0)

def clz_Torappu_ActArchiveTimelineItemDataStartPicIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineItemDataAddAudioIdList(builder, audioIdList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(audioIdList), 0)

def clz_Torappu_ActArchiveTimelineItemDataStartAudioIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineItemDataAddAvgIdList(builder, avgIdList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(avgIdList), 0)

def clz_Torappu_ActArchiveTimelineItemDataStartAvgIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineItemDataAddStoryIdList(builder, storyIdList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(storyIdList), 0)

def clz_Torappu_ActArchiveTimelineItemDataStartStoryIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineItemDataAddNewsIdList(builder, newsIdList):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(newsIdList), 0)

def clz_Torappu_ActArchiveTimelineItemDataStartNewsIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTimelineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTimelineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTimelineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTimelineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTimelineData
    def TimelineList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActArchiveTimelineItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveTimelineData
    def TimelineListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTimelineData
    def TimelineListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveTimelineDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveTimelineDataAddTimelineList(builder, timelineList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timelineList), 0)

def clz_Torappu_ActArchiveTimelineDataStartTimelineListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTimelineDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveMusicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveMusicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveMusicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveMusicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveMusicItemData
    def MusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveMusicItemData
    def MusicSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveMusicItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveMusicItemDataAddMusicId(builder, musicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(musicId), 0)

def clz_Torappu_ActArchiveMusicItemDataAddMusicSortId(builder, musicSortId):
    builder.PrependInt32Slot(1, musicSortId, 0)

def clz_Torappu_ActArchiveMusicItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveMusicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveMusicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveMusicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveMusicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveMusicItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveMusicItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveMusicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveMusicItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveMusicItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveMusicItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveMusicItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveMusicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveMusicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveMusicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveMusicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveMusicData
    def Musics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveMusicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveMusicData
    def MusicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveMusicData
    def MusicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveMusicDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveMusicDataAddMusics(builder, musics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(musics), 0)

def clz_Torappu_ActArchiveMusicDataStartMusicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveMusicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchivePicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchivePicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchivePicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchivePicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchivePicItemData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchivePicItemData
    def PicSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchivePicItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchivePicItemDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_ActArchivePicItemDataAddPicSortId(builder, picSortId):
    builder.PrependInt32Slot(1, picSortId, 0)

def clz_Torappu_ActArchivePicItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchivePicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchivePicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchivePicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchivePicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchivePicItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchivePicItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchivePicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchivePicItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchivePicItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchivePicItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchivePicItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchivePicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchivePicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchivePicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchivePicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchivePicData
    def Pics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchivePicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchivePicData
    def PicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchivePicData
    def PicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchivePicDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchivePicDataAddPics(builder, pics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pics), 0)

def clz_Torappu_ActArchivePicDataStartPicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchivePicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveStoryItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveStoryItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveStoryItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveStoryItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveStoryItemData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveStoryItemData
    def StorySortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveStoryItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveStoryItemDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_ActArchiveStoryItemDataAddStorySortId(builder, storySortId):
    builder.PrependInt32Slot(1, storySortId, 0)

def clz_Torappu_ActArchiveStoryItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveStoryItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveStoryItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveStoryItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveStoryItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveStoryItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveStoryItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveStoryItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveStoryItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveStoryItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveStoryItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveStoryItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveStoryData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveStoryData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveStoryData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveStoryData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveStoryData
    def Stories(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveStoryItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveStoryData
    def StoriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveStoryData
    def StoriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveStoryDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveStoryDataAddStories(builder, stories):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stories), 0)

def clz_Torappu_ActArchiveStoryDataStartStoriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveStoryDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveAvgItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveAvgItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveAvgItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveAvgItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveAvgItemData
    def AvgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveAvgItemData
    def AvgSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveAvgItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveAvgItemDataAddAvgId(builder, avgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(avgId), 0)

def clz_Torappu_ActArchiveAvgItemDataAddAvgSortId(builder, avgSortId):
    builder.PrependInt32Slot(1, avgSortId, 0)

def clz_Torappu_ActArchiveAvgItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveAvgItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveAvgItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveAvgItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveAvgItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveAvgItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveAvgItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveAvgItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveAvgItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveAvgItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveAvgItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveAvgItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveAvgData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveAvgData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveAvgData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveAvgData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveAvgData
    def Avgs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveAvgItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveAvgData
    def AvgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveAvgData
    def AvgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveAvgDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveAvgDataAddAvgs(builder, avgs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(avgs), 0)

def clz_Torappu_ActArchiveAvgDataStartAvgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveAvgDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveNewsItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveNewsItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveNewsItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveNewsItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveNewsItemData
    def NewsId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveNewsItemData
    def NewsSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveNewsItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveNewsItemDataAddNewsId(builder, newsId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(newsId), 0)

def clz_Torappu_ActArchiveNewsItemDataAddNewsSortId(builder, newsSortId):
    builder.PrependInt32Slot(1, newsSortId, 0)

def clz_Torappu_ActArchiveNewsItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveNewsItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveNewsItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveNewsItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveNewsItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveNewsItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveNewsItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveNewsItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveNewsItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveNewsItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveNewsItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveNewsItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveNewsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveNewsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveNewsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveNewsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveNewsData
    def News(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveNewsItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveNewsData
    def NewsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveNewsData
    def NewsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveNewsDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveNewsDataAddNews(builder, news):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(news), 0)

def clz_Torappu_ActArchiveNewsDataStartNewsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveNewsDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveLandmarkItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveLandmarkItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveLandmarkItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveLandmarkItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveLandmarkItemData
    def LandmarkId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveLandmarkItemData
    def LandmarkSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveLandmarkItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveLandmarkItemDataAddLandmarkId(builder, landmarkId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(landmarkId), 0)

def clz_Torappu_ActArchiveLandmarkItemDataAddLandmarkSortId(builder, landmarkSortId):
    builder.PrependInt32Slot(1, landmarkSortId, 0)

def clz_Torappu_ActArchiveLandmarkItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveLandmarkItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveLandmarkItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveLandmarkItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveLandmarkItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveLandmarkItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveLandmarkItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveLandmarkItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveLandmarkItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveLandmarkItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveLandmarkItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveLandmarkItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChapterLogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChapterLogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChapterLogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChapterLogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChapterLogData
    def ChapterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChapterLogData
    def DisplayId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChapterLogData
    def UnlockDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChapterLogData
    def Logs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_ActArchiveChapterLogData
    def LogsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveChapterLogData
    def LogsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_ActArchiveChapterLogData
    def ChapterIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveChapterLogDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_ActArchiveChapterLogDataAddChapterName(builder, chapterName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chapterName), 0)

def clz_Torappu_ActArchiveChapterLogDataAddDisplayId(builder, displayId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayId), 0)

def clz_Torappu_ActArchiveChapterLogDataAddUnlockDes(builder, unlockDes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDes), 0)

def clz_Torappu_ActArchiveChapterLogDataAddLogs(builder, logs):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(logs), 0)

def clz_Torappu_ActArchiveChapterLogDataStartLogsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveChapterLogDataAddChapterIcon(builder, chapterIcon):
    builder.PrependInt32Slot(4, chapterIcon, 0)

def clz_Torappu_ActArchiveChapterLogDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveChapterLogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveChapterLogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveChapterLogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveChapterLogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveChapterLogData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveChapterLogData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChapterLogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveChapterLogDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveChapterLogDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveChapterLogDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveChapterLogDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChallengeBookItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChallengeBookItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChallengeBookItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChallengeBookItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChallengeBookItemData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChallengeBookItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveChallengeBookItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_ActArchiveChallengeBookItemDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_ActArchiveChallengeBookItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActArchiveChallengeBookItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveChallengeBookItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveChallengeBookItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveChallengeBookItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveChallengeBookItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveChallengeBookItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveChallengeBookItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChallengeBookItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveChallengeBookItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveChallengeBookItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveChallengeBookItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveChallengeBookItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChallengeBookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChallengeBookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChallengeBookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChallengeBookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChallengeBookData
    def Stories(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveChallengeBookItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveChallengeBookData
    def StoriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveChallengeBookData
    def StoriesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveChallengeBookDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveChallengeBookDataAddStories(builder, stories):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stories), 0)

def clz_Torappu_ActArchiveChallengeBookDataStartStoriesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveChallengeBookDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveComponentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveComponentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveComponentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveComponentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveComponentData
    def Timeline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveTimelineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def Music(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveMusicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def Pic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchivePicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def Story(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveStoryData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def Avg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveAvgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def News(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveNewsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def Landmark(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveLandmarkItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def LandmarkLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveComponentData
    def LandmarkIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_ActArchiveComponentData
    def Log(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveChapterLogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentData
    def LogLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveComponentData
    def LogIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_ActArchiveComponentData
    def ChallengeBook(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChallengeBookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_ActArchiveComponentDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_ActArchiveComponentDataAddTimeline(builder, timeline):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(timeline), 0)

def clz_Torappu_ActArchiveComponentDataAddMusic(builder, music):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(music), 0)

def clz_Torappu_ActArchiveComponentDataAddPic(builder, pic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pic), 0)

def clz_Torappu_ActArchiveComponentDataAddStory(builder, story):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(story), 0)

def clz_Torappu_ActArchiveComponentDataAddAvg(builder, avg):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(avg), 0)

def clz_Torappu_ActArchiveComponentDataAddNews(builder, news):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(news), 0)

def clz_Torappu_ActArchiveComponentDataAddLandmark(builder, landmark):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(landmark), 0)

def clz_Torappu_ActArchiveComponentDataStartLandmarkVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveComponentDataAddLog(builder, log):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(log), 0)

def clz_Torappu_ActArchiveComponentDataStartLogVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveComponentDataAddChallengeBook(builder, challengeBook):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(challengeBook), 0)

def clz_Torappu_ActArchiveComponentDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveComponentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveComponentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveComponentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveComponentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveComponentData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveComponentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveComponentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveComponentDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveComponentDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveComponentDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveComponentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveComponentTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveComponentTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveComponentTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveComponentTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveComponentTable
    def Components(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveComponentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveComponentTable
    def ComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveComponentTable
    def ComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveComponentTableStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveComponentTableAddComponents(builder, components):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(components), 0)

def clz_Torappu_ActArchiveComponentTableStartComponentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveComponentTableEnd(builder):
    return builder.EndObject()



class clz_Torappu_TrainingCampStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TrainingCampStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TrainingCampStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TrainingCampStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TrainingCampStageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def StageIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TrainingCampStageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def EndCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampStageData
    def UpdateTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TrainingCampStageDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_TrainingCampStageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_TrainingCampStageDataAddStageIconId(builder, stageIconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageIconId), 0)

def clz_Torappu_TrainingCampStageDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_TrainingCampStageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_TrainingCampStageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_TrainingCampStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_TrainingCampStageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_TrainingCampStageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_TrainingCampStageDataAddEndCharId(builder, endCharId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(endCharId), 0)

def clz_Torappu_TrainingCampStageDataAddUpdateTs(builder, updateTs):
    builder.PrependInt64Slot(9, updateTs, 0)

def clz_Torappu_TrainingCampStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_TrainingCampStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_TrainingCampStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_TrainingCampStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_TrainingCampStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_TrainingCampStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_TrainingCampStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_TrainingCampStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_TrainingCampStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_TrainingCampStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_TrainingCampStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_TrainingCampStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_NewTrainingCampStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_NewTrainingCampStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_NewTrainingCampStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_NewTrainingCampStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_NewTrainingCampStageData
    def UpdateTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_NewTrainingCampStageData
    def Stages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_NewTrainingCampStageData
    def StagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_NewTrainingCampStageData
    def StagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_NewTrainingCampStageDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_NewTrainingCampStageDataAddUpdateTs(builder, updateTs):
    builder.PrependInt64Slot(0, updateTs, 0)

def clz_Torappu_NewTrainingCampStageDataAddStages(builder, stages):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stages), 0)

def clz_Torappu_NewTrainingCampStageDataStartStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_NewTrainingCampStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TrainingCampConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TrainingCampConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TrainingCampConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TrainingCampConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TrainingCampConsts
    def UnlockStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampConsts
    def UpdateDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TrainingCampConsts
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_TrainingCampConstsStart(builder):
    builder.StartObject(3)

def clz_Torappu_TrainingCampConstsAddUnlockStageId(builder, unlockStageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockStageId), 0)

def clz_Torappu_TrainingCampConstsAddUpdateDesc(builder, updateDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(updateDesc), 0)

def clz_Torappu_TrainingCampConstsAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_TrainingCampConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_TrainingCampData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TrainingCampData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TrainingCampData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TrainingCampData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TrainingCampData
    def StageData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_TrainingCampStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TrainingCampData
    def StageDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TrainingCampData
    def StageDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_TrainingCampData
    def NewTrainingCampStages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_NewTrainingCampStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TrainingCampData
    def NewTrainingCampStagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TrainingCampData
    def NewTrainingCampStagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_TrainingCampData
    def Consts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_TrainingCampConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_TrainingCampDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TrainingCampDataAddStageData(builder, stageData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageData), 0)

def clz_Torappu_TrainingCampDataStartStageDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TrainingCampDataAddNewTrainingCampStages(builder, newTrainingCampStages):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(newTrainingCampStages), 0)

def clz_Torappu_TrainingCampDataStartNewTrainingCampStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TrainingCampDataAddConsts(builder, consts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(consts), 0)

def clz_Torappu_TrainingCampDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_StoryReviewMetaTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_StoryReviewMetaTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_StoryReviewMetaTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_StoryReviewMetaTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_StoryReviewMetaTable
    def MiniActTrialData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MiniActTrialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StoryReviewMetaTable
    def ActArchiveResData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveResData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StoryReviewMetaTable
    def ActArchiveData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveComponentTable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_StoryReviewMetaTable
    def TrainingCampData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_TrainingCampData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_StoryReviewMetaTableStart(builder):
    builder.StartObject(4)

def clz_Torappu_StoryReviewMetaTableAddMiniActTrialData(builder, miniActTrialData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(miniActTrialData), 0)

def clz_Torappu_StoryReviewMetaTableAddActArchiveResData(builder, actArchiveResData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actArchiveResData), 0)

def clz_Torappu_StoryReviewMetaTableAddActArchiveData(builder, actArchiveData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actArchiveData), 0)

def clz_Torappu_StoryReviewMetaTableAddTrainingCampData(builder, trainingCampData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(trainingCampData), 0)

def clz_Torappu_StoryReviewMetaTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_StoryReviewMetaTable
