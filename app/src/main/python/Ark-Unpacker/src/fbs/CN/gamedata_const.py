# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_SubProfessionAttackType(object):
    NONE = 0
    PHYSICAL = 1
    MAGICAL = 2
    HEAL = 3


class list_int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_int
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # list_int
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # list_int
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_int
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_intStart(builder):
    builder.StartObject(1)

def list_intAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_intStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_intEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_GameDataConsts_CharAssistRefreshTimeState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GameDataConsts_CharAssistRefreshTimeState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GameDataConsts_CharAssistRefreshTimeState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GameDataConsts_CharAssistRefreshTimeState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GameDataConsts_CharAssistRefreshTimeState
    def Hour(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts_CharAssistRefreshTimeState
    def Minute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateStart(builder):
    builder.StartObject(2)

def clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateAddHour(builder, hour):
    builder.PrependInt32Slot(0, hour, 0)

def clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateAddMinute(builder, minute):
    builder.PrependInt32Slot(1, minute, 0)

def clz_Torappu_GameDataConsts_CharAssistRefreshTimeStateEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class dict__int__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__int__intStart(builder):
    builder.StartObject(2)

def dict__int__intAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__int__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_TermDescriptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TermDescriptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TermDescriptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TermDescriptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TermDescriptionData
    def TermId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TermDescriptionData
    def TermName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TermDescriptionData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_TermDescriptionDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TermDescriptionDataAddTermId(builder, termId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(termId), 0)

def clz_Torappu_TermDescriptionDataAddTermName(builder, termName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(termName), 0)

def clz_Torappu_TermDescriptionDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_TermDescriptionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_TermDescriptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_TermDescriptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_TermDescriptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_TermDescriptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_TermDescriptionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_TermDescriptionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_TermDescriptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_TermDescriptionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_TermDescriptionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_TermDescriptionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_TermDescriptionDataEnd(builder):
    return builder.EndObject()



class dict__string__enum__Torappu_SubProfessionAttackType(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__enum__Torappu_SubProfessionAttackType()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__enum__Torappu_SubProfessionAttackType(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__enum__Torappu_SubProfessionAttackType
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__enum__Torappu_SubProfessionAttackType
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__enum__Torappu_SubProfessionAttackType
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__enum__Torappu_SubProfessionAttackTypeStart(builder):
    builder.StartObject(2)

def dict__string__enum__Torappu_SubProfessionAttackTypeAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__enum__Torappu_SubProfessionAttackTypeAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__enum__Torappu_SubProfessionAttackTypeEnd(builder):
    return builder.EndObject()



class clz_Torappu_GameDataConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GameDataConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GameDataConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GameDataConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GameDataConsts
    def MaxPlayerLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerExpMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerExpMapAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerExpMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerExpMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_GameDataConsts
    def PlayerApMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerApMapAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerApMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def PlayerApMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_GameDataConsts
    def MaxLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def MaxLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def MaxLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_GameDataConsts
    def CharacterExpMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def CharacterExpMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def CharacterExpMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_GameDataConsts
    def CharacterUpgradeCostMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def CharacterUpgradeCostMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def CharacterUpgradeCostMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_GameDataConsts
    def EvolveGoldCost(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def EvolveGoldCostLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def EvolveGoldCostIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_GameDataConsts
    def CompleteGainBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_GameDataConsts
    def PlayerApRegenSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def MaxPracticeTicket(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def AdvancedGachaCrystalCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def CompleteCrystalBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def InitPlayerGold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def InitPlayerDiamondShard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def InitCampaignTotalFee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def InitRecruitTagList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def InitRecruitTagListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def InitRecruitTagListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def InitRecruitTagListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_GameDataConsts
    def InitCharIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GameDataConsts
    def InitCharIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def InitCharIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_GameDataConsts
    def AttackMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_GameDataConsts
    def DefMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_GameDataConsts
    def HpMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_GameDataConsts
    def ReMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_GameDataConsts
    def DiamondToShdRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def RequestSameFriendCd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def BaseMaxFriendNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def HardDiamondDrop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def InstFinDmdShdCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def EasyCrystalBonus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def DiamondMaterialToShardExchangeRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def DiamondHandbookStageGain(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def ApBuyCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def ApBuyThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def CreditLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def MonthlySubRemainTimeLimitDays(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def FriendAssistRarityLimit(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def FriendAssistRarityLimitAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def FriendAssistRarityLimitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def FriendAssistRarityLimitIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # clz_Torappu_GameDataConsts
    def MainlineCompatibleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def MainlineToughDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def MainlineEasyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def MainlineNormalDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def RejectSpCharMission(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def AddedRewardDisplayZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def RichTextStyles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def RichTextStylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def RichTextStylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # clz_Torappu_GameDataConsts
    def CharAssistRefreshTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GameDataConsts_CharAssistRefreshTimeState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def CharAssistRefreshTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def CharAssistRefreshTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # clz_Torappu_GameDataConsts
    def NormalRecruitLockedString(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GameDataConsts
    def NormalRecruitLockedStringLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def NormalRecruitLockedStringIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # clz_Torappu_GameDataConsts
    def CommonPotentialLvlUpCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def WeeklyOverrideDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def VoucherDiv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def RecruitPoolVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def V006RecruitTimeStep1Refresh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def V006RecruitTimeStep2Check(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def V006RecruitTimeStep2Flush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def BuyApTimeNoLimitFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsLmgtsenabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def LegacyTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def LegacyItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def LegacyItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def LegacyItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # clz_Torappu_GameDataConsts
    def UseAssistSocialPt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def UseAssistSocialPtMaxCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def AssistBeUsedSocialPt(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def AssistBeUsedSocialPtLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def AssistBeUsedSocialPtIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        return o == 0

    # clz_Torappu_GameDataConsts
    def PushForces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def PushForcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def PushForcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def PushForcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        return o == 0

    # clz_Torappu_GameDataConsts
    def PushForceZeroIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def NormalGachaUnlockPrice(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def NormalGachaUnlockPriceAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def NormalGachaUnlockPriceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def NormalGachaUnlockPriceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        return o == 0

    # clz_Torappu_GameDataConsts
    def PullForces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_GameDataConsts
    def PullForcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_GameDataConsts
    def PullForcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def PullForcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # clz_Torappu_GameDataConsts
    def PullForceZeroIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def MultiInComeByRank(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GameDataConsts
    def MultiInComeByRankLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def MultiInComeByRankIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # clz_Torappu_GameDataConsts
    def LmtgstoEpgsratio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def NewBeeGiftEpgs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def LMtgsdescConstOne(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def LMtgsdescConstTwo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def DefCdprimColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def DefCdsecColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def MailBannerType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GameDataConsts
    def MailBannerTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def MailBannerTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        return o == 0

    # clz_Torappu_GameDataConsts
    def MonthlySubWarningTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def UnlimitSkinOutOfTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(146))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def ReplicateShopStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(148))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def Tso(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(150))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def IsDynIllustEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(152))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsDynIllustStartEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(154))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsClassicQcshopEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(156))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsRoguelikeTopicFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(158))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsSandboxPermFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(160))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsRoguelikeAvgAchieveFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(162))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsClassicPotentialItemFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(164))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsClassicGachaPoolFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(166))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsSpecialGachaPoolFuncEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(168))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def IsVoucherClassicItemDistinguishable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(170))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def VoucherSkinRedeem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(172))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def VoucherSkinDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(174))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def CharmEquipCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(176))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def TermDescriptionDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_TermDescriptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def TermDescriptionDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def TermDescriptionDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(178))
        return o == 0

    # clz_Torappu_GameDataConsts
    def StoryReviewUnlockItemLackTip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(180))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def DataVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(182))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def ResPrefVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(184))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def AnnounceWebBusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(186))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_GameDataConsts
    def DefaultMinContinuousBattleTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(188))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def DefaultMaxContinuousBattleTimes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(190))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GameDataConsts
    def ContinuousActionOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(192))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_GameDataConsts
    def SubProfessionDamageTypePairs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__enum__Torappu_SubProfessionAttackType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_GameDataConsts
    def SubProfessionDamageTypePairsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def SubProfessionDamageTypePairsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(194))
        return o == 0

    # clz_Torappu_GameDataConsts
    def ClassicProtectChar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_GameDataConsts
    def ClassicProtectCharLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_GameDataConsts
    def ClassicProtectCharIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(196))
        return o == 0

def clz_Torappu_GameDataConstsStart(builder):
    builder.StartObject(97)

def clz_Torappu_GameDataConstsAddMaxPlayerLevel(builder, maxPlayerLevel):
    builder.PrependInt32Slot(0, maxPlayerLevel, 0)

def clz_Torappu_GameDataConstsAddPlayerExpMap(builder, playerExpMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(playerExpMap), 0)

def clz_Torappu_GameDataConstsStartPlayerExpMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddPlayerApMap(builder, playerApMap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(playerApMap), 0)

def clz_Torappu_GameDataConstsStartPlayerApMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddMaxLevel(builder, maxLevel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(maxLevel), 0)

def clz_Torappu_GameDataConstsStartMaxLevelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddCharacterExpMap(builder, characterExpMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(characterExpMap), 0)

def clz_Torappu_GameDataConstsStartCharacterExpMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddCharacterUpgradeCostMap(builder, characterUpgradeCostMap):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(characterUpgradeCostMap), 0)

def clz_Torappu_GameDataConstsStartCharacterUpgradeCostMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddEvolveGoldCost(builder, evolveGoldCost):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(evolveGoldCost), 0)

def clz_Torappu_GameDataConstsStartEvolveGoldCostVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddCompleteGainBonus(builder, completeGainBonus):
    builder.PrependFloat32Slot(7, completeGainBonus, 0.0)

def clz_Torappu_GameDataConstsAddPlayerApRegenSpeed(builder, playerApRegenSpeed):
    builder.PrependInt32Slot(8, playerApRegenSpeed, 0)

def clz_Torappu_GameDataConstsAddMaxPracticeTicket(builder, maxPracticeTicket):
    builder.PrependInt32Slot(9, maxPracticeTicket, 0)

def clz_Torappu_GameDataConstsAddAdvancedGachaCrystalCost(builder, advancedGachaCrystalCost):
    builder.PrependInt32Slot(10, advancedGachaCrystalCost, 0)

def clz_Torappu_GameDataConstsAddCompleteCrystalBonus(builder, completeCrystalBonus):
    builder.PrependInt32Slot(11, completeCrystalBonus, 0)

def clz_Torappu_GameDataConstsAddInitPlayerGold(builder, initPlayerGold):
    builder.PrependInt32Slot(12, initPlayerGold, 0)

def clz_Torappu_GameDataConstsAddInitPlayerDiamondShard(builder, initPlayerDiamondShard):
    builder.PrependInt32Slot(13, initPlayerDiamondShard, 0)

def clz_Torappu_GameDataConstsAddInitCampaignTotalFee(builder, initCampaignTotalFee):
    builder.PrependInt32Slot(14, initCampaignTotalFee, 0)

def clz_Torappu_GameDataConstsAddInitRecruitTagList(builder, initRecruitTagList):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(initRecruitTagList), 0)

def clz_Torappu_GameDataConstsStartInitRecruitTagListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddInitCharIdList(builder, initCharIdList):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(initCharIdList), 0)

def clz_Torappu_GameDataConstsStartInitCharIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddAttackMax(builder, attackMax):
    builder.PrependFloat32Slot(17, attackMax, 0.0)

def clz_Torappu_GameDataConstsAddDefMax(builder, defMax):
    builder.PrependFloat32Slot(18, defMax, 0.0)

def clz_Torappu_GameDataConstsAddHpMax(builder, hpMax):
    builder.PrependFloat32Slot(19, hpMax, 0.0)

def clz_Torappu_GameDataConstsAddReMax(builder, reMax):
    builder.PrependFloat32Slot(20, reMax, 0.0)

def clz_Torappu_GameDataConstsAddDiamondToShdRate(builder, diamondToShdRate):
    builder.PrependInt32Slot(21, diamondToShdRate, 0)

def clz_Torappu_GameDataConstsAddRequestSameFriendCd(builder, requestSameFriendCd):
    builder.PrependInt32Slot(22, requestSameFriendCd, 0)

def clz_Torappu_GameDataConstsAddBaseMaxFriendNum(builder, baseMaxFriendNum):
    builder.PrependInt32Slot(23, baseMaxFriendNum, 0)

def clz_Torappu_GameDataConstsAddHardDiamondDrop(builder, hardDiamondDrop):
    builder.PrependInt32Slot(24, hardDiamondDrop, 0)

def clz_Torappu_GameDataConstsAddInstFinDmdShdCost(builder, instFinDmdShdCost):
    builder.PrependInt32Slot(25, instFinDmdShdCost, 0)

def clz_Torappu_GameDataConstsAddEasyCrystalBonus(builder, easyCrystalBonus):
    builder.PrependInt32Slot(26, easyCrystalBonus, 0)

def clz_Torappu_GameDataConstsAddDiamondMaterialToShardExchangeRatio(builder, diamondMaterialToShardExchangeRatio):
    builder.PrependInt32Slot(27, diamondMaterialToShardExchangeRatio, 0)

def clz_Torappu_GameDataConstsAddDiamondHandbookStageGain(builder, diamondHandbookStageGain):
    builder.PrependInt32Slot(28, diamondHandbookStageGain, 0)

def clz_Torappu_GameDataConstsAddApBuyCost(builder, apBuyCost):
    builder.PrependInt32Slot(29, apBuyCost, 0)

def clz_Torappu_GameDataConstsAddApBuyThreshold(builder, apBuyThreshold):
    builder.PrependInt32Slot(30, apBuyThreshold, 0)

def clz_Torappu_GameDataConstsAddCreditLimit(builder, creditLimit):
    builder.PrependInt32Slot(31, creditLimit, 0)

def clz_Torappu_GameDataConstsAddMonthlySubRemainTimeLimitDays(builder, monthlySubRemainTimeLimitDays):
    builder.PrependInt32Slot(32, monthlySubRemainTimeLimitDays, 0)

def clz_Torappu_GameDataConstsAddFriendAssistRarityLimit(builder, friendAssistRarityLimit):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(friendAssistRarityLimit), 0)

def clz_Torappu_GameDataConstsStartFriendAssistRarityLimitVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddMainlineCompatibleDesc(builder, mainlineCompatibleDesc):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineCompatibleDesc), 0)

def clz_Torappu_GameDataConstsAddMainlineToughDesc(builder, mainlineToughDesc):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineToughDesc), 0)

def clz_Torappu_GameDataConstsAddMainlineEasyDesc(builder, mainlineEasyDesc):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineEasyDesc), 0)

def clz_Torappu_GameDataConstsAddMainlineNormalDesc(builder, mainlineNormalDesc):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(mainlineNormalDesc), 0)

def clz_Torappu_GameDataConstsAddRejectSpCharMission(builder, rejectSpCharMission):
    builder.PrependInt64Slot(38, rejectSpCharMission, 0)

def clz_Torappu_GameDataConstsAddAddedRewardDisplayZone(builder, addedRewardDisplayZone):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(addedRewardDisplayZone), 0)

def clz_Torappu_GameDataConstsAddRichTextStyles(builder, richTextStyles):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(richTextStyles), 0)

def clz_Torappu_GameDataConstsStartRichTextStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddCharAssistRefreshTime(builder, charAssistRefreshTime):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(charAssistRefreshTime), 0)

def clz_Torappu_GameDataConstsStartCharAssistRefreshTimeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddNormalRecruitLockedString(builder, normalRecruitLockedString):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(normalRecruitLockedString), 0)

def clz_Torappu_GameDataConstsStartNormalRecruitLockedStringVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddCommonPotentialLvlUpCount(builder, commonPotentialLvlUpCount):
    builder.PrependInt32Slot(43, commonPotentialLvlUpCount, 0)

def clz_Torappu_GameDataConstsAddWeeklyOverrideDesc(builder, weeklyOverrideDesc):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(weeklyOverrideDesc), 0)

def clz_Torappu_GameDataConstsAddVoucherDiv(builder, voucherDiv):
    builder.PrependInt32Slot(45, voucherDiv, 0)

def clz_Torappu_GameDataConstsAddRecruitPoolVersion(builder, recruitPoolVersion):
    builder.PrependInt32Slot(46, recruitPoolVersion, 0)

def clz_Torappu_GameDataConstsAddV006RecruitTimeStep1Refresh(builder, v006RecruitTimeStep1Refresh):
    builder.PrependInt64Slot(47, v006RecruitTimeStep1Refresh, 0)

def clz_Torappu_GameDataConstsAddV006RecruitTimeStep2Check(builder, v006RecruitTimeStep2Check):
    builder.PrependInt64Slot(48, v006RecruitTimeStep2Check, 0)

def clz_Torappu_GameDataConstsAddV006RecruitTimeStep2Flush(builder, v006RecruitTimeStep2Flush):
    builder.PrependInt64Slot(49, v006RecruitTimeStep2Flush, 0)

def clz_Torappu_GameDataConstsAddBuyApTimeNoLimitFlag(builder, buyApTimeNoLimitFlag):
    builder.PrependBoolSlot(50, buyApTimeNoLimitFlag, 0)

def clz_Torappu_GameDataConstsAddIsLmgtsenabled(builder, isLmgtsenabled):
    builder.PrependBoolSlot(51, isLmgtsenabled, 0)

def clz_Torappu_GameDataConstsAddLegacyTime(builder, legacyTime):
    builder.PrependInt64Slot(52, legacyTime, 0)

def clz_Torappu_GameDataConstsAddLegacyItemList(builder, legacyItemList):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(legacyItemList), 0)

def clz_Torappu_GameDataConstsStartLegacyItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddUseAssistSocialPt(builder, useAssistSocialPt):
    builder.PrependInt32Slot(54, useAssistSocialPt, 0)

def clz_Torappu_GameDataConstsAddUseAssistSocialPtMaxCount(builder, useAssistSocialPtMaxCount):
    builder.PrependInt32Slot(55, useAssistSocialPtMaxCount, 0)

def clz_Torappu_GameDataConstsAddAssistBeUsedSocialPt(builder, assistBeUsedSocialPt):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(assistBeUsedSocialPt), 0)

def clz_Torappu_GameDataConstsStartAssistBeUsedSocialPtVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddPushForces(builder, pushForces):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(pushForces), 0)

def clz_Torappu_GameDataConstsStartPushForcesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddPushForceZeroIndex(builder, pushForceZeroIndex):
    builder.PrependInt32Slot(58, pushForceZeroIndex, 0)

def clz_Torappu_GameDataConstsAddNormalGachaUnlockPrice(builder, normalGachaUnlockPrice):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(normalGachaUnlockPrice), 0)

def clz_Torappu_GameDataConstsStartNormalGachaUnlockPriceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddPullForces(builder, pullForces):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(pullForces), 0)

def clz_Torappu_GameDataConstsStartPullForcesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddPullForceZeroIndex(builder, pullForceZeroIndex):
    builder.PrependInt32Slot(61, pullForceZeroIndex, 0)

def clz_Torappu_GameDataConstsAddMultiInComeByRank(builder, multiInComeByRank):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(multiInComeByRank), 0)

def clz_Torappu_GameDataConstsStartMultiInComeByRankVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddLmtgstoEpgsratio(builder, lmtgstoEpgsratio):
    builder.PrependInt32Slot(63, lmtgstoEpgsratio, 0)

def clz_Torappu_GameDataConstsAddNewBeeGiftEpgs(builder, newBeeGiftEpgs):
    builder.PrependInt32Slot(64, newBeeGiftEpgs, 0)

def clz_Torappu_GameDataConstsAddLMtgsdescConstOne(builder, lMtgsdescConstOne):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(lMtgsdescConstOne), 0)

def clz_Torappu_GameDataConstsAddLMtgsdescConstTwo(builder, lMtgsdescConstTwo):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(lMtgsdescConstTwo), 0)

def clz_Torappu_GameDataConstsAddDefCdprimColor(builder, defCdprimColor):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(defCdprimColor), 0)

def clz_Torappu_GameDataConstsAddDefCdsecColor(builder, defCdsecColor):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(defCdsecColor), 0)

def clz_Torappu_GameDataConstsAddMailBannerType(builder, mailBannerType):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(mailBannerType), 0)

def clz_Torappu_GameDataConstsStartMailBannerTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddMonthlySubWarningTime(builder, monthlySubWarningTime):
    builder.PrependInt64Slot(70, monthlySubWarningTime, 0)

def clz_Torappu_GameDataConstsAddUnlimitSkinOutOfTime(builder, unlimitSkinOutOfTime):
    builder.PrependInt64Slot(71, unlimitSkinOutOfTime, 0)

def clz_Torappu_GameDataConstsAddReplicateShopStartTime(builder, replicateShopStartTime):
    builder.PrependInt64Slot(72, replicateShopStartTime, 0)

def clz_Torappu_GameDataConstsAddTso(builder, tso):
    builder.PrependInt64Slot(73, tso, 0)

def clz_Torappu_GameDataConstsAddIsDynIllustEnabled(builder, isDynIllustEnabled):
    builder.PrependBoolSlot(74, isDynIllustEnabled, 0)

def clz_Torappu_GameDataConstsAddIsDynIllustStartEnabled(builder, isDynIllustStartEnabled):
    builder.PrependBoolSlot(75, isDynIllustStartEnabled, 0)

def clz_Torappu_GameDataConstsAddIsClassicQcshopEnabled(builder, isClassicQcshopEnabled):
    builder.PrependBoolSlot(76, isClassicQcshopEnabled, 0)

def clz_Torappu_GameDataConstsAddIsRoguelikeTopicFuncEnabled(builder, isRoguelikeTopicFuncEnabled):
    builder.PrependBoolSlot(77, isRoguelikeTopicFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsSandboxPermFuncEnabled(builder, isSandboxPermFuncEnabled):
    builder.PrependBoolSlot(78, isSandboxPermFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsRoguelikeAvgAchieveFuncEnabled(builder, isRoguelikeAvgAchieveFuncEnabled):
    builder.PrependBoolSlot(79, isRoguelikeAvgAchieveFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsClassicPotentialItemFuncEnabled(builder, isClassicPotentialItemFuncEnabled):
    builder.PrependBoolSlot(80, isClassicPotentialItemFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsClassicGachaPoolFuncEnabled(builder, isClassicGachaPoolFuncEnabled):
    builder.PrependBoolSlot(81, isClassicGachaPoolFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsSpecialGachaPoolFuncEnabled(builder, isSpecialGachaPoolFuncEnabled):
    builder.PrependBoolSlot(82, isSpecialGachaPoolFuncEnabled, 0)

def clz_Torappu_GameDataConstsAddIsVoucherClassicItemDistinguishable(builder, isVoucherClassicItemDistinguishable):
    builder.PrependBoolSlot(83, isVoucherClassicItemDistinguishable, 0)

def clz_Torappu_GameDataConstsAddVoucherSkinRedeem(builder, voucherSkinRedeem):
    builder.PrependInt32Slot(84, voucherSkinRedeem, 0)

def clz_Torappu_GameDataConstsAddVoucherSkinDesc(builder, voucherSkinDesc):
    builder.PrependUOffsetTRelativeSlot(85, flatbuffers.number_types.UOffsetTFlags.py_type(voucherSkinDesc), 0)

def clz_Torappu_GameDataConstsAddCharmEquipCount(builder, charmEquipCount):
    builder.PrependInt32Slot(86, charmEquipCount, 0)

def clz_Torappu_GameDataConstsAddTermDescriptionDict(builder, termDescriptionDict):
    builder.PrependUOffsetTRelativeSlot(87, flatbuffers.number_types.UOffsetTFlags.py_type(termDescriptionDict), 0)

def clz_Torappu_GameDataConstsStartTermDescriptionDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddStoryReviewUnlockItemLackTip(builder, storyReviewUnlockItemLackTip):
    builder.PrependUOffsetTRelativeSlot(88, flatbuffers.number_types.UOffsetTFlags.py_type(storyReviewUnlockItemLackTip), 0)

def clz_Torappu_GameDataConstsAddDataVersion(builder, dataVersion):
    builder.PrependUOffsetTRelativeSlot(89, flatbuffers.number_types.UOffsetTFlags.py_type(dataVersion), 0)

def clz_Torappu_GameDataConstsAddResPrefVersion(builder, resPrefVersion):
    builder.PrependUOffsetTRelativeSlot(90, flatbuffers.number_types.UOffsetTFlags.py_type(resPrefVersion), 0)

def clz_Torappu_GameDataConstsAddAnnounceWebBusType(builder, announceWebBusType):
    builder.PrependUOffsetTRelativeSlot(91, flatbuffers.number_types.UOffsetTFlags.py_type(announceWebBusType), 0)

def clz_Torappu_GameDataConstsAddDefaultMinContinuousBattleTimes(builder, defaultMinContinuousBattleTimes):
    builder.PrependInt32Slot(92, defaultMinContinuousBattleTimes, 0)

def clz_Torappu_GameDataConstsAddDefaultMaxContinuousBattleTimes(builder, defaultMaxContinuousBattleTimes):
    builder.PrependInt32Slot(93, defaultMaxContinuousBattleTimes, 0)

def clz_Torappu_GameDataConstsAddContinuousActionOpen(builder, continuousActionOpen):
    builder.PrependBoolSlot(94, continuousActionOpen, 0)

def clz_Torappu_GameDataConstsAddSubProfessionDamageTypePairs(builder, subProfessionDamageTypePairs):
    builder.PrependUOffsetTRelativeSlot(95, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionDamageTypePairs), 0)

def clz_Torappu_GameDataConstsStartSubProfessionDamageTypePairsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsAddClassicProtectChar(builder, classicProtectChar):
    builder.PrependUOffsetTRelativeSlot(96, flatbuffers.number_types.UOffsetTFlags.py_type(classicProtectChar), 0)

def clz_Torappu_GameDataConstsStartClassicProtectCharVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_GameDataConstsEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_GameDataConsts
