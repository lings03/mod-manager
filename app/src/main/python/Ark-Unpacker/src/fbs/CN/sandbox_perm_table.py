# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_SandboxPermTemplateType(object):
    NONE = 0
    SANDBOX_V2 = 1


class enum__Torappu_SandboxV2TrapItemType(object):
    NONE = 0
    BATTLE = 1
    TACTICAL = 2
    FUNCTION = 3
    ANIMAL = 4


class enum__Torappu_SandboxV2ItemTrapTag(object):
    OUTPUT = 0
    COLLECTION = 1
    IMPAIR = 2
    ENHANCE = 3
    EXPLORE = 4
    SPECTACLE = 5
    DECORATE = 6
    DEFEND = 7
    SCOUT = 8


class enum__Torappu_SandboxV2CraftItemType(object):
    BASE_BUILDING = 0
    TACTICAL = 1
    COMBAT_BUILDING = 2


class enum__Torappu_SandboxPermItemType(object):
    NONE = 0
    TACTICAL = 1
    BUILDING = 2
    BUILDINGMAT = 3
    FOOD = 4
    FOODMAT = 5
    SPECIALMAT = 6
    COIN = 9
    CRAFT = 10
    PLACEHOLDER = 11
    STAMINAPOT = 12
    ANIMAL = 13
    INSECT = 14
    SLUGITEM = 15


class enum__Torappu_SandboxV2FoodMatType(object):
    MAIN = 0
    SUB = 1


class enum__Torappu_SandboxV2FoodAttribute(object):
    NONE = 0
    SURVIVE = 1
    COST = 2
    ATTACK = 3
    COOLDOWN = 4
    SKILL_POINT = 5
    SPECIAL = 6
    ENHANCED = 7


class enum__Torappu_SandboxV2FoodVariantType(object):
    NONE = 0
    ALPHA = 1
    BETA = 2
    GAMMA = 3


class enum__Torappu_SandboxV2NodeType(object):
    NONE = 0
    HOME = 1
    HOME_OUTPOST = 2
    BATTLE = 3
    NEST = 4
    COLLECT = 5
    HUNT = 6
    CAVE = 7
    MINE = 8
    ENCOUNTER = 9
    EXPEDITION = 10
    SHOP = 11
    GATE = 12
    MARKET = 13
    HOME_PORTABLE = 14
    HOME_PORTABLE_RIFT = 15
    SELECTION = 16
    RACING = 17


class enum__Torappu_SandboxV2WeatherType(object):
    NORMAL = 0
    RAINFOREST = 1
    VOLCANO = 2
    DESERT = 3


class enum__Torappu_SandboxV2EnemyRushType(object):
    NORMAL = 0
    ELITE = 1
    BOSS = 2
    BANDIT = 3
    RALLY = 4
    THIEF = 5
    MESSENGER = 6
    INSECT = 7


class enum__Torappu_SandboxV2SeasonType(object):
    NONE = 0
    DRY = 1
    RAINY = 2
    CHALLENGE = 3


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_TipData_Category(object):
    NONE = 0
    BATTLE = 1
    UI = 2
    BUILDING = 4
    GACHA = 8
    MISC = 16
    ALL = 31


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 1
    SIDE_B = 2
    NONE = 3


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class enum__Torappu_SandboxV2QuestRouteType(object):
    NONE = 0
    ENEMY_RUSH = 1
    EVENT = 2
    NODE = 3
    NPC = 4


class enum__Torappu_SandboxV2QuestLineType(object):
    NONE = 0
    MAIN = 1
    SIDE = 2
    GUIDE = 3
    TRAINING = 4


class enum__Torappu_SandboxV2NpcType(object):
    NORMAL = 0
    FIXED_RIFT = 1
    RANDOM_RIFT = 2
    PREY_RIFT = 3


class enum__Torappu_BattleDialogType(object):
    NONE = 0
    BEFORE = 1
    REACT = 2
    AFTER = 3
    ENUM = 4


class enum__Torappu_SharedConsts_Direction(object):
    UP = 0
    RIGHT = 1
    DOWN = 2
    LEFT = 3
    E_NUM = 4
    INVALID = 4


class enum__Torappu_SandboxV2QuestLineBadgeType(object):
    NONE = 0
    SIDE = 1
    GUIDE = 2
    MAIN = 3
    RIFT = 4


class enum__Torappu_SandboxV2DevelopmentType(object):
    NONE = 0
    SURVIVE = 1
    COLLECT = 2
    SHOP = 3
    BATTLE = 4
    DUNGEON = 5


class enum__Torappu_SandboxV2EventType(object):
    NONE = 0
    EVENT = 1
    MISSION = 2
    QUEST_EVENT = 3
    QUEST_MISSION = 4


class enum__Torappu_SandboxV2EventChoiceType(object):
    NONE = 0
    NEXT = 1
    LEAVE = 2
    MISSION = 3


class enum__Torappu_ProfessionID(object):
    WARRIOR = 0
    SNIPER = 1
    TANK = 2
    MEDIC = 3
    SUPPORT = 4
    CASTER = 5
    SPECIAL = 6
    TOKEN = 7
    TRAP = 8
    PIONEER = 9


class enum__Torappu_SandboxV2CoinType(object):
    DIMENSION_COIN = 0
    GOLD = 1


class enum__Torappu_SandboxV2RiftMainTargetType(object):
    NONE = 0
    FIND = 1
    BOSS_HUNT = 2
    WILD_HUNT = 3
    PROTECT = 4
    FIGHT = 5
    CATCH_THIEF = 6
    PREY_HUNT = 7


class enum__Torappu_SandboxV2ArchiveQuestType(object):
    NONE = 0
    MAIN = 1
    SIDE = 2


class enum__Torappu_SandboxV2BaseUnlockFuncType(object):
    NONE = 0
    HOME_PUTPOST = 1
    HOME_PORTABLE = 2
    REWARDSHOP = 3
    TECH = 4
    REAR = 5
    BUILD = 6
    SHOP = 7
    RACING = 8


class enum__Torappu_SandboxV2BaseUnlockFuncDisplayType(object):
    NONE = 0
    NEW = 1
    UPDATE = 2
    NUMBER = 3


class enum__Torappu_SandboxV2DevelopmentLineStyle(object):
    EMPTY = 0
    LEVEL_PASS = 1
    LEVEL_BLOCK = 2


class enum__Torappu_SandboxV2ConfirmIconType(object):
    COMMON = 0
    EMERGENCY = 1
    QUIT = 2
    EVACUATE = 3
    EVACUATELOSS = 4
    NORMAL = 5
    COMBAT = 6
    CONSTRUCT = 7
    NEXTDAY = 8
    RIFT_EXIT = 9
    LOAD_ARCHIVE = 10


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_SandboxV2RacerTalentType(object):
    BORN = 0
    LEARNED = 1


class enum__Torappu_SandboxV2RacerNameType(object):
    PREFIX = 0
    SUFFIX = 1


class clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxPermBasicData_HomeEntryDisplayData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData
    def DisplayId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData
    def TopicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataAddDisplayId(builder, displayId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(displayId), 0)

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataAddTopicId(builder, topicId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(topicId), 0)

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(2, startTs, 0)

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def clz_Torappu_SandboxPermBasicData_HomeEntryDisplayDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxPermBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxPermBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxPermBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxPermBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxPermBasicData
    def TopicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData
    def TopicTemplate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermBasicData
    def TopicName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData
    def TopicStartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermBasicData
    def FullStoredTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermBasicData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermBasicData
    def PriceItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData
    def TemplateShopId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData
    def HomeEntryDisplayData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxPermBasicData_HomeEntryDisplayData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxPermBasicData
    def HomeEntryDisplayDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxPermBasicData
    def HomeEntryDisplayDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_SandboxPermBasicData
    def WebBusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermBasicData
    def MedalGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxPermBasicDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_SandboxPermBasicDataAddTopicId(builder, topicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topicId), 0)

def clz_Torappu_SandboxPermBasicDataAddTopicTemplate(builder, topicTemplate):
    builder.PrependInt32Slot(1, topicTemplate, 0)

def clz_Torappu_SandboxPermBasicDataAddTopicName(builder, topicName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(topicName), 0)

def clz_Torappu_SandboxPermBasicDataAddTopicStartTime(builder, topicStartTime):
    builder.PrependInt64Slot(3, topicStartTime, 0)

def clz_Torappu_SandboxPermBasicDataAddFullStoredTime(builder, fullStoredTime):
    builder.PrependInt64Slot(4, fullStoredTime, 0)

def clz_Torappu_SandboxPermBasicDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(5, sortId, 0)

def clz_Torappu_SandboxPermBasicDataAddPriceItemId(builder, priceItemId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(priceItemId), 0)

def clz_Torappu_SandboxPermBasicDataAddTemplateShopId(builder, templateShopId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(templateShopId), 0)

def clz_Torappu_SandboxPermBasicDataAddHomeEntryDisplayData(builder, homeEntryDisplayData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(homeEntryDisplayData), 0)

def clz_Torappu_SandboxPermBasicDataStartHomeEntryDisplayDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxPermBasicDataAddWebBusType(builder, webBusType):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(webBusType), 0)

def clz_Torappu_SandboxPermBasicDataAddMedalGroupId(builder, medalGroupId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(medalGroupId), 0)

def clz_Torappu_SandboxPermBasicDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxPermBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxPermBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxPermBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxPermBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxPermBasicData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxPermBasicData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxPermBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxPermBasicDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxPermBasicDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxPermBasicDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxPermBasicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2NodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2NodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2NodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2NodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2NodeData
    def MinDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_SandboxV2NodeDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxV2NodeDataAddMinDistance(builder, minDistance):
    builder.PrependFloat32Slot(0, minDistance, 0.0)

def clz_Torappu_SandboxV2NodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2NodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2NodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2NodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2NodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2NodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2NodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2NodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2NodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2NodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2NodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2NodeDataEnd(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector2
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector2
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector2Start(builder):
    builder.StartObject(2)

def clz_UnityEngine_Vector2AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector2AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector2End(builder):
    return builder.EndObject()



class list_int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = list_int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAslist_int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # list_int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # list_int
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # list_int
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # list_int
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # list_int
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def list_intStart(builder):
    builder.StartObject(1)

def list_intAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def list_intStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def list_intEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2MapZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2MapZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2MapZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2MapZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2MapZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MapZoneData
    def Center(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapZoneData
    def Vertices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapZoneData
    def VerticesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2MapZoneData
    def VerticesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2MapZoneData
    def Triangles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = list_int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapZoneData
    def TrianglesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2MapZoneData
    def TrianglesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2MapZoneData
    def HasBorder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_SandboxV2MapZoneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2MapZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_SandboxV2MapZoneDataAddCenter(builder, center):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(center), 0)

def clz_Torappu_SandboxV2MapZoneDataAddVertices(builder, vertices):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vertices), 0)

def clz_Torappu_SandboxV2MapZoneDataStartVerticesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2MapZoneDataAddTriangles(builder, triangles):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(triangles), 0)

def clz_Torappu_SandboxV2MapZoneDataStartTrianglesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2MapZoneDataAddHasBorder(builder, hasBorder):
    builder.PrependBoolSlot(4, hasBorder, 0)

def clz_Torappu_SandboxV2MapZoneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2MapZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2MapZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2MapZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2MapZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2MapZoneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2MapZoneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2MapZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2MapZoneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2MapZoneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2MapZoneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2MapZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2MapConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2MapConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2MapConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2MapConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2MapConfig
    def IsRift(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2MapConfig
    def IsGuide(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2MapConfig
    def CameraBoundMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapConfig
    def CameraBoundMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapConfig
    def CameraMaxNormalizedZoom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2MapConfig
    def BackgroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2MapConfigStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2MapConfigAddIsRift(builder, isRift):
    builder.PrependBoolSlot(0, isRift, 0)

def clz_Torappu_SandboxV2MapConfigAddIsGuide(builder, isGuide):
    builder.PrependBoolSlot(1, isGuide, 0)

def clz_Torappu_SandboxV2MapConfigAddCameraBoundMin(builder, cameraBoundMin):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cameraBoundMin), 0)

def clz_Torappu_SandboxV2MapConfigAddCameraBoundMax(builder, cameraBoundMax):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cameraBoundMax), 0)

def clz_Torappu_SandboxV2MapConfigAddCameraMaxNormalizedZoom(builder, cameraMaxNormalizedZoom):
    builder.PrependFloat32Slot(4, cameraMaxNormalizedZoom, 0.0)

def clz_Torappu_SandboxV2MapConfigAddBackgroundId(builder, backgroundId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundId), 0)

def clz_Torappu_SandboxV2MapConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2MapData
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2NodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapData
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2MapData
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2MapData
    def Zones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2MapZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapData
    def ZonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2MapData
    def ZonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2MapData
    def MapConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2MapConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MapData
    def CenterNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MapData
    def MonthModeNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2MapDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2MapDataAddNodes(builder, nodes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def clz_Torappu_SandboxV2MapDataStartNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2MapDataAddZones(builder, zones):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zones), 0)

def clz_Torappu_SandboxV2MapDataStartZonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2MapDataAddMapConfig(builder, mapConfig):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapConfig), 0)

def clz_Torappu_SandboxV2MapDataAddCenterNodeId(builder, centerNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(centerNodeId), 0)

def clz_Torappu_SandboxV2MapDataAddMonthModeNodeId(builder, monthModeNodeId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(monthModeNodeId), 0)

def clz_Torappu_SandboxV2MapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2MapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2MapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2MapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2MapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2MapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2MapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ItemTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ItemTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ItemTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ItemTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ItemTrapData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapData
    def TrapPhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def TrapLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def SkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def BuildingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def UpdatedItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapData
    def MinLevelItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapData
    def BaseItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def ItemTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ItemTrapDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_SandboxV2ItemTrapDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2ItemTrapDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_SandboxV2ItemTrapDataAddTrapPhase(builder, trapPhase):
    builder.PrependInt32Slot(2, trapPhase, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddTrapLevel(builder, trapLevel):
    builder.PrependInt32Slot(3, trapLevel, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(4, skillIndex, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddSkillLevel(builder, skillLevel):
    builder.PrependInt32Slot(5, skillLevel, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddBuildingLevel(builder, buildingLevel):
    builder.PrependInt32Slot(6, buildingLevel, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddUpdatedItemId(builder, updatedItemId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(updatedItemId), 0)

def clz_Torappu_SandboxV2ItemTrapDataAddMinLevelItemId(builder, minLevelItemId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(minLevelItemId), 0)

def clz_Torappu_SandboxV2ItemTrapDataAddBaseItemName(builder, baseItemName):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(baseItemName), 0)

def clz_Torappu_SandboxV2ItemTrapDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(10, itemType, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddItemTag(builder, itemTag):
    builder.PrependInt32Slot(11, itemTag, 0)

def clz_Torappu_SandboxV2ItemTrapDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxV2ItemTrapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ItemTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ItemTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ItemTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ItemTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ItemTrapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ItemTrapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ItemTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ItemTrapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ItemTrapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ItemTrapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ItemTrapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ItemTrapTagData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ItemTrapTagData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ItemTrapTagData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ItemTrapTagData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ItemTrapTagData
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ItemTrapTagData
    def TagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapTagData
    def TagPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ItemTrapTagData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2ItemTrapTagDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ItemTrapTagDataAddTag(builder, tag):
    builder.PrependInt32Slot(0, tag, 0)

def clz_Torappu_SandboxV2ItemTrapTagDataAddTagName(builder, tagName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tagName), 0)

def clz_Torappu_SandboxV2ItemTrapTagDataAddTagPic(builder, tagPic):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tagPic), 0)

def clz_Torappu_SandboxV2ItemTrapTagDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_SandboxV2ItemTrapTagDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ItemTrapTagData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ItemTrapTagData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ItemTrapTagData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ItemTrapTagData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ItemTrapTagData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ItemTrapTagData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ItemTrapTagData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ItemTrapTagDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ItemTrapTagDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ItemTrapTagDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ItemTrapTagDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BuildingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BuildingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BuildingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BuildingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BuildingItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BuildingItemData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2BuildingItemDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2BuildingItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2BuildingItemDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(1, itemRarity, 0)

def clz_Torappu_SandboxV2BuildingItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2BuildingItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2BuildingItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2BuildingItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2BuildingItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2BuildingItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2BuildingItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2BuildingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2BuildingItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2BuildingItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2BuildingItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2BuildingItemDataEnd(builder):
    return builder.EndObject()



class dict__string__int(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__int()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__int(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__int
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__int
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__int
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def dict__string__intStart(builder):
    builder.StartObject(2)

def dict__string__intAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__intAddValue(builder, value):
    builder.PrependInt32Slot(1, value, 0)

def dict__string__intEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2CraftItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2CraftItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2CraftItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2CraftItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2CraftItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2CraftItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def BuildingUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2CraftItemData
    def MaterialItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2CraftItemData
    def MaterialItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def MaterialItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2CraftItemData
    def UpgradeItems(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2CraftItemData
    def UpgradeItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def UpgradeItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2CraftItemData
    def OutputRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def WithdrawRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def RepairCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2CraftItemData
    def IsHidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2CraftItemData
    def CraftGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2CraftItemData
    def RecipeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2CraftItemDataStart(builder):
    builder.StartObject(11)

def clz_Torappu_SandboxV2CraftItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2CraftItemDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxV2CraftItemDataAddBuildingUnlockDesc(builder, buildingUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buildingUnlockDesc), 0)

def clz_Torappu_SandboxV2CraftItemDataAddMaterialItems(builder, materialItems):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(materialItems), 0)

def clz_Torappu_SandboxV2CraftItemDataStartMaterialItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2CraftItemDataAddUpgradeItems(builder, upgradeItems):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeItems), 0)

def clz_Torappu_SandboxV2CraftItemDataStartUpgradeItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2CraftItemDataAddOutputRatio(builder, outputRatio):
    builder.PrependInt32Slot(5, outputRatio, 0)

def clz_Torappu_SandboxV2CraftItemDataAddWithdrawRatio(builder, withdrawRatio):
    builder.PrependInt32Slot(6, withdrawRatio, 0)

def clz_Torappu_SandboxV2CraftItemDataAddRepairCost(builder, repairCost):
    builder.PrependInt32Slot(7, repairCost, 0)

def clz_Torappu_SandboxV2CraftItemDataAddIsHidden(builder, isHidden):
    builder.PrependBoolSlot(8, isHidden, 0)

def clz_Torappu_SandboxV2CraftItemDataAddCraftGroupId(builder, craftGroupId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(craftGroupId), 0)

def clz_Torappu_SandboxV2CraftItemDataAddRecipeLevel(builder, recipeLevel):
    builder.PrependInt32Slot(10, recipeLevel, 0)

def clz_Torappu_SandboxV2CraftItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2CraftItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2CraftItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2CraftItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2CraftItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2CraftItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2CraftItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2CraftItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2CraftItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2CraftItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2CraftItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2CraftItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2LivestockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2LivestockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2LivestockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2LivestockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2LivestockData
    def LivestockItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LivestockData
    def ShinyLivestockItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LivestockData
    def LivestockEnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LivestockData
    def TargetFenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2LivestockDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2LivestockDataAddLivestockItemId(builder, livestockItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(livestockItemId), 0)

def clz_Torappu_SandboxV2LivestockDataAddShinyLivestockItemId(builder, shinyLivestockItemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(shinyLivestockItemId), 0)

def clz_Torappu_SandboxV2LivestockDataAddLivestockEnemyId(builder, livestockEnemyId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(livestockEnemyId), 0)

def clz_Torappu_SandboxV2LivestockDataAddTargetFenceId(builder, targetFenceId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(targetFenceId), 0)

def clz_Torappu_SandboxV2LivestockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2LivestockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2LivestockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2LivestockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2LivestockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2LivestockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2LivestockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2LivestockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2LivestockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2LivestockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2LivestockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2LivestockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2CraftGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2CraftGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2CraftGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2CraftGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2CraftGroupData
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2CraftGroupData
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2CraftGroupData
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_SandboxV2CraftGroupDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxV2CraftGroupDataAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_SandboxV2CraftGroupDataStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2CraftGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2CraftGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2CraftGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2CraftGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2CraftGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2CraftGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2CraftGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2CraftGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2CraftGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2CraftGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2CraftGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2CraftGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2AlchemyMaterialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2AlchemyMaterialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2AlchemyMaterialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2AlchemyMaterialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2AlchemyMaterialData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2AlchemyMaterialData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2AlchemyMaterialDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2AlchemyMaterialDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2AlchemyMaterialDataAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_SandboxV2AlchemyMaterialDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2AlchemyRecipeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2AlchemyRecipeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2AlchemyRecipeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2AlchemyRecipeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def RecipeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def Materials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2AlchemyMaterialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def MaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def MaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def OnceAlchemyRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def RecipeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2AlchemyRecipeData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2AlchemyRecipeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddRecipeId(builder, recipeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recipeId), 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddMaterials(builder, materials):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(materials), 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataStartMaterialsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddOnceAlchemyRatio(builder, onceAlchemyRatio):
    builder.PrependInt32Slot(3, onceAlchemyRatio, 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddRecipeLevel(builder, recipeLevel):
    builder.PrependInt32Slot(4, recipeLevel, 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_SandboxV2AlchemyRecipeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2AlchemyRecipeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2AlchemyRecipeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2AlchemyRecipeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2AlchemyRecipeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2AlchemyRecipeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2AlchemyRecipeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2AlchemyRecipeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2AlchemyRecipeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2AlchemyRecipeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2AlchemyRecipeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2AlchemyRecipeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DrinkMatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DrinkMatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DrinkMatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DrinkMatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DrinkMatData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DrinkMatData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DrinkMatData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2DrinkMatDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2DrinkMatDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2DrinkMatDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxV2DrinkMatDataAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_SandboxV2DrinkMatDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2DrinkMatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2DrinkMatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2DrinkMatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2DrinkMatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2DrinkMatData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2DrinkMatData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2DrinkMatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2DrinkMatDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2DrinkMatDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2DrinkMatDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2DrinkMatDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FoodMatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FoodMatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FoodMatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FoodMatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FoodMatData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FoodMatData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodMatData
    def Attribute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodMatData
    def VariantType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodMatData
    def BonusDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodMatData
    def BuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FoodMatData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2FoodMatDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxV2FoodMatDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2FoodMatDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxV2FoodMatDataAddAttribute(builder, attribute):
    builder.PrependInt32Slot(2, attribute, 0)

def clz_Torappu_SandboxV2FoodMatDataAddVariantType(builder, variantType):
    builder.PrependInt32Slot(3, variantType, 0)

def clz_Torappu_SandboxV2FoodMatDataAddBonusDuration(builder, bonusDuration):
    builder.PrependInt32Slot(4, bonusDuration, 0)

def clz_Torappu_SandboxV2FoodMatDataAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_SandboxV2FoodMatDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(6, sortId, 0)

def clz_Torappu_SandboxV2FoodMatDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2FoodMatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2FoodMatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2FoodMatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2FoodMatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2FoodMatData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2FoodMatData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2FoodMatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2FoodMatDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2FoodMatDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2FoodMatDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2FoodMatDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FoodRecipeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FoodRecipeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FoodRecipeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FoodRecipeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FoodRecipeData
    def FoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FoodRecipeData
    def Mats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2FoodRecipeData
    def MatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2FoodRecipeData
    def MatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_SandboxV2FoodRecipeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2FoodRecipeDataAddFoodId(builder, foodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(foodId), 0)

def clz_Torappu_SandboxV2FoodRecipeDataAddMats(builder, mats):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mats), 0)

def clz_Torappu_SandboxV2FoodRecipeDataStartMatsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2FoodRecipeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FoodVariantData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FoodVariantData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FoodVariantData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FoodVariantData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FoodVariantData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodVariantData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FoodVariantData
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2FoodVariantDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2FoodVariantDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_SandboxV2FoodVariantDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2FoodVariantDataAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_SandboxV2FoodVariantDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FoodData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FoodData
    def Attributes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2FoodData
    def AttributesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2FoodData
    def AttributesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2FoodData
    def AttributesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2FoodData
    def Recipes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2FoodRecipeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2FoodData
    def RecipesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2FoodData
    def RecipesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2FoodData
    def Variants(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2FoodVariantData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2FoodData
    def VariantsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2FoodData
    def VariantsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2FoodData
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2FoodData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2FoodDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2FoodDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2FoodDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_SandboxV2FoodDataStartAttributesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2FoodDataAddRecipes(builder, recipes):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(recipes), 0)

def clz_Torappu_SandboxV2FoodDataStartRecipesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2FoodDataAddVariants(builder, variants):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(variants), 0)

def clz_Torappu_SandboxV2FoodDataStartVariantsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2FoodDataAddDuration(builder, duration):
    builder.PrependInt32Slot(4, duration, 0)

def clz_Torappu_SandboxV2FoodDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(5, sortId, 0)

def clz_Torappu_SandboxV2FoodDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2FoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2FoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2FoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2FoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2FoodData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2FoodData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2FoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2FoodDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2FoodDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2FoodDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2FoodDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2NodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2NodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2NodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2NodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2NodeTypeData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NodeTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeTypeData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2NodeTypeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2NodeTypeDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(0, nodeType, 0)

def clz_Torappu_SandboxV2NodeTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2NodeTypeDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2NodeTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2NodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2NodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2NodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2NodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2NodeTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2NodeTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2NodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2NodeTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2NodeTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2NodeTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2NodeTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2NodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2NodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2NodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2NodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2NodeUpgradeData
    def NodeUpgradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeUpgradeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeUpgradeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeUpgradeData
    def UpgradeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeUpgradeData
    def UpgradeTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeUpgradeData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NodeUpgradeData
    def ItemTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NodeUpgradeData
    def ItemCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NodeUpgradeData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2NodeUpgradeDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SandboxV2NodeUpgradeDataAddNodeUpgradeId(builder, nodeUpgradeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpgradeId), 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddUpgradeDesc(builder, upgradeDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeDesc), 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddUpgradeTips(builder, upgradeTips):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeTips), 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(5, itemType, 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddItemTag(builder, itemTag):
    builder.PrependInt32Slot(6, itemTag, 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddItemCnt(builder, itemCnt):
    builder.PrependInt32Slot(7, itemCnt, 0)

def clz_Torappu_SandboxV2NodeUpgradeDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(8, itemRarity, 0)

def clz_Torappu_SandboxV2NodeUpgradeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2NodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2NodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2NodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2NodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2NodeUpgradeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2NodeUpgradeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2NodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2NodeUpgradeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2NodeUpgradeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2NodeUpgradeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2NodeUpgradeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2WeatherData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2WeatherData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2WeatherData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2WeatherData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2WeatherData
    def WeatherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def WeatherLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2WeatherData
    def WeatherType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2WeatherData
    def WeatherTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def WeatherIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2WeatherData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2WeatherDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SandboxV2WeatherDataAddWeatherId(builder, weatherId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weatherId), 0)

def clz_Torappu_SandboxV2WeatherDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2WeatherDataAddWeatherLevel(builder, weatherLevel):
    builder.PrependInt32Slot(2, weatherLevel, 0)

def clz_Torappu_SandboxV2WeatherDataAddWeatherType(builder, weatherType):
    builder.PrependInt32Slot(3, weatherType, 0)

def clz_Torappu_SandboxV2WeatherDataAddWeatherTypeName(builder, weatherTypeName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(weatherTypeName), 0)

def clz_Torappu_SandboxV2WeatherDataAddWeatherIconId(builder, weatherIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(weatherIconId), 0)

def clz_Torappu_SandboxV2WeatherDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_SandboxV2WeatherDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2WeatherDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxV2WeatherDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2WeatherData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2WeatherData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2WeatherData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2WeatherData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2WeatherData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2WeatherData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2WeatherData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2WeatherDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2WeatherDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2WeatherDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2WeatherDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2StageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2StageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2StageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2StageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2StageData
    def StageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2StageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2StageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2StageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2StageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2StageData
    def ActionCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2StageData
    def ActionCostEnemyRush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2StageDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxV2StageDataAddStageId(builder, stageId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageId), 0)

def clz_Torappu_SandboxV2StageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_SandboxV2StageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_SandboxV2StageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2StageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2StageDataAddActionCost(builder, actionCost):
    builder.PrependInt32Slot(5, actionCost, 0)

def clz_Torappu_SandboxV2StageDataAddActionCostEnemyRush(builder, actionCostEnemyRush):
    builder.PrependInt32Slot(6, actionCostEnemyRush, 0)

def clz_Torappu_SandboxV2StageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2StageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2StageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2StageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2StageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2StageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2StageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2StageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2StageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2StageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2StageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2StageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ZoneData
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ZoneData
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2ZoneData
    def Appellation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ZoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_SandboxV2ZoneDataAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def clz_Torappu_SandboxV2ZoneDataAddDisplayName(builder, displayName):
    builder.PrependBoolSlot(2, displayName, 0)

def clz_Torappu_SandboxV2ZoneDataAddAppellation(builder, appellation):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(appellation), 0)

def clz_Torappu_SandboxV2ZoneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ZoneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ZoneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ZoneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ZoneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ZoneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2NodeBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2NodeBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2NodeBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2NodeBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2NodeBuffData
    def RuneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeBuffData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeBuffData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeBuffData
    def Extra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NodeBuffData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2NodeBuffDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2NodeBuffDataAddRuneId(builder, runeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(runeId), 0)

def clz_Torappu_SandboxV2NodeBuffDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2NodeBuffDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2NodeBuffDataAddExtra(builder, extra):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extra), 0)

def clz_Torappu_SandboxV2NodeBuffDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2NodeBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2NodeBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2NodeBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2NodeBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2NodeBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2NodeBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2NodeBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2NodeBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2NodeBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2NodeBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2NodeBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2NodeBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RewardItemConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RewardItemConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RewardItemConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RewardItemConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RewardItemConfigData
    def RewardItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RewardItemConfigData
    def RewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2RewardItemConfigDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2RewardItemConfigDataAddRewardItem(builder, rewardItem):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItem), 0)

def clz_Torappu_SandboxV2RewardItemConfigDataAddRewardType(builder, rewardType):
    builder.PrependInt32Slot(1, rewardType, 0)

def clz_Torappu_SandboxV2RewardItemConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RewardData
    def RewardList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2RewardItemConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardData
    def RewardListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardData
    def RewardListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_SandboxV2RewardDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxV2RewardDataAddRewardList(builder, rewardList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardList), 0)

def clz_Torappu_SandboxV2RewardDataStartRewardListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RewardCommonConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RewardCommonConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RewardCommonConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RewardCommonConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RewardCommonConfig
    def RewardItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RewardCommonConfig
    def RewardItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RewardCommonConfig
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2RewardCommonConfigStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2RewardCommonConfigAddRewardItemId(builder, rewardItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItemId), 0)

def clz_Torappu_SandboxV2RewardCommonConfigAddRewardItemType(builder, rewardItemType):
    builder.PrependInt32Slot(1, rewardItemType, 0)

def clz_Torappu_SandboxV2RewardCommonConfigAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_SandboxV2RewardCommonConfigEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RewardCommonConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RewardCommonConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RewardCommonConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RewardCommonConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RewardCommonConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RewardCommonConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RewardCommonConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RewardCommonConfigStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RewardCommonConfigAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RewardCommonConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RewardCommonConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RewardConfigGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RewardConfigGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RewardConfigGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RewardConfigGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageMapPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageMapPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageMapPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageDetailPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageDetailPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageDetailPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def TrapRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardCommonConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def TrapRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def TrapRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def EnemyRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardCommonConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def EnemyRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def EnemyRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def UnitPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def UnitPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def UnitPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def StageRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def RushPreviewRewardDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def RushPreviewRewardDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RewardConfigGroupData
    def RushPreviewRewardDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_SandboxV2RewardConfigGroupDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddStageMapPreviewRewardDict(builder, stageMapPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(stageMapPreviewRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartStageMapPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddStageDetailPreviewRewardDict(builder, stageDetailPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(stageDetailPreviewRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartStageDetailPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddTrapRewardDict(builder, trapRewardDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trapRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartTrapRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddEnemyRewardDict(builder, enemyRewardDict):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enemyRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartEnemyRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddUnitPreviewRewardDict(builder, unitPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unitPreviewRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartUnitPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddStageRewardDict(builder, stageRewardDict):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(stageRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartStageRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataAddRushPreviewRewardDict(builder, rushPreviewRewardDict):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(rushPreviewRewardDict), 0)

def clz_Torappu_SandboxV2RewardConfigGroupDataStartRushPreviewRewardDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RewardConfigGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FloatIconData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FloatIconData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FloatIconData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FloatIconData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FloatIconData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FloatIconData
    def PicName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2FloatIconDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2FloatIconDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_SandboxV2FloatIconDataAddPicName(builder, picName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(picName), 0)

def clz_Torappu_SandboxV2FloatIconDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2FloatIconData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2FloatIconData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2FloatIconData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2FloatIconData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2FloatIconData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2FloatIconData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2FloatIconData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2FloatIconDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2FloatIconDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2FloatIconDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2FloatIconDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2EnemyRushTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2EnemyRushTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2EnemyRushTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2EnemyRushTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2EnemyRushTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2EnemyRushTypeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EnemyRushTypeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2EnemyRushTypeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2EnemyRushTypeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_SandboxV2EnemyRushTypeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2EnemyRushTypeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_SandboxV2EnemyRushTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2EnemyRushTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2EnemyRushTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2EnemyRushTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2EnemyRushTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2EnemyRushTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2EnemyRushTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2EnemyRushTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2EnemyRushTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2EnemyRushTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2EnemyRushTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2EnemyRushTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BattleRushEnemyConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BattleRushEnemyConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BattleRushEnemyConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def EnemyKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def BranchId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2BattleRushEnemyConfig
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_SandboxV2BattleRushEnemyConfigStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2BattleRushEnemyConfigAddEnemyKey(builder, enemyKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyKey), 0)

def clz_Torappu_SandboxV2BattleRushEnemyConfigAddBranchId(builder, branchId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(branchId), 0)

def clz_Torappu_SandboxV2BattleRushEnemyConfigAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_SandboxV2BattleRushEnemyConfigAddInterval(builder, interval):
    builder.PrependFloat32Slot(3, interval, 0.0)

def clz_Torappu_SandboxV2BattleRushEnemyConfigAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(4, preDelay, 0.0)

def clz_Torappu_SandboxV2BattleRushEnemyConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BattleRushEnemyGroupConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BattleRushEnemyGroupConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BattleRushEnemyGroupConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def EnemyGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def Enemy(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BattleRushEnemyConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def EnemyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def EnemyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def DynamicEnemy(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def DynamicEnemyLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def DynamicEnemyIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigAddEnemyGroupKey(builder, enemyGroupKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enemyGroupKey), 0)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigAddEnemy(builder, enemy):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enemy), 0)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigStartEnemyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigAddDynamicEnemy(builder, dynamicEnemy):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dynamicEnemy), 0)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigStartDynamicEnemyVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BattleRushEnemyGroupConfigEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BattleRushEnemyGroupConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfigStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfigAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfigStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRefStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRefAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRefAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRefEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BattleRushEnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BattleRushEnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BattleRushEnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BattleRushEnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyGroupConfigs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_SandboxV2EnemyRushType__list_clz_Torappu_SandboxV2BattleRushEnemyGroupConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyGroupConfigsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyGroupConfigsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyDbRef(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BattleRushEnemyData_RushEnemyDBRef()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyDbRefLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BattleRushEnemyData
    def RushEnemyDbRefIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_SandboxV2BattleRushEnemyDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2BattleRushEnemyDataAddRushEnemyGroupConfigs(builder, rushEnemyGroupConfigs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyGroupConfigs), 0)

def clz_Torappu_SandboxV2BattleRushEnemyDataStartRushEnemyGroupConfigsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BattleRushEnemyDataAddRushEnemyDbRef(builder, rushEnemyDbRef):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyDbRef), 0)

def clz_Torappu_SandboxV2BattleRushEnemyDataStartRushEnemyDbRefVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BattleRushEnemyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2GameConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2GameConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2GameConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2GameConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2GameConst
    def MainMapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def BaseTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def PortableTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def DoorTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def MineTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def NeutralBossEnemyId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2GameConst
    def NeutralBossEnemyIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def NeutralBossEnemyIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2GameConst
    def NestTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def ShopNpcName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def DaysBetweenAssessment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def PortableConstructUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def OutpostConstructUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def MaxEnemyCountSameTimeInRush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def MaxPreDelayTimeInRush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2GameConst
    def MaxSaveCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def FirstSeasonDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionLoop(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionLoopAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionLoopLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionLoopIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonDurationLoop(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonDurationLoopAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonDurationLoopLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonDurationLoopIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_SandboxV2GameConst
    def FirstSeasonStartAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionAngleLoop(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionAngleLoopAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionAngleLoopLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonTransitionAngleLoopIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_SandboxV2GameConst
    def SeasonAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2GameConst
    def BattleItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def FoodDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def MultipleSurvivalDayDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def MultipleTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def TechProgressScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def OtherEnemyRushName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def SurviveDayText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def SurvivePeriodText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def SurviveScoreText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def ActionPointScoreText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def NodeExploreDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def DungeonExploreDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def NodeCompleteDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def NoRiftDungeonDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def BaseRushedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def RiftBaseDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def RiftBaseRushedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GameConst
    def DungeonTriggeredGuideQuestList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2GameConst
    def DungeonTriggeredGuideQuestListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def DungeonTriggeredGuideQuestListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # clz_Torappu_SandboxV2GameConst
    def NoLogInEnemyStatsEnemyId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2GameConst
    def NoLogInEnemyStatsEnemyIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2GameConst
    def NoLogInEnemyStatsEnemyIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

def clz_Torappu_SandboxV2GameConstStart(builder):
    builder.StartObject(39)

def clz_Torappu_SandboxV2GameConstAddMainMapId(builder, mainMapId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mainMapId), 0)

def clz_Torappu_SandboxV2GameConstAddBaseTrapId(builder, baseTrapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(baseTrapId), 0)

def clz_Torappu_SandboxV2GameConstAddPortableTrapId(builder, portableTrapId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(portableTrapId), 0)

def clz_Torappu_SandboxV2GameConstAddDoorTrapId(builder, doorTrapId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(doorTrapId), 0)

def clz_Torappu_SandboxV2GameConstAddMineTrapId(builder, mineTrapId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(mineTrapId), 0)

def clz_Torappu_SandboxV2GameConstAddNeutralBossEnemyId(builder, neutralBossEnemyId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(neutralBossEnemyId), 0)

def clz_Torappu_SandboxV2GameConstStartNeutralBossEnemyIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstAddNestTrapId(builder, nestTrapId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nestTrapId), 0)

def clz_Torappu_SandboxV2GameConstAddShopNpcName(builder, shopNpcName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(shopNpcName), 0)

def clz_Torappu_SandboxV2GameConstAddDaysBetweenAssessment(builder, daysBetweenAssessment):
    builder.PrependInt32Slot(8, daysBetweenAssessment, 0)

def clz_Torappu_SandboxV2GameConstAddPortableConstructUnlockLevel(builder, portableConstructUnlockLevel):
    builder.PrependInt32Slot(9, portableConstructUnlockLevel, 0)

def clz_Torappu_SandboxV2GameConstAddOutpostConstructUnlockLevel(builder, outpostConstructUnlockLevel):
    builder.PrependInt32Slot(10, outpostConstructUnlockLevel, 0)

def clz_Torappu_SandboxV2GameConstAddMaxEnemyCountSameTimeInRush(builder, maxEnemyCountSameTimeInRush):
    builder.PrependInt32Slot(11, maxEnemyCountSameTimeInRush, 0)

def clz_Torappu_SandboxV2GameConstAddMaxPreDelayTimeInRush(builder, maxPreDelayTimeInRush):
    builder.PrependFloat32Slot(12, maxPreDelayTimeInRush, 0.0)

def clz_Torappu_SandboxV2GameConstAddMaxSaveCnt(builder, maxSaveCnt):
    builder.PrependInt32Slot(13, maxSaveCnt, 0)

def clz_Torappu_SandboxV2GameConstAddFirstSeasonDuration(builder, firstSeasonDuration):
    builder.PrependInt32Slot(14, firstSeasonDuration, 0)

def clz_Torappu_SandboxV2GameConstAddSeasonTransitionLoop(builder, seasonTransitionLoop):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(seasonTransitionLoop), 0)

def clz_Torappu_SandboxV2GameConstStartSeasonTransitionLoopVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstAddSeasonDurationLoop(builder, seasonDurationLoop):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(seasonDurationLoop), 0)

def clz_Torappu_SandboxV2GameConstStartSeasonDurationLoopVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstAddFirstSeasonStartAngle(builder, firstSeasonStartAngle):
    builder.PrependFloat32Slot(17, firstSeasonStartAngle, 0.0)

def clz_Torappu_SandboxV2GameConstAddSeasonTransitionAngleLoop(builder, seasonTransitionAngleLoop):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(seasonTransitionAngleLoop), 0)

def clz_Torappu_SandboxV2GameConstStartSeasonTransitionAngleLoopVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstAddSeasonAngle(builder, seasonAngle):
    builder.PrependFloat32Slot(19, seasonAngle, 0.0)

def clz_Torappu_SandboxV2GameConstAddBattleItemDesc(builder, battleItemDesc):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(battleItemDesc), 0)

def clz_Torappu_SandboxV2GameConstAddFoodDesc(builder, foodDesc):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(foodDesc), 0)

def clz_Torappu_SandboxV2GameConstAddMultipleSurvivalDayDesc(builder, multipleSurvivalDayDesc):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(multipleSurvivalDayDesc), 0)

def clz_Torappu_SandboxV2GameConstAddMultipleTips(builder, multipleTips):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(multipleTips), 0)

def clz_Torappu_SandboxV2GameConstAddTechProgressScore(builder, techProgressScore):
    builder.PrependInt32Slot(24, techProgressScore, 0)

def clz_Torappu_SandboxV2GameConstAddOtherEnemyRushName(builder, otherEnemyRushName):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(otherEnemyRushName), 0)

def clz_Torappu_SandboxV2GameConstAddSurviveDayText(builder, surviveDayText):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(surviveDayText), 0)

def clz_Torappu_SandboxV2GameConstAddSurvivePeriodText(builder, survivePeriodText):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(survivePeriodText), 0)

def clz_Torappu_SandboxV2GameConstAddSurviveScoreText(builder, surviveScoreText):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(surviveScoreText), 0)

def clz_Torappu_SandboxV2GameConstAddActionPointScoreText(builder, actionPointScoreText):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(actionPointScoreText), 0)

def clz_Torappu_SandboxV2GameConstAddNodeExploreDesc(builder, nodeExploreDesc):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(nodeExploreDesc), 0)

def clz_Torappu_SandboxV2GameConstAddDungeonExploreDesc(builder, dungeonExploreDesc):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(dungeonExploreDesc), 0)

def clz_Torappu_SandboxV2GameConstAddNodeCompleteDesc(builder, nodeCompleteDesc):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(nodeCompleteDesc), 0)

def clz_Torappu_SandboxV2GameConstAddNoRiftDungeonDesc(builder, noRiftDungeonDesc):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(noRiftDungeonDesc), 0)

def clz_Torappu_SandboxV2GameConstAddBaseRushedDesc(builder, baseRushedDesc):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(baseRushedDesc), 0)

def clz_Torappu_SandboxV2GameConstAddRiftBaseDesc(builder, riftBaseDesc):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(riftBaseDesc), 0)

def clz_Torappu_SandboxV2GameConstAddRiftBaseRushedDesc(builder, riftBaseRushedDesc):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(riftBaseRushedDesc), 0)

def clz_Torappu_SandboxV2GameConstAddDungeonTriggeredGuideQuestList(builder, dungeonTriggeredGuideQuestList):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(dungeonTriggeredGuideQuestList), 0)

def clz_Torappu_SandboxV2GameConstStartDungeonTriggeredGuideQuestListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstAddNoLogInEnemyStatsEnemyId(builder, noLogInEnemyStatsEnemyId):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(noLogInEnemyStatsEnemyId), 0)

def clz_Torappu_SandboxV2GameConstStartNoLogInEnemyStatsEnemyIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2GameConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DiffModeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DiffModeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DiffModeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DiffModeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DiffModeData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DiffModeData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DiffModeData
    def BuffList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2DiffModeData
    def BuffListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2DiffModeData
    def BuffListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2DiffModeData
    def DetailList(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DiffModeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2DiffModeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2DiffModeDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxV2DiffModeDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2DiffModeDataAddBuffList(builder, buffList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(buffList), 0)

def clz_Torappu_SandboxV2DiffModeDataStartBuffListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DiffModeDataAddDetailList(builder, detailList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(detailList), 0)

def clz_Torappu_SandboxV2DiffModeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_SandboxV2DiffModeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BasicConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BasicConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BasicConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BasicConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BasicConst
    def StaminaItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def GoldItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def DimensioncoinItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIdsConstruct(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIdsConstructLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIdsConstructIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def AlwaysShowItemIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def BagBottomBarResType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def BagBottomBarResTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def BagBottomBarResTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def FailedCookFood(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MaxFoodDuration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def DrinkCostOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def DrinkMakeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def SpecialMatWater(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def WorkbenchMakeLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def LogisticsPosLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def LogisticsUnlockLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def LogisticsDrinkCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def LogisticsEvacuateTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def LogisticsEvacuateWarning(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def BaseRepairCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def PortRepairCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def UnitFenceLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def UnitRareFenceLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def CageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def FenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def RareFenceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MonthlyRushEntryText1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MonthlyEntryUnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MonthlyEntryRiftText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MonthlyRushIntro(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def MonthlyCoin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BasicConst
    def CharRarityColorList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def CharRarityColorListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def CharRarityColorListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def SquadCharCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def TotalSquadCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def ToolboxCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def ToolCntLimitInSquad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def MiniSquadCharCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def MiniSquadDrinkCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def NormalSquadDrinkCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def EmptySquadDrinkCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def AchieveTypeAll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def ConstructModeBgmHome(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def BattleBgmCollect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def BattleBgmHunt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def BattleBgmEnemyRush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def BattleBgmBossRush(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def ImgLoadingNormalName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def ImgLoadingBaseName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def ImgUnloadingBaseName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def IsChallengeOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2BasicConst
    def IsRacingOpen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2BasicConst
    def HasExploreMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2BasicConst
    def ExploreModeBuffDescs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def ExploreModeBuffDescsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def ExploreModeBuffDescsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def ModeSelectTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BasicConst
    def StringRes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BasicConst
    def StringResLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def StringResIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def DiffList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2DiffModeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BasicConst
    def DiffListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def DiffListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def BattlePreloadEnemies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def BattlePreloadEnemiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def BattlePreloadEnemiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

    # clz_Torappu_SandboxV2BasicConst
    def BattleExcludedTrapsInRush(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BasicConst
    def BattleExcludedTrapsInRushLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BasicConst
    def BattleExcludedTrapsInRushIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        return o == 0

def clz_Torappu_SandboxV2BasicConstStart(builder):
    builder.StartObject(56)

def clz_Torappu_SandboxV2BasicConstAddStaminaItemId(builder, staminaItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(staminaItemId), 0)

def clz_Torappu_SandboxV2BasicConstAddGoldItemId(builder, goldItemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(goldItemId), 0)

def clz_Torappu_SandboxV2BasicConstAddDimensioncoinItemId(builder, dimensioncoinItemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dimensioncoinItemId), 0)

def clz_Torappu_SandboxV2BasicConstAddAlwaysShowItemIdsConstruct(builder, alwaysShowItemIdsConstruct):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(alwaysShowItemIdsConstruct), 0)

def clz_Torappu_SandboxV2BasicConstStartAlwaysShowItemIdsConstructVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddAlwaysShowItemIds(builder, alwaysShowItemIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(alwaysShowItemIds), 0)

def clz_Torappu_SandboxV2BasicConstStartAlwaysShowItemIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddBagBottomBarResType(builder, bagBottomBarResType):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bagBottomBarResType), 0)

def clz_Torappu_SandboxV2BasicConstStartBagBottomBarResTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddFailedCookFood(builder, failedCookFood):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(failedCookFood), 0)

def clz_Torappu_SandboxV2BasicConstAddMaxFoodDuration(builder, maxFoodDuration):
    builder.PrependInt32Slot(7, maxFoodDuration, 0)

def clz_Torappu_SandboxV2BasicConstAddDrinkCostOnce(builder, drinkCostOnce):
    builder.PrependInt32Slot(8, drinkCostOnce, 0)

def clz_Torappu_SandboxV2BasicConstAddDrinkMakeLimit(builder, drinkMakeLimit):
    builder.PrependInt32Slot(9, drinkMakeLimit, 0)

def clz_Torappu_SandboxV2BasicConstAddSpecialMatWater(builder, specialMatWater):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(specialMatWater), 0)

def clz_Torappu_SandboxV2BasicConstAddWorkbenchMakeLimit(builder, workbenchMakeLimit):
    builder.PrependInt32Slot(11, workbenchMakeLimit, 0)

def clz_Torappu_SandboxV2BasicConstAddLogisticsPosLimit(builder, logisticsPosLimit):
    builder.PrependInt32Slot(12, logisticsPosLimit, 0)

def clz_Torappu_SandboxV2BasicConstAddLogisticsUnlockLevel(builder, logisticsUnlockLevel):
    builder.PrependInt32Slot(13, logisticsUnlockLevel, 0)

def clz_Torappu_SandboxV2BasicConstAddLogisticsDrinkCost(builder, logisticsDrinkCost):
    builder.PrependInt32Slot(14, logisticsDrinkCost, 0)

def clz_Torappu_SandboxV2BasicConstAddLogisticsEvacuateTips(builder, logisticsEvacuateTips):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsEvacuateTips), 0)

def clz_Torappu_SandboxV2BasicConstAddLogisticsEvacuateWarning(builder, logisticsEvacuateWarning):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsEvacuateWarning), 0)

def clz_Torappu_SandboxV2BasicConstAddBaseRepairCost(builder, baseRepairCost):
    builder.PrependInt32Slot(17, baseRepairCost, 0)

def clz_Torappu_SandboxV2BasicConstAddPortRepairCost(builder, portRepairCost):
    builder.PrependInt32Slot(18, portRepairCost, 0)

def clz_Torappu_SandboxV2BasicConstAddUnitFenceLimit(builder, unitFenceLimit):
    builder.PrependInt32Slot(19, unitFenceLimit, 0)

def clz_Torappu_SandboxV2BasicConstAddUnitRareFenceLimit(builder, unitRareFenceLimit):
    builder.PrependInt32Slot(20, unitRareFenceLimit, 0)

def clz_Torappu_SandboxV2BasicConstAddCageId(builder, cageId):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(cageId), 0)

def clz_Torappu_SandboxV2BasicConstAddFenceId(builder, fenceId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(fenceId), 0)

def clz_Torappu_SandboxV2BasicConstAddRareFenceId(builder, rareFenceId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(rareFenceId), 0)

def clz_Torappu_SandboxV2BasicConstAddMonthlyRushEntryText1(builder, monthlyRushEntryText1):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyRushEntryText1), 0)

def clz_Torappu_SandboxV2BasicConstAddMonthlyEntryUnlockText(builder, monthlyEntryUnlockText):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyEntryUnlockText), 0)

def clz_Torappu_SandboxV2BasicConstAddMonthlyEntryRiftText(builder, monthlyEntryRiftText):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyEntryRiftText), 0)

def clz_Torappu_SandboxV2BasicConstAddMonthlyRushIntro(builder, monthlyRushIntro):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyRushIntro), 0)

def clz_Torappu_SandboxV2BasicConstAddMonthlyCoin(builder, monthlyCoin):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyCoin), 0)

def clz_Torappu_SandboxV2BasicConstAddCharRarityColorList(builder, charRarityColorList):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(charRarityColorList), 0)

def clz_Torappu_SandboxV2BasicConstStartCharRarityColorListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddSquadCharCapacity(builder, squadCharCapacity):
    builder.PrependInt32Slot(30, squadCharCapacity, 0)

def clz_Torappu_SandboxV2BasicConstAddTotalSquadCnt(builder, totalSquadCnt):
    builder.PrependInt32Slot(31, totalSquadCnt, 0)

def clz_Torappu_SandboxV2BasicConstAddToolboxCapacity(builder, toolboxCapacity):
    builder.PrependInt32Slot(32, toolboxCapacity, 0)

def clz_Torappu_SandboxV2BasicConstAddToolCntLimitInSquad(builder, toolCntLimitInSquad):
    builder.PrependInt32Slot(33, toolCntLimitInSquad, 0)

def clz_Torappu_SandboxV2BasicConstAddMiniSquadCharCapacity(builder, miniSquadCharCapacity):
    builder.PrependInt32Slot(34, miniSquadCharCapacity, 0)

def clz_Torappu_SandboxV2BasicConstAddMiniSquadDrinkCost(builder, miniSquadDrinkCost):
    builder.PrependInt32Slot(35, miniSquadDrinkCost, 0)

def clz_Torappu_SandboxV2BasicConstAddNormalSquadDrinkCost(builder, normalSquadDrinkCost):
    builder.PrependInt32Slot(36, normalSquadDrinkCost, 0)

def clz_Torappu_SandboxV2BasicConstAddEmptySquadDrinkCost(builder, emptySquadDrinkCost):
    builder.PrependInt32Slot(37, emptySquadDrinkCost, 0)

def clz_Torappu_SandboxV2BasicConstAddAchieveTypeAll(builder, achieveTypeAll):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(achieveTypeAll), 0)

def clz_Torappu_SandboxV2BasicConstAddConstructModeBgmHome(builder, constructModeBgmHome):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(constructModeBgmHome), 0)

def clz_Torappu_SandboxV2BasicConstAddBattleBgmCollect(builder, battleBgmCollect):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(battleBgmCollect), 0)

def clz_Torappu_SandboxV2BasicConstAddBattleBgmHunt(builder, battleBgmHunt):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(battleBgmHunt), 0)

def clz_Torappu_SandboxV2BasicConstAddBattleBgmEnemyRush(builder, battleBgmEnemyRush):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(battleBgmEnemyRush), 0)

def clz_Torappu_SandboxV2BasicConstAddBattleBgmBossRush(builder, battleBgmBossRush):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(battleBgmBossRush), 0)

def clz_Torappu_SandboxV2BasicConstAddImgLoadingNormalName(builder, imgLoadingNormalName):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(imgLoadingNormalName), 0)

def clz_Torappu_SandboxV2BasicConstAddImgLoadingBaseName(builder, imgLoadingBaseName):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(imgLoadingBaseName), 0)

def clz_Torappu_SandboxV2BasicConstAddImgUnloadingBaseName(builder, imgUnloadingBaseName):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(imgUnloadingBaseName), 0)

def clz_Torappu_SandboxV2BasicConstAddIsChallengeOpen(builder, isChallengeOpen):
    builder.PrependBoolSlot(47, isChallengeOpen, 0)

def clz_Torappu_SandboxV2BasicConstAddIsRacingOpen(builder, isRacingOpen):
    builder.PrependBoolSlot(48, isRacingOpen, 0)

def clz_Torappu_SandboxV2BasicConstAddHasExploreMode(builder, hasExploreMode):
    builder.PrependBoolSlot(49, hasExploreMode, 0)

def clz_Torappu_SandboxV2BasicConstAddExploreModeBuffDescs(builder, exploreModeBuffDescs):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(exploreModeBuffDescs), 0)

def clz_Torappu_SandboxV2BasicConstStartExploreModeBuffDescsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddModeSelectTips(builder, modeSelectTips):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(modeSelectTips), 0)

def clz_Torappu_SandboxV2BasicConstAddStringRes(builder, stringRes):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(stringRes), 0)

def clz_Torappu_SandboxV2BasicConstStartStringResVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddDiffList(builder, diffList):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(diffList), 0)

def clz_Torappu_SandboxV2BasicConstStartDiffListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddBattlePreloadEnemies(builder, battlePreloadEnemies):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(battlePreloadEnemies), 0)

def clz_Torappu_SandboxV2BasicConstStartBattlePreloadEnemiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstAddBattleExcludedTrapsInRush(builder, battleExcludedTrapsInRush):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(battleExcludedTrapsInRush), 0)

def clz_Torappu_SandboxV2BasicConstStartBattleExcludedTrapsInRushVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BasicConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftConst
    def RefreshRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftConst
    def RandomDungeonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def HuntDungeonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def SubTargetRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def PreyQuestRewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def DungeonSeasonId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftConst
    def FixedDungeonTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def RandomDungeonTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def PreyDungeonTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def NoTeamDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def NoTeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def NoTeamBackgroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def NoTeamSmallIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def NoTeamBigIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def MessengerEnemyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftConst
    def RiftRushEnemyGroupLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftConst
    def RiftRushSpawnCd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2RiftConstStart(builder):
    builder.StartObject(17)

def clz_Torappu_SandboxV2RiftConstAddRefreshRate(builder, refreshRate):
    builder.PrependInt32Slot(0, refreshRate, 0)

def clz_Torappu_SandboxV2RiftConstAddRandomDungeonId(builder, randomDungeonId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(randomDungeonId), 0)

def clz_Torappu_SandboxV2RiftConstAddHuntDungeonId(builder, huntDungeonId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(huntDungeonId), 0)

def clz_Torappu_SandboxV2RiftConstAddSubTargetRewardId(builder, subTargetRewardId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subTargetRewardId), 0)

def clz_Torappu_SandboxV2RiftConstAddPreyQuestRewardId(builder, preyQuestRewardId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(preyQuestRewardId), 0)

def clz_Torappu_SandboxV2RiftConstAddDungeonSeasonId(builder, dungeonSeasonId):
    builder.PrependInt32Slot(5, dungeonSeasonId, 0)

def clz_Torappu_SandboxV2RiftConstAddFixedDungeonTypeName(builder, fixedDungeonTypeName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fixedDungeonTypeName), 0)

def clz_Torappu_SandboxV2RiftConstAddRandomDungeonTypeName(builder, randomDungeonTypeName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(randomDungeonTypeName), 0)

def clz_Torappu_SandboxV2RiftConstAddPreyDungeonTypeName(builder, preyDungeonTypeName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(preyDungeonTypeName), 0)

def clz_Torappu_SandboxV2RiftConstAddNoTeamDescription(builder, noTeamDescription):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(noTeamDescription), 0)

def clz_Torappu_SandboxV2RiftConstAddNoTeamName(builder, noTeamName):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(noTeamName), 0)

def clz_Torappu_SandboxV2RiftConstAddNoTeamBackgroundId(builder, noTeamBackgroundId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(noTeamBackgroundId), 0)

def clz_Torappu_SandboxV2RiftConstAddNoTeamSmallIconId(builder, noTeamSmallIconId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(noTeamSmallIconId), 0)

def clz_Torappu_SandboxV2RiftConstAddNoTeamBigIconId(builder, noTeamBigIconId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(noTeamBigIconId), 0)

def clz_Torappu_SandboxV2RiftConstAddMessengerEnemyId(builder, messengerEnemyId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(messengerEnemyId), 0)

def clz_Torappu_SandboxV2RiftConstAddRiftRushEnemyGroupLimit(builder, riftRushEnemyGroupLimit):
    builder.PrependInt32Slot(15, riftRushEnemyGroupLimit, 0)

def clz_Torappu_SandboxV2RiftConstAddRiftRushSpawnCd(builder, riftRushSpawnCd):
    builder.PrependInt32Slot(16, riftRushSpawnCd, 0)

def clz_Torappu_SandboxV2RiftConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DevelopmentConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DevelopmentConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DevelopmentConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DevelopmentConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DevelopmentConst
    def TechPointsTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2DevelopmentConstStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxV2DevelopmentConstAddTechPointsTotal(builder, techPointsTotal):
    builder.PrependInt32Slot(0, techPointsTotal, 0)

def clz_Torappu_SandboxV2DevelopmentConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_TipData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TipData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TipData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TipData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TipData
    def Tip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_TipData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TipDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TipDataAddTip(builder, tip):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tip), 0)

def clz_Torappu_TipDataAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_TipDataAddCategory(builder, category):
    builder.PrependInt32Slot(2, category, 0)

def clz_Torappu_TipDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData_Selector(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData_Selector()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData_Selector(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData_Selector
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData_Selector
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def CharIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def CharIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyIdExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def EnemyLevelTypeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SkillIdFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def TileKeyFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def GroupTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def FilterTagExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def SubProfessionExcludeFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilter(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RuneData_Selector
    def MapTagFilterLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData_Selector
    def MapTagFilterIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_RuneData_SelectorStart(builder):
    builder.StartObject(14)

def clz_Torappu_RuneData_SelectorAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(0, professionMask, 0)

def clz_Torappu_RuneData_SelectorAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(1, buildableMask, 0)

def clz_Torappu_RuneData_SelectorAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(2, playerSideMask, 0)

def clz_Torappu_RuneData_SelectorAddCharIdFilter(builder, charIdFilter):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(charIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartCharIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdFilter(builder, enemyIdFilter):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyIdExcludeFilter(builder, enemyIdExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enemyIdExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyIdExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddEnemyLevelTypeFilter(builder, enemyLevelTypeFilter):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyLevelTypeFilter), 0)

def clz_Torappu_RuneData_SelectorStartEnemyLevelTypeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSkillIdFilter(builder, skillIdFilter):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(skillIdFilter), 0)

def clz_Torappu_RuneData_SelectorStartSkillIdFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddTileKeyFilter(builder, tileKeyFilter):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tileKeyFilter), 0)

def clz_Torappu_RuneData_SelectorStartTileKeyFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddGroupTagFilter(builder, groupTagFilter):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(groupTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartGroupTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagFilter(builder, filterTagFilter):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddFilterTagExcludeFilter(builder, filterTagExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(filterTagExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartFilterTagExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddSubProfessionExcludeFilter(builder, subProfessionExcludeFilter):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(subProfessionExcludeFilter), 0)

def clz_Torappu_RuneData_SelectorStartSubProfessionExcludeFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorAddMapTagFilter(builder, mapTagFilter):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(mapTagFilter), 0)

def clz_Torappu_RuneData_SelectorStartMapTagFilterVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneData_SelectorEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneData
    def Selector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneData_Selector()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RuneDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RuneDataAddSelector(builder, selector):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(selector), 0)

def clz_Torappu_RuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RuneTable_PackedRuneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Points(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RuneTable_PackedRuneData
    def MutexGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RuneTable_PackedRuneData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RuneTable_PackedRuneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddPoints(builder, points):
    builder.PrependFloat32Slot(1, points, 0.0)

def clz_Torappu_RuneTable_PackedRuneDataAddMutexGroupKey(builder, mutexGroupKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mutexGroupKey), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RuneTable_PackedRuneDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_RuneTable_PackedRuneDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RuneTable_PackedRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RuneTable_PackedRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RuneTable_PackedRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RuneTable_PackedRuneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RuneTable_PackedRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RuneTable_PackedRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LegacyInLevelRuneData
    def DifficultyMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask):
    builder.PrependInt32Slot(0, difficultyMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(2, professionMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(3, buildableMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2QuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2QuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2QuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2QuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2QuestData
    def QuestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def QuestLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def QuestTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def QuestDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def QuestTargetDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def IsDisplay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2QuestData
    def QuestRouteType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2QuestData
    def QuestLineType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2QuestData
    def QuestRouteParam(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestData
    def ShowProgressIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2QuestDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SandboxV2QuestDataAddQuestId(builder, questId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(questId), 0)

def clz_Torappu_SandboxV2QuestDataAddQuestLine(builder, questLine):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(questLine), 0)

def clz_Torappu_SandboxV2QuestDataAddQuestTitle(builder, questTitle):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(questTitle), 0)

def clz_Torappu_SandboxV2QuestDataAddQuestDesc(builder, questDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(questDesc), 0)

def clz_Torappu_SandboxV2QuestDataAddQuestTargetDesc(builder, questTargetDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(questTargetDesc), 0)

def clz_Torappu_SandboxV2QuestDataAddIsDisplay(builder, isDisplay):
    builder.PrependBoolSlot(5, isDisplay, 0)

def clz_Torappu_SandboxV2QuestDataAddQuestRouteType(builder, questRouteType):
    builder.PrependInt32Slot(6, questRouteType, 0)

def clz_Torappu_SandboxV2QuestDataAddQuestLineType(builder, questLineType):
    builder.PrependInt32Slot(7, questLineType, 0)

def clz_Torappu_SandboxV2QuestDataAddQuestRouteParam(builder, questRouteParam):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(questRouteParam), 0)

def clz_Torappu_SandboxV2QuestDataAddShowProgressIndex(builder, showProgressIndex):
    builder.PrependInt32Slot(9, showProgressIndex, 0)

def clz_Torappu_SandboxV2QuestDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2QuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2QuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2QuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2QuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2QuestData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2QuestData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2QuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2QuestDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2QuestDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2QuestDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2QuestDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_BattleDialogType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_BattleDialogType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_BattleDialogType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_BattleDialogType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_BattleDialogType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_BattleDialogType__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_BattleDialogType__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_BattleDialogType__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_BattleDialogType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_BattleDialogType__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2NpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2NpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2NpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2NpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2NpcData
    def NpcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NpcData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NpcData
    def NpcType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NpcData
    def DialogIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_BattleDialogType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2NpcData
    def DialogIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2NpcData
    def DialogIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2NpcData
    def NpcLocation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2NpcData
    def NpcLocationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2NpcData
    def NpcLocationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2NpcData
    def NpcLocationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2NpcData
    def NpcOrientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2NpcData
    def PicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NpcData
    def PicName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2NpcData
    def ShowPic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2NpcData
    def ReactSkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2NpcDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SandboxV2NpcDataAddNpcId(builder, npcId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(npcId), 0)

def clz_Torappu_SandboxV2NpcDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_SandboxV2NpcDataAddNpcType(builder, npcType):
    builder.PrependInt32Slot(2, npcType, 0)

def clz_Torappu_SandboxV2NpcDataAddDialogIds(builder, dialogIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(dialogIds), 0)

def clz_Torappu_SandboxV2NpcDataStartDialogIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2NpcDataAddNpcLocation(builder, npcLocation):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(npcLocation), 0)

def clz_Torappu_SandboxV2NpcDataStartNpcLocationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2NpcDataAddNpcOrientation(builder, npcOrientation):
    builder.PrependInt32Slot(5, npcOrientation, 0)

def clz_Torappu_SandboxV2NpcDataAddPicId(builder, picId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(picId), 0)

def clz_Torappu_SandboxV2NpcDataAddPicName(builder, picName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(picName), 0)

def clz_Torappu_SandboxV2NpcDataAddShowPic(builder, showPic):
    builder.PrependBoolSlot(8, showPic, 0)

def clz_Torappu_SandboxV2NpcDataAddReactSkillIndex(builder, reactSkillIndex):
    builder.PrependInt32Slot(9, reactSkillIndex, 0)

def clz_Torappu_SandboxV2NpcDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2NpcData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2NpcData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2NpcData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2NpcData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2NpcData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2NpcData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2NpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2NpcDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2NpcDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2NpcDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2NpcDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DialogData
    def DialogId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DialogData
    def AvgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2DialogDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2DialogDataAddDialogId(builder, dialogId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dialogId), 0)

def clz_Torappu_SandboxV2DialogDataAddAvgId(builder, avgId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(avgId), 0)

def clz_Torappu_SandboxV2DialogDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2DialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2DialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2DialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2DialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2DialogData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2DialogData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2DialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2DialogDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2DialogDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2DialogDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2DialogDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2QuestLineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2QuestLineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2QuestLineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2QuestLineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2QuestLineData
    def QuestLineId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestLineData
    def QuestLineTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestLineData
    def QuestLineType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2QuestLineData
    def QuestLineBadgeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2QuestLineData
    def QuestLineDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2QuestLineData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2QuestLineDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2QuestLineDataAddQuestLineId(builder, questLineId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(questLineId), 0)

def clz_Torappu_SandboxV2QuestLineDataAddQuestLineTitle(builder, questLineTitle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(questLineTitle), 0)

def clz_Torappu_SandboxV2QuestLineDataAddQuestLineType(builder, questLineType):
    builder.PrependInt32Slot(2, questLineType, 0)

def clz_Torappu_SandboxV2QuestLineDataAddQuestLineBadgeType(builder, questLineBadgeType):
    builder.PrependInt32Slot(3, questLineBadgeType, 0)

def clz_Torappu_SandboxV2QuestLineDataAddQuestLineDesc(builder, questLineDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(questLineDesc), 0)

def clz_Torappu_SandboxV2QuestLineDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(5, sortId, 0)

def clz_Torappu_SandboxV2QuestLineDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2QuestLineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2QuestLineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2QuestLineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2QuestLineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2QuestLineData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2QuestLineData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2QuestLineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2QuestLineDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2QuestLineDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2QuestLineDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2QuestLineDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2GuideQuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2GuideQuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2GuideQuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2GuideQuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2GuideQuestData
    def QuestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GuideQuestData
    def StoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2GuideQuestData
    def TriggerKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2GuideQuestDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2GuideQuestDataAddQuestId(builder, questId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(questId), 0)

def clz_Torappu_SandboxV2GuideQuestDataAddStoryId(builder, storyId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(storyId), 0)

def clz_Torappu_SandboxV2GuideQuestDataAddTriggerKey(builder, triggerKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(triggerKey), 0)

def clz_Torappu_SandboxV2GuideQuestDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2GuideQuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2GuideQuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2GuideQuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2GuideQuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2GuideQuestData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2GuideQuestData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2GuideQuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2GuideQuestDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2GuideQuestDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2GuideQuestDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2GuideQuestDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DevelopmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DevelopmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DevelopmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DevelopmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DevelopmentData
    def TechId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def TechType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def PositionX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def PositionY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def FrontNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def NextNodeIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2DevelopmentData
    def NextNodeIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def NextNodeIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2DevelopmentData
    def LimitBaseLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentData
    def TechName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def TechIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def NodeTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def RawDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentData
    def CanBuffReserch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_SandboxV2DevelopmentDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_SandboxV2DevelopmentDataAddTechId(builder, techId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(techId), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddTechType(builder, techType):
    builder.PrependInt32Slot(1, techType, 0)

def clz_Torappu_SandboxV2DevelopmentDataAddPositionX(builder, positionX):
    builder.PrependInt32Slot(2, positionX, 0)

def clz_Torappu_SandboxV2DevelopmentDataAddPositionY(builder, positionY):
    builder.PrependInt32Slot(3, positionY, 0)

def clz_Torappu_SandboxV2DevelopmentDataAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddNextNodeIds(builder, nextNodeIds):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeIds), 0)

def clz_Torappu_SandboxV2DevelopmentDataStartNextNodeIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DevelopmentDataAddLimitBaseLevel(builder, limitBaseLevel):
    builder.PrependInt32Slot(6, limitBaseLevel, 0)

def clz_Torappu_SandboxV2DevelopmentDataAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(7, tokenCost, 0)

def clz_Torappu_SandboxV2DevelopmentDataAddTechName(builder, techName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(techName), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddTechIconId(builder, techIconId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(techIconId), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddNodeTitle(builder, nodeTitle):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTitle), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddRawDesc(builder, rawDesc):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(rawDesc), 0)

def clz_Torappu_SandboxV2DevelopmentDataAddCanBuffReserch(builder, canBuffReserch):
    builder.PrependBoolSlot(12, canBuffReserch, 0)

def clz_Torappu_SandboxV2DevelopmentDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2DevelopmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2DevelopmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2DevelopmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2DevelopmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2DevelopmentData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2DevelopmentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2DevelopmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2DevelopmentDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2DevelopmentDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2DevelopmentDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2DevelopmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2EventData
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2EventData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventData
    def IconName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventData
    def EnterSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2EventDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2EventDataAddEventId(builder, eventId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventId), 0)

def clz_Torappu_SandboxV2EventDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxV2EventDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2EventDataAddIconName(builder, iconName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconName), 0)

def clz_Torappu_SandboxV2EventDataAddEnterSceneId(builder, enterSceneId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enterSceneId), 0)

def clz_Torappu_SandboxV2EventDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2EventData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2EventData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2EventData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2EventData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2EventDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2EventDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2EventDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2EventDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2EventSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2EventSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2EventSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2EventSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2EventSceneData
    def EventSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventSceneData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventSceneData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventSceneData
    def ChoiceIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2EventSceneData
    def ChoiceIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2EventSceneData
    def ChoiceIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_SandboxV2EventSceneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2EventSceneDataAddEventSceneId(builder, eventSceneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventSceneId), 0)

def clz_Torappu_SandboxV2EventSceneDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxV2EventSceneDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2EventSceneDataAddChoiceIds(builder, choiceIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(choiceIds), 0)

def clz_Torappu_SandboxV2EventSceneDataStartChoiceIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2EventSceneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2EventSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2EventSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2EventSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2EventSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2EventSceneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2EventSceneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2EventSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2EventSceneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2EventSceneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2EventSceneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2EventSceneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2EventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2EventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2EventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2EventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2EventChoiceData
    def ChoiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventChoiceData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2EventChoiceData
    def CostAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2EventChoiceData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventChoiceData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventChoiceData
    def ExpeditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2EventChoiceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2EventChoiceDataAddChoiceId(builder, choiceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(choiceId), 0)

def clz_Torappu_SandboxV2EventChoiceDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_SandboxV2EventChoiceDataAddCostAction(builder, costAction):
    builder.PrependInt32Slot(2, costAction, 0)

def clz_Torappu_SandboxV2EventChoiceDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxV2EventChoiceDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2EventChoiceDataAddExpeditionId(builder, expeditionId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionId), 0)

def clz_Torappu_SandboxV2EventChoiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2EventChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2EventChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2EventChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2EventChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2EventChoiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2EventChoiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2EventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2EventChoiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2EventChoiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2EventChoiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2EventChoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ExpeditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ExpeditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ExpeditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ExpeditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ExpeditionData
    def ExpeditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ExpeditionData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ExpeditionData
    def EffectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ExpeditionData
    def CostAction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def CostDrink(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def CharCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def Professions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def ProfessionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def ProfessionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def ProfessionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SandboxV2ExpeditionData
    def MinEliteRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ExpeditionData
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2ExpeditionDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_SandboxV2ExpeditionDataAddExpeditionId(builder, expeditionId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionId), 0)

def clz_Torappu_SandboxV2ExpeditionDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2ExpeditionDataAddEffectDesc(builder, effectDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(effectDesc), 0)

def clz_Torappu_SandboxV2ExpeditionDataAddCostAction(builder, costAction):
    builder.PrependInt32Slot(3, costAction, 0)

def clz_Torappu_SandboxV2ExpeditionDataAddCostDrink(builder, costDrink):
    builder.PrependInt32Slot(4, costDrink, 0)

def clz_Torappu_SandboxV2ExpeditionDataAddCharCnt(builder, charCnt):
    builder.PrependInt32Slot(5, charCnt, 0)

def clz_Torappu_SandboxV2ExpeditionDataAddProfession(builder, profession):
    builder.PrependInt32Slot(6, profession, 0)

def clz_Torappu_SandboxV2ExpeditionDataAddProfessions(builder, professions):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(professions), 0)

def clz_Torappu_SandboxV2ExpeditionDataStartProfessionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ExpeditionDataAddMinEliteRank(builder, minEliteRank):
    builder.PrependInt32Slot(8, minEliteRank, 0)

def clz_Torappu_SandboxV2ExpeditionDataAddDuration(builder, duration):
    builder.PrependInt32Slot(9, duration, 0)

def clz_Torappu_SandboxV2ExpeditionDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ExpeditionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ExpeditionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ExpeditionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ExpeditionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ExpeditionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ExpeditionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ExpeditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ExpeditionDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ExpeditionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ExpeditionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ExpeditionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2EventEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2EventEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2EventEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2EventEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2EventEffectData
    def EventEffectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventEffectData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2EventEffectData
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2EventEffectData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2EventEffectDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2EventEffectDataAddEventEffectId(builder, eventEffectId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventEffectId), 0)

def clz_Torappu_SandboxV2EventEffectDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_SandboxV2EventEffectDataAddDuration(builder, duration):
    builder.PrependInt32Slot(2, duration, 0)

def clz_Torappu_SandboxV2EventEffectDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2EventEffectDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2EventEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2EventEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2EventEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2EventEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2EventEffectData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2EventEffectData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2EventEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2EventEffectDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2EventEffectDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2EventEffectDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2EventEffectDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ShopGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ShopGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ShopGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ShopGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ShopGoodData
    def GoodId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ShopGoodData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ShopGoodData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ShopGoodData
    def CoinType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ShopGoodData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2ShopGoodDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2ShopGoodDataAddGoodId(builder, goodId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goodId), 0)

def clz_Torappu_SandboxV2ShopGoodDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2ShopGoodDataAddCount(builder, count):
    builder.PrependInt32Slot(2, count, 0)

def clz_Torappu_SandboxV2ShopGoodDataAddCoinType(builder, coinType):
    builder.PrependInt32Slot(3, coinType, 0)

def clz_Torappu_SandboxV2ShopGoodDataAddValue(builder, value):
    builder.PrependInt32Slot(4, value, 0)

def clz_Torappu_SandboxV2ShopGoodDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ShopGoodData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ShopGoodData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ShopGoodData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ShopGoodData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ShopGoodData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ShopGoodData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ShopGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ShopGoodDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ShopGoodDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ShopGoodDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ShopGoodDataEnd(builder):
    return builder.EndObject()



class dict__string__list_string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # dict__string__list_string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_stringStart(builder):
    builder.StartObject(2)

def dict__string__list_stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ShopDialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ShopDialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ShopDialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ShopDialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ShopDialogData
    def SeasonDialogs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ShopDialogData
    def SeasonDialogsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ShopDialogData
    def SeasonDialogsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2ShopDialogData
    def AfterBuyDialogs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2ShopDialogData
    def AfterBuyDialogsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ShopDialogData
    def AfterBuyDialogsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2ShopDialogData
    def ShopEmptyDialogs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2ShopDialogData
    def ShopEmptyDialogsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ShopDialogData
    def ShopEmptyDialogsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_SandboxV2ShopDialogDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2ShopDialogDataAddSeasonDialogs(builder, seasonDialogs):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(seasonDialogs), 0)

def clz_Torappu_SandboxV2ShopDialogDataStartSeasonDialogsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ShopDialogDataAddAfterBuyDialogs(builder, afterBuyDialogs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(afterBuyDialogs), 0)

def clz_Torappu_SandboxV2ShopDialogDataStartAfterBuyDialogsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ShopDialogDataAddShopEmptyDialogs(builder, shopEmptyDialogs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(shopEmptyDialogs), 0)

def clz_Torappu_SandboxV2ShopDialogDataStartShopEmptyDialogsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ShopDialogDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2LogisticsData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2LogisticsData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2LogisticsData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2LogisticsData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2LogisticsData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LogisticsData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LogisticsData
    def NoBuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LogisticsData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2LogisticsData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2LogisticsData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2LogisticsData
    def LevelParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2LogisticsData
    def LevelParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2LogisticsData
    def LevelParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_SandboxV2LogisticsDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxV2LogisticsDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2LogisticsDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2LogisticsDataAddNoBuffDesc(builder, noBuffDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(noBuffDesc), 0)

def clz_Torappu_SandboxV2LogisticsDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2LogisticsDataAddProfession(builder, profession):
    builder.PrependInt32Slot(4, profession, 0)

def clz_Torappu_SandboxV2LogisticsDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(5, sortId, 0)

def clz_Torappu_SandboxV2LogisticsDataAddLevelParams(builder, levelParams):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(levelParams), 0)

def clz_Torappu_SandboxV2LogisticsDataStartLevelParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2LogisticsDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2LogisticsCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2LogisticsCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2LogisticsCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2LogisticsCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2LogisticsCharData
    def LevelUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2LogisticsCharData
    def CharUpperLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2LogisticsCharDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2LogisticsCharDataAddLevelUpperLimit(builder, levelUpperLimit):
    builder.PrependInt32Slot(0, levelUpperLimit, 0)

def clz_Torappu_SandboxV2LogisticsCharDataAddCharUpperLimit(builder, charUpperLimit):
    builder.PrependInt32Slot(1, charUpperLimit, 0)

def clz_Torappu_SandboxV2LogisticsCharDataEnd(builder):
    return builder.EndObject()



class dict__int__list_clz_Torappu_SandboxV2LogisticsCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_clz_Torappu_SandboxV2LogisticsCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_clz_Torappu_SandboxV2LogisticsCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2LogisticsCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataStart(builder):
    builder.StartObject(2)

def dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataEnd(builder):
    return builder.EndObject()



class dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_clz_Torappu_SandboxV2LogisticsCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataStart(builder):
    builder.StartObject(2)

def dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2MonthRushData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2MonthRushData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2MonthRushData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2MonthRushData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2MonthRushData
    def MonthlyRushId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2MonthRushData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2MonthRushData
    def IsLast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2MonthRushData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2MonthRushData
    def RushGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def MonthlyRushName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def MonthlyRushDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def WeatherId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def ConditionGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def ConditionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def RewardItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2MonthRushData
    def RewardItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2MonthRushData
    def RewardItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def clz_Torappu_SandboxV2MonthRushDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_SandboxV2MonthRushDataAddMonthlyRushId(builder, monthlyRushId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyRushId), 0)

def clz_Torappu_SandboxV2MonthRushDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(1, startTime, 0)

def clz_Torappu_SandboxV2MonthRushDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(2, endTime, 0)

def clz_Torappu_SandboxV2MonthRushDataAddIsLast(builder, isLast):
    builder.PrependBoolSlot(3, isLast, 0)

def clz_Torappu_SandboxV2MonthRushDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_SandboxV2MonthRushDataAddRushGroupKey(builder, rushGroupKey):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(rushGroupKey), 0)

def clz_Torappu_SandboxV2MonthRushDataAddMonthlyRushName(builder, monthlyRushName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyRushName), 0)

def clz_Torappu_SandboxV2MonthRushDataAddMonthlyRushDes(builder, monthlyRushDes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(monthlyRushDes), 0)

def clz_Torappu_SandboxV2MonthRushDataAddWeatherId(builder, weatherId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(weatherId), 0)

def clz_Torappu_SandboxV2MonthRushDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SandboxV2MonthRushDataAddConditionGroup(builder, conditionGroup):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(conditionGroup), 0)

def clz_Torappu_SandboxV2MonthRushDataAddConditionDesc(builder, conditionDesc):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(conditionDesc), 0)

def clz_Torappu_SandboxV2MonthRushDataAddRewardItemList(builder, rewardItemList):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItemList), 0)

def clz_Torappu_SandboxV2MonthRushDataStartRewardItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2MonthRushDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftParamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftParamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftParamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftParamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftParamData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftParamData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftParamData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftParamData
    def BkColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftParamDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2RiftParamDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2RiftParamDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RiftParamDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2RiftParamDataAddBkColor(builder, bkColor):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bkColor), 0)

def clz_Torappu_SandboxV2RiftParamDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RiftParamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RiftParamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RiftParamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RiftParamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RiftParamData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RiftParamData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RiftParamDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RiftParamDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RiftParamDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RiftParamDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftSubTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftSubTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftSubTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftSubTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftSubTargetData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftSubTargetData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftSubTargetData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftSubTargetDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2RiftSubTargetDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2RiftSubTargetDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2RiftSubTargetDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RiftSubTargetDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RiftSubTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RiftSubTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RiftSubTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RiftSubTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RiftSubTargetData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RiftSubTargetData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftSubTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RiftSubTargetDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RiftSubTargetDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RiftSubTargetDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RiftSubTargetDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftMainTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftMainTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftMainTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftMainTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftMainTargetData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftMainTargetData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftMainTargetData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftMainTargetData
    def StoryDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftMainTargetData
    def TargetDayCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftMainTargetData
    def TargetType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftMainTargetData
    def QuestIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftMainTargetData
    def QuestIconName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftMainTargetDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxV2RiftMainTargetDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddStoryDesc(builder, storyDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(storyDesc), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddTargetDayCount(builder, targetDayCount):
    builder.PrependInt32Slot(4, targetDayCount, 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddTargetType(builder, targetType):
    builder.PrependInt32Slot(5, targetType, 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddQuestIconId(builder, questIconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(questIconId), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataAddQuestIconName(builder, questIconName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(questIconName), 0)

def clz_Torappu_SandboxV2RiftMainTargetDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RiftMainTargetData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RiftMainTargetData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RiftMainTargetData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RiftMainTargetData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RiftMainTargetData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RiftMainTargetData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftMainTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RiftMainTargetDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RiftMainTargetDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RiftMainTargetDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RiftMainTargetDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftGlobalEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftGlobalEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftGlobalEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftGlobalEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftGlobalEffectData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftGlobalEffectData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftGlobalEffectDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2RiftGlobalEffectDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2RiftGlobalEffectDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RiftGlobalEffectDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RiftGlobalEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftGlobalEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RiftGlobalEffectDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RiftGlobalEffectDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RiftGlobalEffectDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RiftGlobalEffectDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2FixedRiftData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2FixedRiftData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2FixedRiftData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2FixedRiftData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2FixedRiftData
    def RiftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FixedRiftData
    def RiftName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2FixedRiftData
    def RewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2FixedRiftDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2FixedRiftDataAddRiftId(builder, riftId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(riftId), 0)

def clz_Torappu_SandboxV2FixedRiftDataAddRiftName(builder, riftName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(riftName), 0)

def clz_Torappu_SandboxV2FixedRiftDataAddRewardGroupId(builder, rewardGroupId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rewardGroupId), 0)

def clz_Torappu_SandboxV2FixedRiftDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2FixedRiftData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2FixedRiftData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2FixedRiftData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2FixedRiftData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2FixedRiftData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2FixedRiftData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2FixedRiftData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2FixedRiftDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2FixedRiftDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2FixedRiftDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2FixedRiftDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftTeamBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftTeamBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftTeamBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftTeamBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def BuffLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def BuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamSmallIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamBigIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftTeamBuffData
    def TeamBgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftTeamBuffDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamId(builder, teamId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(teamId), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamName(builder, teamName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamName), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddBuffLevel(builder, buffLevel):
    builder.PrependInt32Slot(2, buffLevel, 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamSmallIconId(builder, teamSmallIconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(teamSmallIconId), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamBigIconId(builder, teamBigIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(teamBigIconId), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamDesc(builder, teamDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(teamDesc), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataAddTeamBgId(builder, teamBgId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(teamBgId), 0)

def clz_Torappu_SandboxV2RiftTeamBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2RiftTeamBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RiftDifficultyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RiftDifficultyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RiftDifficultyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RiftDifficultyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RiftDifficultyData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftDifficultyData
    def RiftId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftDifficultyData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RiftDifficultyData
    def DifficultyLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RiftDifficultyData
    def RewardGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RiftDifficultyDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2RiftDifficultyDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2RiftDifficultyDataAddRiftId(builder, riftId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(riftId), 0)

def clz_Torappu_SandboxV2RiftDifficultyDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RiftDifficultyDataAddDifficultyLevel(builder, difficultyLevel):
    builder.PrependInt32Slot(3, difficultyLevel, 0)

def clz_Torappu_SandboxV2RiftDifficultyDataAddRewardGroupId(builder, rewardGroupId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rewardGroupId), 0)

def clz_Torappu_SandboxV2RiftDifficultyDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RiftDifficultyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RiftDifficultyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RiftDifficultyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RiftDifficultyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RiftDifficultyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RiftDifficultyData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftDifficultyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RiftDifficultyDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RiftDifficultyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RiftDifficultyDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RiftDifficultyDataEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__string__string
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__string__string
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__string__string
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__string__stringStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveQuestAvgData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveQuestAvgData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveQuestAvgData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveQuestAvgData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveQuestAvgData
    def AvgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestAvgData
    def AvgName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveQuestAvgDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2ArchiveQuestAvgDataAddAvgId(builder, avgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(avgId), 0)

def clz_Torappu_SandboxV2ArchiveQuestAvgDataAddAvgName(builder, avgName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(avgName), 0)

def clz_Torappu_SandboxV2ArchiveQuestAvgDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveQuestCgData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveQuestCgData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveQuestCgData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveQuestCgData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveQuestCgData
    def CgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestCgData
    def CgTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestCgData
    def CgDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestCgData
    def CgPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveQuestCgDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ArchiveQuestCgDataAddCgId(builder, cgId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(cgId), 0)

def clz_Torappu_SandboxV2ArchiveQuestCgDataAddCgTitle(builder, cgTitle):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cgTitle), 0)

def clz_Torappu_SandboxV2ArchiveQuestCgDataAddCgDesc(builder, cgDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cgDesc), 0)

def clz_Torappu_SandboxV2ArchiveQuestCgDataAddCgPath(builder, cgPath):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cgPath), 0)

def clz_Torappu_SandboxV2ArchiveQuestCgDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveQuestZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveQuestZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveQuestZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveQuestZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveQuestZoneData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestZoneData
    def ZoneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestZoneData
    def ZoneBgPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestZoneData
    def ZoneNameIdEn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveQuestZoneDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ArchiveQuestZoneDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_SandboxV2ArchiveQuestZoneDataAddZoneName(builder, zoneName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(zoneName), 0)

def clz_Torappu_SandboxV2ArchiveQuestZoneDataAddZoneBgPicId(builder, zoneBgPicId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(zoneBgPicId), 0)

def clz_Torappu_SandboxV2ArchiveQuestZoneDataAddZoneNameIdEn(builder, zoneNameIdEn):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(zoneNameIdEn), 0)

def clz_Torappu_SandboxV2ArchiveQuestZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveQuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveQuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveQuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveQuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveQuestData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def QuestType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestData
    def AvgDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2ArchiveQuestAvgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ArchiveQuestData
    def AvgDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def AvgDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def CgDataList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2ArchiveQuestCgData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ArchiveQuestData
    def CgDataListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def CgDataListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def NpcPicIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2ArchiveQuestData
    def NpcPicIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def NpcPicIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SandboxV2ArchiveQuestData
    def ZoneData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveQuestZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SandboxV2ArchiveQuestDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SandboxV2ArchiveQuestDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2ArchiveQuestDataAddQuestType(builder, questType):
    builder.PrependInt32Slot(2, questType, 0)

def clz_Torappu_SandboxV2ArchiveQuestDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataAddAvgDataList(builder, avgDataList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(avgDataList), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataStartAvgDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ArchiveQuestDataAddCgDataList(builder, cgDataList):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cgDataList), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataStartCgDataListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ArchiveQuestDataAddNpcPicIdList(builder, npcPicIdList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(npcPicIdList), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataStartNpcPicIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ArchiveQuestDataAddZoneData(builder, zoneData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(zoneData), 0)

def clz_Torappu_SandboxV2ArchiveQuestDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ArchiveQuestData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ArchiveQuestData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ArchiveQuestData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ArchiveQuestData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ArchiveQuestData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ArchiveQuestData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveQuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ArchiveQuestDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveAchievementData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveAchievementData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveAchievementData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveAchievementData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def AchievementType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def AchievementTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def AchievementTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def RaritySortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveAchievementData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveAchievementDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddAchievementType(builder, achievementType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(achievementType), 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataStartAchievementTypeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddRaritySortId(builder, raritySortId):
    builder.PrependInt32Slot(2, raritySortId, 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2ArchiveAchievementDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ArchiveAchievementData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ArchiveAchievementData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ArchiveAchievementData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveAchievementData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveAchievementTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveAchievementTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveAchievementTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def AchievementType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2ArchiveAchievementTypeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2ArchiveAchievementTypeDataAddAchievementType(builder, achievementType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(achievementType), 0)

def clz_Torappu_SandboxV2ArchiveAchievementTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2ArchiveAchievementTypeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_SandboxV2ArchiveAchievementTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveAchievementTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveQuestTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveQuestTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveQuestTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveQuestTypeData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveQuestTypeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2ArchiveQuestTypeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_SandboxV2ArchiveQuestTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2ArchiveQuestTypeDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2ArchiveQuestTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveQuestTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ArchiveMusicUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ArchiveMusicUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ArchiveMusicUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def MusicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def UnlockCondDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ArchiveMusicUnlockDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2ArchiveMusicUnlockDataAddMusicId(builder, musicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(musicId), 0)

def clz_Torappu_SandboxV2ArchiveMusicUnlockDataAddUnlockCondDesc(builder, unlockCondDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondDesc), 0)

def clz_Torappu_SandboxV2ArchiveMusicUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ArchiveMusicUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BaseUpdateCondition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BaseUpdateCondition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BaseUpdateCondition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BaseUpdateCondition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BaseUpdateCondition
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateCondition
    def LimitCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateCondition
    def Param(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2BaseUpdateCondition
    def ParamLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateCondition
    def ParamIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_SandboxV2BaseUpdateConditionStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2BaseUpdateConditionAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2BaseUpdateConditionAddLimitCond(builder, limitCond):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limitCond), 0)

def clz_Torappu_SandboxV2BaseUpdateConditionAddParam(builder, param):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(param), 0)

def clz_Torappu_SandboxV2BaseUpdateConditionStartParamVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BaseUpdateConditionEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def FuncId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def UnlockType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def TypeTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def DarkMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddFuncId(builder, funcId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(funcId), 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddUnlockType(builder, unlockType):
    builder.PrependInt32Slot(1, unlockType, 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddTypeTitle(builder, typeTitle):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeTitle), 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddDarkMode(builder, darkMode):
    builder.PrependBoolSlot(5, darkMode, 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(6, sortId, 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataAddDisplayType(builder, displayType):
    builder.PrependInt32Slot(7, displayType, 0)

def clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BaseFunctionPreviewData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BaseFunctionPreviewData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BaseFunctionPreviewData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BaseFunctionPreviewData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BaseFunctionPreviewData
    def PreviewId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseFunctionPreviewData
    def PreviewValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseFunctionPreviewData
    def DetailData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2BaseUpdateFunctionPreviewDetailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SandboxV2BaseFunctionPreviewDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2BaseFunctionPreviewDataAddPreviewId(builder, previewId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(previewId), 0)

def clz_Torappu_SandboxV2BaseFunctionPreviewDataAddPreviewValue(builder, previewValue):
    builder.PrependInt32Slot(1, previewValue, 0)

def clz_Torappu_SandboxV2BaseFunctionPreviewDataAddDetailData(builder, detailData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(detailData), 0)

def clz_Torappu_SandboxV2BaseFunctionPreviewDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BaseUpdateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BaseUpdateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BaseUpdateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BaseUpdateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BaseUpdateData
    def BaseLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateData
    def BaseLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def Conditions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BaseUpdateCondition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BaseUpdateData
    def ConditionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def ConditionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BaseUpdateData
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def PreviewDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BaseFunctionPreviewData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2BaseUpdateData
    def PreviewDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def PreviewDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def ScoreFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BaseUpdateData
    def PortableRepairCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def EntryCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BaseUpdateData
    def RepairCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2BaseUpdateDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_SandboxV2BaseUpdateDataAddBaseLevelId(builder, baseLevelId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(baseLevelId), 0)

def clz_Torappu_SandboxV2BaseUpdateDataAddBaseLevel(builder, baseLevel):
    builder.PrependInt32Slot(1, baseLevel, 0)

def clz_Torappu_SandboxV2BaseUpdateDataAddConditions(builder, conditions):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(conditions), 0)

def clz_Torappu_SandboxV2BaseUpdateDataStartConditionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BaseUpdateDataAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_SandboxV2BaseUpdateDataStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BaseUpdateDataAddPreviewDatas(builder, previewDatas):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(previewDatas), 0)

def clz_Torappu_SandboxV2BaseUpdateDataStartPreviewDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2BaseUpdateDataAddScoreFactor(builder, scoreFactor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scoreFactor), 0)

def clz_Torappu_SandboxV2BaseUpdateDataAddPortableRepairCost(builder, portableRepairCost):
    builder.PrependInt32Slot(6, portableRepairCost, 0)

def clz_Torappu_SandboxV2BaseUpdateDataAddEntryCount(builder, entryCount):
    builder.PrependInt32Slot(7, entryCount, 0)

def clz_Torappu_SandboxV2BaseUpdateDataAddRepairCost(builder, repairCost):
    builder.PrependInt32Slot(8, repairCost, 0)

def clz_Torappu_SandboxV2BaseUpdateDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2DevelopmentLineSegmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2DevelopmentLineSegmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2DevelopmentLineSegmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def FromNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def PassingNodeIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def PassingNodeIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def PassingNodeIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def FromAxisPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def FromAxisPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def ToAxisPosX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def ToAxisPosY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def LineStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2DevelopmentLineSegmentData
    def UnlockBasementLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddFromNodeId(builder, fromNodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fromNodeId), 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddPassingNodeIds(builder, passingNodeIds):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(passingNodeIds), 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataStartPassingNodeIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddFromAxisPosX(builder, fromAxisPosX):
    builder.PrependInt32Slot(2, fromAxisPosX, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddFromAxisPosY(builder, fromAxisPosY):
    builder.PrependInt32Slot(3, fromAxisPosY, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddToAxisPosX(builder, toAxisPosX):
    builder.PrependInt32Slot(4, toAxisPosX, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddToAxisPosY(builder, toAxisPosY):
    builder.PrependInt32Slot(5, toAxisPosY, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddLineStyle(builder, lineStyle):
    builder.PrependInt32Slot(6, lineStyle, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataAddUnlockBasementLevel(builder, unlockBasementLevel):
    builder.PrependInt32Slot(7, unlockBasementLevel, 0)

def clz_Torappu_SandboxV2DevelopmentLineSegmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2BuildingNodeScoreData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2BuildingNodeScoreData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2BuildingNodeScoreData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2BuildingNodeScoreData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2BuildingNodeScoreData
    def NodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2BuildingNodeScoreData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2BuildingNodeScoreData
    def LimitScore(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_SandboxV2BuildingNodeScoreDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2BuildingNodeScoreDataAddNodeId(builder, nodeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeId), 0)

def clz_Torappu_SandboxV2BuildingNodeScoreDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2BuildingNodeScoreDataAddLimitScore(builder, limitScore):
    builder.PrependInt32Slot(2, limitScore, 0)

def clz_Torappu_SandboxV2BuildingNodeScoreDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2BuildingNodeScoreData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2BuildingNodeScoreData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2BuildingNodeScoreDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2BuildingNodeScoreDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2BuildingNodeScoreDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2BuildingNodeScoreDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2SeasonData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2SeasonData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2SeasonData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2SeasonData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2SeasonData
    def SeasonType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2SeasonData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2SeasonData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2SeasonData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2SeasonData
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2SeasonDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2SeasonDataAddSeasonType(builder, seasonType):
    builder.PrependInt32Slot(0, seasonType, 0)

def clz_Torappu_SandboxV2SeasonDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2SeasonDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_SandboxV2SeasonDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_SandboxV2SeasonDataAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def clz_Torappu_SandboxV2SeasonDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2SeasonData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2SeasonData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2SeasonData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2SeasonData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2SeasonData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2SeasonData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2SeasonData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2SeasonDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2SeasonDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2SeasonDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2SeasonDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ConfirmIconData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ConfirmIconData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ConfirmIconData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ConfirmIconData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ConfirmIconData
    def IconType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ConfirmIconData
    def IconPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ConfirmIconDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2ConfirmIconDataAddIconType(builder, iconType):
    builder.PrependInt32Slot(0, iconType, 0)

def clz_Torappu_SandboxV2ConfirmIconDataAddIconPicId(builder, iconPicId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconPicId), 0)

def clz_Torappu_SandboxV2ConfirmIconDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2TutorialRepoCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2TutorialRepoCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2TutorialRepoCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2TutorialRepoCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def InstId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def FavorPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def PotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def MainSkillLv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def SpecSkillList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def SpecSkillListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def SpecSkillListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialRepoCharData
    def SpecSkillListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_SandboxV2TutorialRepoCharDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddInstId(builder, instId):
    builder.PrependInt32Slot(0, instId, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(2, evolvePhase, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddLevel(builder, level):
    builder.PrependInt32Slot(3, level, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddFavorPoint(builder, favorPoint):
    builder.PrependInt32Slot(4, favorPoint, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddPotentialRank(builder, potentialRank):
    builder.PrependInt32Slot(5, potentialRank, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddMainSkillLv(builder, mainSkillLv):
    builder.PrependInt32Slot(6, mainSkillLv, 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataAddSpecSkillList(builder, specSkillList):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(specSkillList), 0)

def clz_Torappu_SandboxV2TutorialRepoCharDataStartSpecSkillListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialRepoCharDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_SandboxV2TutorialRepoCharData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_SandboxV2TutorialRepoCharData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_SandboxV2TutorialRepoCharData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_SandboxV2TutorialRepoCharData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_SandboxV2TutorialRepoCharData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_SandboxV2TutorialRepoCharData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2TutorialRepoCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_SandboxV2TutorialRepoCharDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_SandboxV2TutorialRepoCharDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_SandboxV2TutorialRepoCharDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_SandboxV2TutorialRepoCharDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2TutorialBasicConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2TutorialBasicConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2TutorialBasicConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2TutorialBasicConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2TutorialBasicConst
    def TrainingQuestList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2TutorialBasicConst
    def TrainingQuestListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialBasicConst
    def TrainingQuestListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_SandboxV2TutorialBasicConstStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxV2TutorialBasicConstAddTrainingQuestList(builder, trainingQuestList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trainingQuestList), 0)

def clz_Torappu_SandboxV2TutorialBasicConstStartTrainingQuestListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialBasicConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2TutorialData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2TutorialData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2TutorialData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2TutorialData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2TutorialData
    def CharRepoData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_SandboxV2TutorialRepoCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2TutorialData
    def CharRepoDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialData
    def CharRepoDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2TutorialData
    def QuestData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2QuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2TutorialData
    def QuestDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialData
    def QuestDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2TutorialData
    def GuideQuestData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2GuideQuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2TutorialData
    def GuideQuestDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialData
    def GuideQuestDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2TutorialData
    def QuestLineData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2QuestLineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2TutorialData
    def QuestLineDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2TutorialData
    def QuestLineDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2TutorialData
    def BasicConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2TutorialBasicConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SandboxV2TutorialDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2TutorialDataAddCharRepoData(builder, charRepoData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charRepoData), 0)

def clz_Torappu_SandboxV2TutorialDataStartCharRepoDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialDataAddQuestData(builder, questData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(questData), 0)

def clz_Torappu_SandboxV2TutorialDataStartQuestDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialDataAddGuideQuestData(builder, guideQuestData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(guideQuestData), 0)

def clz_Torappu_SandboxV2TutorialDataStartGuideQuestDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialDataAddQuestLineData(builder, questLineData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(questLineData), 0)

def clz_Torappu_SandboxV2TutorialDataStartQuestLineDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2TutorialDataAddBasicConst(builder, basicConst):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(basicConst), 0)

def clz_Torappu_SandboxV2TutorialDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacerBasicInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacerBasicInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacerBasicInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacerBasicInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacerBasicInfo
    def RacerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerBasicInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RacerBasicInfo
    def RacerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerBasicInfo
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerBasicInfo
    def AttributeMaxValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacerBasicInfo
    def AttributeMaxValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacerBasicInfo
    def AttributeMaxValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacerBasicInfo
    def AttributeMaxValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_SandboxV2RacerBasicInfoStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2RacerBasicInfoAddRacerId(builder, racerId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(racerId), 0)

def clz_Torappu_SandboxV2RacerBasicInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2RacerBasicInfoAddRacerName(builder, racerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(racerName), 0)

def clz_Torappu_SandboxV2RacerBasicInfoAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxV2RacerBasicInfoAddAttributeMaxValue(builder, attributeMaxValue):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(attributeMaxValue), 0)

def clz_Torappu_SandboxV2RacerBasicInfoStartAttributeMaxValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacerBasicInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RacerBasicInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RacerBasicInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RacerBasicInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RacerBasicInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RacerBasicInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RacerBasicInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacerBasicInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RacerBasicInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RacerBasicInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RacerBasicInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RacerBasicInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacerTalentInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacerTalentInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacerTalentInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacerTalentInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacerTalentInfo
    def TalentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerTalentInfo
    def TalentType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RacerTalentInfo
    def TalentIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerTalentInfo
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RacerTalentInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2RacerTalentInfoAddTalentId(builder, talentId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(talentId), 0)

def clz_Torappu_SandboxV2RacerTalentInfoAddTalentType(builder, talentType):
    builder.PrependInt32Slot(1, talentType, 0)

def clz_Torappu_SandboxV2RacerTalentInfoAddTalentIconId(builder, talentIconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(talentIconId), 0)

def clz_Torappu_SandboxV2RacerTalentInfoAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RacerTalentInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RacerTalentInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RacerTalentInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RacerTalentInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RacerTalentInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RacerTalentInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RacerTalentInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacerTalentInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RacerTalentInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RacerTalentInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RacerTalentInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RacerTalentInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacerNameInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacerNameInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacerNameInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacerNameInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacerNameInfo
    def NameId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerNameInfo
    def NameType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RacerNameInfo
    def NameDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RacerNameInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2RacerNameInfoAddNameId(builder, nameId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nameId), 0)

def clz_Torappu_SandboxV2RacerNameInfoAddNameType(builder, nameType):
    builder.PrependInt32Slot(1, nameType, 0)

def clz_Torappu_SandboxV2RacerNameInfoAddNameDesc(builder, nameDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nameDesc), 0)

def clz_Torappu_SandboxV2RacerNameInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RacerNameInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RacerNameInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RacerNameInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RacerNameInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RacerNameInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RacerNameInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacerNameInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RacerNameInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RacerNameInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RacerNameInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RacerNameInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacerMedalInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacerMedalInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacerMedalInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacerMedalInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacerMedalInfo
    def MedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerMedalInfo
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2RacerMedalInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerMedalInfo
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerMedalInfo
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacerMedalInfo
    def SmallIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2RacerMedalInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_SandboxV2RacerMedalInfoAddMedalId(builder, medalId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(medalId), 0)

def clz_Torappu_SandboxV2RacerMedalInfoAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2RacerMedalInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2RacerMedalInfoAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_SandboxV2RacerMedalInfoAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2RacerMedalInfoAddSmallIconId(builder, smallIconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(smallIconId), 0)

def clz_Torappu_SandboxV2RacerMedalInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RacerMedalInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RacerMedalInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RacerMedalInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RacerMedalInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RacerMedalInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RacerMedalInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacerMedalInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RacerMedalInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RacerMedalInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RacerMedalInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RacerMedalInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacingItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacingItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacingItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacingItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacingItemInfo
    def RacerItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingItemInfo
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingItemInfo
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingItemInfo
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingItemInfo
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingItemInfo
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_SandboxV2RacingItemInfoStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2RacingItemInfoAddRacerItemId(builder, racerItemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(racerItemId), 0)

def clz_Torappu_SandboxV2RacingItemInfoAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_SandboxV2RacingItemInfoAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_SandboxV2RacingItemInfoAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_SandboxV2RacingItemInfoStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingItemInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2RacingItemInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2RacingItemInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2RacingItemInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2RacingItemInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2RacingItemInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2RacingItemInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacingItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2RacingItemInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2RacingItemInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2RacingItemInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2RacingItemInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacingConstData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacingConstData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacingConstData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacingConstData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacingConstData
    def AttributeNameList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_SandboxV2RacingConstData
    def AttributeNameListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def AttributeNameListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def RacerMaxValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def RacerMaxValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def RacerMaxValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def RacerMaxValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def BagFullHintPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def TempBagFullHintPercent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def BagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def TempBagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def BagEmptyLeftDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def BagEmptyRightDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def TempBagEmptyLeftDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def TempBagEmptyRightDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def BornTalentIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def BornTalentTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def LearnedTalentIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def LearnedTalentTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def TalentEmptyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def SlugItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2RacingConstData
    def RacingHpFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def RacingSpeedFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def RacingAccelerationFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def RecoverMoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def RecoverHpFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def BleedingFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def MaxSteeringFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def SteeringMassLevelFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def SteeringMoveSpeedFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def SafeAngleCos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def SafeCollisionForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceSector(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceSectorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceSectorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceSectorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceLevel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceLevelAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceLevelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionForceLevelIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionSpeedLoss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionSpeedLossAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionSpeedLossLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionSpeedLossIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionHpLoss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionHpLossAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionHpLossLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def CollisionHpLossIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionSpeedLoss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionSpeedLossAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionSpeedLossLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionSpeedLossIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionHpLoss(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionHpLossAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionHpLossLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def TileCollisionHpLossIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def AutoUseItemTimeRange(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def AutoUseItemTimeRangeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def AutoUseItemTimeRangeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingConstData
    def AutoUseItemTimeRangeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # clz_Torappu_SandboxV2RacingConstData
    def RecoverAcceleration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_SandboxV2RacingConstDataStart(builder):
    builder.StartObject(36)

def clz_Torappu_SandboxV2RacingConstDataAddAttributeNameList(builder, attributeNameList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(attributeNameList), 0)

def clz_Torappu_SandboxV2RacingConstDataStartAttributeNameListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddRacerMaxValue(builder, racerMaxValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(racerMaxValue), 0)

def clz_Torappu_SandboxV2RacingConstDataStartRacerMaxValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddBagFullHintPercent(builder, bagFullHintPercent):
    builder.PrependFloat32Slot(2, bagFullHintPercent, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddTempBagFullHintPercent(builder, tempBagFullHintPercent):
    builder.PrependFloat32Slot(3, tempBagFullHintPercent, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddBagName(builder, bagName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bagName), 0)

def clz_Torappu_SandboxV2RacingConstDataAddTempBagName(builder, tempBagName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tempBagName), 0)

def clz_Torappu_SandboxV2RacingConstDataAddBagEmptyLeftDesc(builder, bagEmptyLeftDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(bagEmptyLeftDesc), 0)

def clz_Torappu_SandboxV2RacingConstDataAddBagEmptyRightDesc(builder, bagEmptyRightDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(bagEmptyRightDesc), 0)

def clz_Torappu_SandboxV2RacingConstDataAddTempBagEmptyLeftDesc(builder, tempBagEmptyLeftDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tempBagEmptyLeftDesc), 0)

def clz_Torappu_SandboxV2RacingConstDataAddTempBagEmptyRightDesc(builder, tempBagEmptyRightDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tempBagEmptyRightDesc), 0)

def clz_Torappu_SandboxV2RacingConstDataAddBornTalentIconId(builder, bornTalentIconId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(bornTalentIconId), 0)

def clz_Torappu_SandboxV2RacingConstDataAddBornTalentTitle(builder, bornTalentTitle):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(bornTalentTitle), 0)

def clz_Torappu_SandboxV2RacingConstDataAddLearnedTalentIconId(builder, learnedTalentIconId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(learnedTalentIconId), 0)

def clz_Torappu_SandboxV2RacingConstDataAddLearnedTalentTitle(builder, learnedTalentTitle):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(learnedTalentTitle), 0)

def clz_Torappu_SandboxV2RacingConstDataAddTalentEmptyDesc(builder, talentEmptyDesc):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(talentEmptyDesc), 0)

def clz_Torappu_SandboxV2RacingConstDataAddSlugItemId(builder, slugItemId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(slugItemId), 0)

def clz_Torappu_SandboxV2RacingConstDataAddRacingHpFactor(builder, racingHpFactor):
    builder.PrependFloat32Slot(16, racingHpFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddRacingSpeedFactor(builder, racingSpeedFactor):
    builder.PrependFloat32Slot(17, racingSpeedFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddRacingAccelerationFactor(builder, racingAccelerationFactor):
    builder.PrependFloat32Slot(18, racingAccelerationFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddRecoverMoveSpeed(builder, recoverMoveSpeed):
    builder.PrependFloat32Slot(19, recoverMoveSpeed, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddRecoverHpFactor(builder, recoverHpFactor):
    builder.PrependFloat32Slot(20, recoverHpFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddBleedingFactor(builder, bleedingFactor):
    builder.PrependFloat32Slot(21, bleedingFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddMaxSteeringFactor(builder, maxSteeringFactor):
    builder.PrependFloat32Slot(22, maxSteeringFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddSteeringMassLevelFactor(builder, steeringMassLevelFactor):
    builder.PrependFloat32Slot(23, steeringMassLevelFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddSteeringMoveSpeedFactor(builder, steeringMoveSpeedFactor):
    builder.PrependFloat32Slot(24, steeringMoveSpeedFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddSafeAngleCos(builder, safeAngleCos):
    builder.PrependFloat32Slot(25, safeAngleCos, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddSafeCollisionForceLevel(builder, safeCollisionForceLevel):
    builder.PrependFloat32Slot(26, safeCollisionForceLevel, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddTileCollisionFactor(builder, tileCollisionFactor):
    builder.PrependFloat32Slot(27, tileCollisionFactor, 0.0)

def clz_Torappu_SandboxV2RacingConstDataAddCollisionForceSector(builder, collisionForceSector):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(collisionForceSector), 0)

def clz_Torappu_SandboxV2RacingConstDataStartCollisionForceSectorVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddCollisionForceLevel(builder, collisionForceLevel):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(collisionForceLevel), 0)

def clz_Torappu_SandboxV2RacingConstDataStartCollisionForceLevelVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddCollisionSpeedLoss(builder, collisionSpeedLoss):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(collisionSpeedLoss), 0)

def clz_Torappu_SandboxV2RacingConstDataStartCollisionSpeedLossVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddCollisionHpLoss(builder, collisionHpLoss):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(collisionHpLoss), 0)

def clz_Torappu_SandboxV2RacingConstDataStartCollisionHpLossVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddTileCollisionSpeedLoss(builder, tileCollisionSpeedLoss):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(tileCollisionSpeedLoss), 0)

def clz_Torappu_SandboxV2RacingConstDataStartTileCollisionSpeedLossVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddTileCollisionHpLoss(builder, tileCollisionHpLoss):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(tileCollisionHpLoss), 0)

def clz_Torappu_SandboxV2RacingConstDataStartTileCollisionHpLossVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddAutoUseItemTimeRange(builder, autoUseItemTimeRange):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(autoUseItemTimeRange), 0)

def clz_Torappu_SandboxV2RacingConstDataStartAutoUseItemTimeRangeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingConstDataAddRecoverAcceleration(builder, recoverAcceleration):
    builder.PrependFloat32Slot(35, recoverAcceleration, 0.0)

def clz_Torappu_SandboxV2RacingConstDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2RacingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2RacingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2RacingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2RacingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2RacingData
    def RacerBasicInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RacerBasicInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def RacerBasicInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def RacerBasicInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def RacerTalentInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RacerTalentInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def RacerTalentInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def RacerTalentInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def RacerNameInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RacerNameInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def RacerNameInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def RacerNameInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def RacerMedalInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RacerMedalInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def RacerMedalInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def RacerMedalInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def EnemyItemMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def EnemyItemMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def EnemyItemMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def RacingItemInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RacingItemInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2RacingData
    def RacingItemInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2RacingData
    def RacingItemInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2RacingData
    def ConstData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacingConstData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SandboxV2RacingDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_SandboxV2RacingDataAddRacerBasicInfo(builder, racerBasicInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(racerBasicInfo), 0)

def clz_Torappu_SandboxV2RacingDataStartRacerBasicInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddRacerTalentInfo(builder, racerTalentInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(racerTalentInfo), 0)

def clz_Torappu_SandboxV2RacingDataStartRacerTalentInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddRacerNameInfo(builder, racerNameInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(racerNameInfo), 0)

def clz_Torappu_SandboxV2RacingDataStartRacerNameInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddRacerMedalInfo(builder, racerMedalInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(racerMedalInfo), 0)

def clz_Torappu_SandboxV2RacingDataStartRacerMedalInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddEnemyItemMap(builder, enemyItemMap):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enemyItemMap), 0)

def clz_Torappu_SandboxV2RacingDataStartEnemyItemMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddRacingItemInfo(builder, racingItemInfo):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(racingItemInfo), 0)

def clz_Torappu_SandboxV2RacingDataStartRacingItemInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2RacingDataAddConstData(builder, constData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(constData), 0)

def clz_Torappu_SandboxV2RacingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ChallengeConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ChallengeConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ChallengeConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ChallengeConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ChallengeConst
    def ChallengeModeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeConst
    def DailyTitleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeConst
    def DebuffCountdownDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeConst
    def GainAllDebuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeConst
    def DailyUpAttributeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ChallengeConstStart(builder):
    builder.StartObject(5)

def clz_Torappu_SandboxV2ChallengeConstAddChallengeModeDesc(builder, challengeModeDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(challengeModeDesc), 0)

def clz_Torappu_SandboxV2ChallengeConstAddDailyTitleDesc(builder, dailyTitleDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(dailyTitleDesc), 0)

def clz_Torappu_SandboxV2ChallengeConstAddDebuffCountdownDesc(builder, debuffCountdownDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(debuffCountdownDesc), 0)

def clz_Torappu_SandboxV2ChallengeConstAddGainAllDebuffDesc(builder, gainAllDebuffDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gainAllDebuffDesc), 0)

def clz_Torappu_SandboxV2ChallengeConstAddDailyUpAttributeDesc(builder, dailyUpAttributeDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dailyUpAttributeDesc), 0)

def clz_Torappu_SandboxV2ChallengeConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ChallengeModeUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ChallengeModeUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ChallengeModeUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ChallengeModeUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ChallengeModeUnlockData
    def UnlockId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeModeUnlockData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeUnlockData
    def ConditionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ChallengeModeUnlockDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxV2ChallengeModeUnlockDataAddUnlockId(builder, unlockId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockId), 0)

def clz_Torappu_SandboxV2ChallengeModeUnlockDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2ChallengeModeUnlockDataAddConditionDesc(builder, conditionDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(conditionDesc), 0)

def clz_Torappu_SandboxV2ChallengeModeUnlockDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ChallengeModeUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ChallengeModeRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ChallengeModeRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ChallengeModeRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def RewardDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def RewardItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def RewardItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeRewardData
    def RewardItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_SandboxV2ChallengeModeRewardDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ChallengeModeRewardDataAddRewardId(builder, rewardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)

def clz_Torappu_SandboxV2ChallengeModeRewardDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_SandboxV2ChallengeModeRewardDataAddRewardDay(builder, rewardDay):
    builder.PrependInt32Slot(2, rewardDay, 0)

def clz_Torappu_SandboxV2ChallengeModeRewardDataAddRewardItemList(builder, rewardItemList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardItemList), 0)

def clz_Torappu_SandboxV2ChallengeModeRewardDataStartRewardItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ChallengeModeRewardDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2ChallengeModeRewardData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ChallengeModeRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2ChallengeModeRewardDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ChallengeModeDifficultyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ChallengeModeDifficultyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ChallengeModeDifficultyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ChallengeModeDifficultyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ChallengeModeDifficultyData
    def ChallengeDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeDifficultyData
    def DiffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxV2ChallengeModeDifficultyDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_SandboxV2ChallengeModeDifficultyDataAddChallengeDay(builder, challengeDay):
    builder.PrependInt32Slot(0, challengeDay, 0)

def clz_Torappu_SandboxV2ChallengeModeDifficultyDataAddDiffDesc(builder, diffDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(diffDesc), 0)

def clz_Torappu_SandboxV2ChallengeModeDifficultyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2ChallengeModeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2ChallengeModeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2ChallengeModeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2ChallengeModeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ChallengeConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeUnlockData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ChallengeModeUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeUnlockDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeUnlockDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeRewardData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ChallengeModeRewardData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeRewardDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeRewardDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeDifficultyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2ChallengeModeDifficultyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeDifficultyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2ChallengeModeData
    def ChallengeModeDifficultyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_SandboxV2ChallengeModeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_SandboxV2ChallengeModeDataAddChallengeConst(builder, challengeConst):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(challengeConst), 0)

def clz_Torappu_SandboxV2ChallengeModeDataAddChallengeModeUnlockData(builder, challengeModeUnlockData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(challengeModeUnlockData), 0)

def clz_Torappu_SandboxV2ChallengeModeDataStartChallengeModeUnlockDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ChallengeModeDataAddChallengeModeRewardData(builder, challengeModeRewardData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(challengeModeRewardData), 0)

def clz_Torappu_SandboxV2ChallengeModeDataStartChallengeModeRewardDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ChallengeModeDataAddChallengeModeDifficultyData(builder, challengeModeDifficultyData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(challengeModeDifficultyData), 0)

def clz_Torappu_SandboxV2ChallengeModeDataStartChallengeModeDifficultyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2ChallengeModeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxV2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxV2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxV2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxV2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxV2Data
    def MapData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def MapDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def MapDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ItemTrapData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ItemTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ItemTrapDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ItemTrapDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ItemTrapTagData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ItemTrapTagData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ItemTrapTagDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ItemTrapTagDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def BuildingItemData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2BuildingItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BuildingItemDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def BuildingItemDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def CraftItemData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2CraftItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def CraftItemDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def CraftItemDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def LivestockProduceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2LivestockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def LivestockProduceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def LivestockProduceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def CraftGroupData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2CraftGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def CraftGroupDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def CraftGroupDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def AlchemyRecipeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2AlchemyRecipeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def AlchemyRecipeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def AlchemyRecipeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def DrinkMatData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2DrinkMatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def DrinkMatDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def DrinkMatDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def FoodMatData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2FoodMatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def FoodMatDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def FoodMatDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def FoodData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2FoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def FoodDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def FoodDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def NodeTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2NodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def NodeTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def NodeTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def NodeUpgradeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2NodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def NodeUpgradeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def NodeUpgradeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def WeatherData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2WeatherData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def WeatherDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def WeatherDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def StageData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2StageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def StageDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def StageDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ZoneData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ZoneDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ZoneDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def NodeBuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2NodeBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def NodeBuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def NodeBuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RewardConfigData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RewardConfigGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def FloatIconData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2FloatIconData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def FloatIconDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def FloatIconDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EnemyRushTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2EnemyRushTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EnemyRushTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EnemyRushTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RushEnemyData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2BattleRushEnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def GameConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2GameConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BasicConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2BasicConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RiftConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def DevelopmentConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2DevelopmentConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BattleLoadingTips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BattleLoadingTipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def BattleLoadingTipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RuneDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RuneTable_PackedRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RuneDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RuneDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ItemRuneList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ItemRuneListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ItemRuneListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def QuestData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2QuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def QuestDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def QuestDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def NpcData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2NpcData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def NpcDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def NpcDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def DialogData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2DialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def DialogDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def DialogDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def QuestLineData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2QuestLineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def QuestLineDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def QuestLineDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def QuestLineStoryData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def QuestLineStoryDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def QuestLineStoryDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def GuideQuestData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2GuideQuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def GuideQuestDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def GuideQuestDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def DevelopmentData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2DevelopmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def DevelopmentDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def DevelopmentDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EventData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2EventData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EventDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EventDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EventSceneData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2EventSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EventSceneDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EventSceneDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EventChoiceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2EventChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EventChoiceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EventChoiceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ExpeditionData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ExpeditionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ExpeditionDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ExpeditionDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EventEffectData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2EventEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EventEffectDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EventEffectDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ShopGoodData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ShopGoodData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ShopGoodDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ShopGoodDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ShopDialogData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ShopDialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def LogisticsData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2LogisticsData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def LogisticsDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def LogisticsDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def LogisticsCharMapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__list_dict__int__list_clz_Torappu_SandboxV2LogisticsCharData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def LogisticsCharMappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def LogisticsCharMappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def MaterialKeywordData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def MaterialKeywordDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def MaterialKeywordDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def MonthRushData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2MonthRushData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def MonthRushDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def MonthRushDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftTerrainParamData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftTerrainParamDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftTerrainParamDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftClimateParamData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftClimateParamDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftClimateParamDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftEnemyParamData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftEnemyParamDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftEnemyParamDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftSubTargetData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftSubTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftSubTargetDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftSubTargetDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftMainTargetData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftMainTargetData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftMainTargetDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftMainTargetDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftGlobalEffectData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftGlobalEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftGlobalEffectDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftGlobalEffectDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def FixedRiftData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2FixedRiftData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def FixedRiftDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def FixedRiftDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftTeamBuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_SandboxV2RiftTeamBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftTeamBuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftTeamBuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftDifficultyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2RiftDifficultyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftDifficultyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftDifficultyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def RiftRewardDisplayData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RiftRewardDisplayDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def RiftRewardDisplayDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def EnemyReplaceData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def EnemyReplaceDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def EnemyReplaceDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ArchiveQuestData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def AchievementData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ArchiveAchievementData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def AchievementDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def AchievementDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def AchievementTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ArchiveAchievementTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def AchievementTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def AchievementTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ArchiveQuestTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ArchiveQuestTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(124))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ArchiveMusicUnlockData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2ArchiveMusicUnlockData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ArchiveMusicUnlockDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ArchiveMusicUnlockDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(126))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def BaseUpdate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2BaseUpdateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BaseUpdateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def BaseUpdateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(128))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def DevelopmentLineSegmentDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2DevelopmentLineSegmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def DevelopmentLineSegmentDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def DevelopmentLineSegmentDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(130))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def BuildingNodeScoreData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2BuildingNodeScoreData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def BuildingNodeScoreDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def BuildingNodeScoreDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(132))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def SeasonData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2SeasonData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def SeasonDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def SeasonDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(134))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ConfirmIconData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_SandboxV2ConfirmIconData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ConfirmIconDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ConfirmIconDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(136))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def ShopUpdateTimeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # clz_Torappu_SandboxV2Data
    def ShopUpdateTimeDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ShopUpdateTimeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxV2Data
    def ShopUpdateTimeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(138))
        return o == 0

    # clz_Torappu_SandboxV2Data
    def TutorialData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(140))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2TutorialData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def RacingData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(142))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2RacingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxV2Data
    def ChallengeModeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(144))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2ChallengeModeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_SandboxV2DataStart(builder):
    builder.StartObject(71)

def clz_Torappu_SandboxV2DataAddMapData(builder, mapData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(mapData), 0)

def clz_Torappu_SandboxV2DataStartMapDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddItemTrapData(builder, itemTrapData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(itemTrapData), 0)

def clz_Torappu_SandboxV2DataStartItemTrapDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddItemTrapTagData(builder, itemTrapTagData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemTrapTagData), 0)

def clz_Torappu_SandboxV2DataStartItemTrapTagDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddBuildingItemData(builder, buildingItemData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(buildingItemData), 0)

def clz_Torappu_SandboxV2DataStartBuildingItemDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddCraftItemData(builder, craftItemData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(craftItemData), 0)

def clz_Torappu_SandboxV2DataStartCraftItemDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddLivestockProduceData(builder, livestockProduceData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(livestockProduceData), 0)

def clz_Torappu_SandboxV2DataStartLivestockProduceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddCraftGroupData(builder, craftGroupData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(craftGroupData), 0)

def clz_Torappu_SandboxV2DataStartCraftGroupDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddAlchemyRecipeData(builder, alchemyRecipeData):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(alchemyRecipeData), 0)

def clz_Torappu_SandboxV2DataStartAlchemyRecipeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddDrinkMatData(builder, drinkMatData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(drinkMatData), 0)

def clz_Torappu_SandboxV2DataStartDrinkMatDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddFoodMatData(builder, foodMatData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(foodMatData), 0)

def clz_Torappu_SandboxV2DataStartFoodMatDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddFoodData(builder, foodData):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(foodData), 0)

def clz_Torappu_SandboxV2DataStartFoodDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddNodeTypeData(builder, nodeTypeData):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTypeData), 0)

def clz_Torappu_SandboxV2DataStartNodeTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddNodeUpgradeData(builder, nodeUpgradeData):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpgradeData), 0)

def clz_Torappu_SandboxV2DataStartNodeUpgradeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddWeatherData(builder, weatherData):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(weatherData), 0)

def clz_Torappu_SandboxV2DataStartWeatherDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddStageData(builder, stageData):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(stageData), 0)

def clz_Torappu_SandboxV2DataStartStageDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddZoneData(builder, zoneData):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(zoneData), 0)

def clz_Torappu_SandboxV2DataStartZoneDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddNodeBuffData(builder, nodeBuffData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(nodeBuffData), 0)

def clz_Torappu_SandboxV2DataStartNodeBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRewardConfigData(builder, rewardConfigData):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(rewardConfigData), 0)

def clz_Torappu_SandboxV2DataAddFloatIconData(builder, floatIconData):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(floatIconData), 0)

def clz_Torappu_SandboxV2DataStartFloatIconDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEnemyRushTypeData(builder, enemyRushTypeData):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(enemyRushTypeData), 0)

def clz_Torappu_SandboxV2DataStartEnemyRushTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRushEnemyData(builder, rushEnemyData):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(rushEnemyData), 0)

def clz_Torappu_SandboxV2DataAddGameConst(builder, gameConst):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(gameConst), 0)

def clz_Torappu_SandboxV2DataAddBasicConst(builder, basicConst):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(basicConst), 0)

def clz_Torappu_SandboxV2DataAddRiftConst(builder, riftConst):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(riftConst), 0)

def clz_Torappu_SandboxV2DataAddDevelopmentConst(builder, developmentConst):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(developmentConst), 0)

def clz_Torappu_SandboxV2DataAddBattleLoadingTips(builder, battleLoadingTips):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(battleLoadingTips), 0)

def clz_Torappu_SandboxV2DataStartBattleLoadingTipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRuneDatas(builder, runeDatas):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(runeDatas), 0)

def clz_Torappu_SandboxV2DataStartRuneDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddItemRuneList(builder, itemRuneList):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(itemRuneList), 0)

def clz_Torappu_SandboxV2DataStartItemRuneListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddQuestData(builder, questData):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(questData), 0)

def clz_Torappu_SandboxV2DataStartQuestDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddNpcData(builder, npcData):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(npcData), 0)

def clz_Torappu_SandboxV2DataStartNpcDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddDialogData(builder, dialogData):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(dialogData), 0)

def clz_Torappu_SandboxV2DataStartDialogDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddQuestLineData(builder, questLineData):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(questLineData), 0)

def clz_Torappu_SandboxV2DataStartQuestLineDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddQuestLineStoryData(builder, questLineStoryData):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(questLineStoryData), 0)

def clz_Torappu_SandboxV2DataStartQuestLineStoryDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddGuideQuestData(builder, guideQuestData):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(guideQuestData), 0)

def clz_Torappu_SandboxV2DataStartGuideQuestDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddDevelopmentData(builder, developmentData):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(developmentData), 0)

def clz_Torappu_SandboxV2DataStartDevelopmentDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEventData(builder, eventData):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(eventData), 0)

def clz_Torappu_SandboxV2DataStartEventDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEventSceneData(builder, eventSceneData):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(eventSceneData), 0)

def clz_Torappu_SandboxV2DataStartEventSceneDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEventChoiceData(builder, eventChoiceData):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(eventChoiceData), 0)

def clz_Torappu_SandboxV2DataStartEventChoiceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddExpeditionData(builder, expeditionData):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionData), 0)

def clz_Torappu_SandboxV2DataStartExpeditionDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEventEffectData(builder, eventEffectData):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(eventEffectData), 0)

def clz_Torappu_SandboxV2DataStartEventEffectDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddShopGoodData(builder, shopGoodData):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(shopGoodData), 0)

def clz_Torappu_SandboxV2DataStartShopGoodDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddShopDialogData(builder, shopDialogData):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(shopDialogData), 0)

def clz_Torappu_SandboxV2DataAddLogisticsData(builder, logisticsData):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsData), 0)

def clz_Torappu_SandboxV2DataStartLogisticsDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddLogisticsCharMapping(builder, logisticsCharMapping):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(logisticsCharMapping), 0)

def clz_Torappu_SandboxV2DataStartLogisticsCharMappingVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddMaterialKeywordData(builder, materialKeywordData):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(materialKeywordData), 0)

def clz_Torappu_SandboxV2DataStartMaterialKeywordDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddMonthRushData(builder, monthRushData):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(monthRushData), 0)

def clz_Torappu_SandboxV2DataStartMonthRushDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftTerrainParamData(builder, riftTerrainParamData):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(riftTerrainParamData), 0)

def clz_Torappu_SandboxV2DataStartRiftTerrainParamDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftClimateParamData(builder, riftClimateParamData):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(riftClimateParamData), 0)

def clz_Torappu_SandboxV2DataStartRiftClimateParamDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftEnemyParamData(builder, riftEnemyParamData):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(riftEnemyParamData), 0)

def clz_Torappu_SandboxV2DataStartRiftEnemyParamDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftSubTargetData(builder, riftSubTargetData):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(riftSubTargetData), 0)

def clz_Torappu_SandboxV2DataStartRiftSubTargetDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftMainTargetData(builder, riftMainTargetData):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(riftMainTargetData), 0)

def clz_Torappu_SandboxV2DataStartRiftMainTargetDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftGlobalEffectData(builder, riftGlobalEffectData):
    builder.PrependUOffsetTRelativeSlot(51, flatbuffers.number_types.UOffsetTFlags.py_type(riftGlobalEffectData), 0)

def clz_Torappu_SandboxV2DataStartRiftGlobalEffectDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddFixedRiftData(builder, fixedRiftData):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(fixedRiftData), 0)

def clz_Torappu_SandboxV2DataStartFixedRiftDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftTeamBuffData(builder, riftTeamBuffData):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(riftTeamBuffData), 0)

def clz_Torappu_SandboxV2DataStartRiftTeamBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftDifficultyData(builder, riftDifficultyData):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(riftDifficultyData), 0)

def clz_Torappu_SandboxV2DataStartRiftDifficultyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddRiftRewardDisplayData(builder, riftRewardDisplayData):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(riftRewardDisplayData), 0)

def clz_Torappu_SandboxV2DataStartRiftRewardDisplayDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddEnemyReplaceData(builder, enemyReplaceData):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(enemyReplaceData), 0)

def clz_Torappu_SandboxV2DataStartEnemyReplaceDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddArchiveQuestData(builder, archiveQuestData):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(archiveQuestData), 0)

def clz_Torappu_SandboxV2DataStartArchiveQuestDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddAchievementData(builder, achievementData):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(achievementData), 0)

def clz_Torappu_SandboxV2DataStartAchievementDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddAchievementTypeData(builder, achievementTypeData):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(achievementTypeData), 0)

def clz_Torappu_SandboxV2DataStartAchievementTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddArchiveQuestTypeData(builder, archiveQuestTypeData):
    builder.PrependUOffsetTRelativeSlot(60, flatbuffers.number_types.UOffsetTFlags.py_type(archiveQuestTypeData), 0)

def clz_Torappu_SandboxV2DataStartArchiveQuestTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddArchiveMusicUnlockData(builder, archiveMusicUnlockData):
    builder.PrependUOffsetTRelativeSlot(61, flatbuffers.number_types.UOffsetTFlags.py_type(archiveMusicUnlockData), 0)

def clz_Torappu_SandboxV2DataStartArchiveMusicUnlockDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddBaseUpdate(builder, baseUpdate):
    builder.PrependUOffsetTRelativeSlot(62, flatbuffers.number_types.UOffsetTFlags.py_type(baseUpdate), 0)

def clz_Torappu_SandboxV2DataStartBaseUpdateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddDevelopmentLineSegmentDatas(builder, developmentLineSegmentDatas):
    builder.PrependUOffsetTRelativeSlot(63, flatbuffers.number_types.UOffsetTFlags.py_type(developmentLineSegmentDatas), 0)

def clz_Torappu_SandboxV2DataStartDevelopmentLineSegmentDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddBuildingNodeScoreData(builder, buildingNodeScoreData):
    builder.PrependUOffsetTRelativeSlot(64, flatbuffers.number_types.UOffsetTFlags.py_type(buildingNodeScoreData), 0)

def clz_Torappu_SandboxV2DataStartBuildingNodeScoreDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddSeasonData(builder, seasonData):
    builder.PrependUOffsetTRelativeSlot(65, flatbuffers.number_types.UOffsetTFlags.py_type(seasonData), 0)

def clz_Torappu_SandboxV2DataStartSeasonDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddConfirmIconData(builder, confirmIconData):
    builder.PrependUOffsetTRelativeSlot(66, flatbuffers.number_types.UOffsetTFlags.py_type(confirmIconData), 0)

def clz_Torappu_SandboxV2DataStartConfirmIconDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxV2DataAddShopUpdateTimeData(builder, shopUpdateTimeData):
    builder.PrependUOffsetTRelativeSlot(67, flatbuffers.number_types.UOffsetTFlags.py_type(shopUpdateTimeData), 0)

def clz_Torappu_SandboxV2DataStartShopUpdateTimeDataVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def clz_Torappu_SandboxV2DataAddTutorialData(builder, tutorialData):
    builder.PrependUOffsetTRelativeSlot(68, flatbuffers.number_types.UOffsetTFlags.py_type(tutorialData), 0)

def clz_Torappu_SandboxV2DataAddRacingData(builder, racingData):
    builder.PrependUOffsetTRelativeSlot(69, flatbuffers.number_types.UOffsetTFlags.py_type(racingData), 0)

def clz_Torappu_SandboxV2DataAddChallengeModeData(builder, challengeModeData):
    builder.PrependUOffsetTRelativeSlot(70, flatbuffers.number_types.UOffsetTFlags.py_type(challengeModeData), 0)

def clz_Torappu_SandboxV2DataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxV2Data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxV2Data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxV2Data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxV2Data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxV2Data
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxV2Data
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxV2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxV2DataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxV2DataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxV2DataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxV2DataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxPermDetailData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxPermDetailData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxPermDetailData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxPermDetailData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxPermDetailData
    def SandboxV2(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxV2Data()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxPermDetailData
    def SandboxV2Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxPermDetailData
    def SandboxV2IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_SandboxPermDetailDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_SandboxPermDetailDataAddSandboxV2(builder, sandboxV2):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sandboxV2), 0)

def clz_Torappu_SandboxPermDetailDataStartSandboxV2Vector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxPermDetailDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxPermItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxPermItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxPermItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxPermItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxPermItemData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermItemData
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermItemData
    def ItemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermItemData
    def ItemUsage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermItemData
    def ItemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_SandboxPermItemData
    def ItemRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_SandboxPermItemData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_SandboxPermItemDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_SandboxPermItemDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_SandboxPermItemDataAddItemType(builder, itemType):
    builder.PrependInt32Slot(1, itemType, 0)

def clz_Torappu_SandboxPermItemDataAddItemName(builder, itemName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemName), 0)

def clz_Torappu_SandboxPermItemDataAddItemUsage(builder, itemUsage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(itemUsage), 0)

def clz_Torappu_SandboxPermItemDataAddItemDesc(builder, itemDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemDesc), 0)

def clz_Torappu_SandboxPermItemDataAddItemRarity(builder, itemRarity):
    builder.PrependInt32Slot(5, itemRarity, 0)

def clz_Torappu_SandboxPermItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(6, sortId, 0)

def clz_Torappu_SandboxPermItemDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_SandboxPermItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_SandboxPermItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_SandboxPermItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_SandboxPermItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_SandboxPermItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_SandboxPermItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_SandboxPermItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxPermItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_SandboxPermItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_SandboxPermItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_SandboxPermItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_SandboxPermItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_SandboxPermTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_SandboxPermTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_SandboxPermTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_SandboxPermTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_SandboxPermTable
    def BasicInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxPermBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxPermTable
    def BasicInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxPermTable
    def BasicInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_SandboxPermTable
    def Detail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_SandboxPermDetailData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxPermTable
    def ItemData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_SandboxPermItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_SandboxPermTable
    def ItemDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_SandboxPermTable
    def ItemDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_SandboxPermTableStart(builder):
    builder.StartObject(3)

def clz_Torappu_SandboxPermTableAddBasicInfo(builder, basicInfo):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(basicInfo), 0)

def clz_Torappu_SandboxPermTableStartBasicInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxPermTableAddDetail(builder, detail):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detail), 0)

def clz_Torappu_SandboxPermTableAddItemData(builder, itemData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(itemData), 0)

def clz_Torappu_SandboxPermTableStartItemDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_SandboxPermTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_SandboxPermTable
