# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_RoguelikeModuleType(object):
    NONE = 0
    SANCHECK = 1
    DICE = 2
    CHAOS = 3
    TOTEMBUFF = 4
    VISION = 5
    FRAGMENT = 6
    DISASTER = 7
    NODE_UPGRADE = 8


class enum__Torappu_RoguelikeMonthChatTrigType(object):
    NONE = 0
    TRANSITING = 1
    DUNGEON = 2


class enum__Torappu_RoguelikeCharState(object):
    NORMAL = 0
    UPGRADE = 1
    UPGRADE_BUFF = 2
    UPGRADE_BONUS = 3
    FREE = 4
    ASSIST = 5
    THIRD = 6
    MONTHLY = 7
    THIRD_LOW = 8


class enum__Torappu_ItemType(object):
    NONE = 0
    CHAR = 1
    CARD_EXP = 2
    MATERIAL = 3
    GOLD = 4
    EXP_PLAYER = 5
    TKT_TRY = 6
    TKT_RECRUIT = 7
    TKT_INST_FIN = 8
    TKT_GACHA = 9
    ACTIVITY_COIN = 10
    DIAMOND = 11
    DIAMOND_SHD = 12
    HGG_SHD = 13
    LGG_SHD = 14
    FURN = 15
    AP_GAMEPLAY = 16
    AP_BASE = 17
    SOCIAL_PT = 18
    CHAR_SKIN = 19
    TKT_GACHA_10 = 20
    TKT_GACHA_PRSV = 21
    AP_ITEM = 22
    AP_SUPPLY = 23
    RENAMING_CARD = 24
    RENAMING_CARD_2 = 25
    ET_STAGE = 26
    ACTIVITY_ITEM = 27
    VOUCHER_PICK = 28
    VOUCHER_CGACHA = 29
    VOUCHER_MGACHA = 30
    CRS_SHOP_COIN = 31
    CRS_RUNE_COIN = 32
    LMTGS_COIN = 33
    EPGS_COIN = 34
    LIMITED_TKT_GACHA_10 = 35
    LIMITED_FREE_GACHA = 36
    REP_COIN = 37
    ROGUELIKE = 38
    LINKAGE_TKT_GACHA_10 = 39
    VOUCHER_ELITE_II_4 = 40
    VOUCHER_ELITE_II_5 = 41
    VOUCHER_ELITE_II_6 = 42
    VOUCHER_SKIN = 43
    RETRO_COIN = 44
    PLAYER_AVATAR = 45
    UNI_COLLECTION = 46
    VOUCHER_FULL_POTENTIAL = 47
    RL_COIN = 48
    RETURN_CREDIT = 49
    MEDAL = 50
    CHARM = 51
    HOME_BACKGROUND = 52
    EXTERMINATION_AGENT = 53
    OPTIONAL_VOUCHER_PICK = 54
    ACT_CART_COMPONENT = 55
    VOUCHER_LEVELMAX_6 = 56
    VOUCHER_LEVELMAX_5 = 57
    VOUCHER_LEVELMAX_4 = 58
    VOUCHER_SKILL_SPECIALLEVELMAX_6 = 59
    VOUCHER_SKILL_SPECIALLEVELMAX_5 = 60
    VOUCHER_SKILL_SPECIALLEVELMAX_4 = 61
    ACTIVITY_POTENTIAL = 62
    ITEM_PACK = 63
    SANDBOX = 64
    FAVOR_ADD_ITEM = 65
    CLASSIC_SHD = 66
    CLASSIC_TKT_GACHA = 67
    CLASSIC_TKT_GACHA_10 = 68
    LIMITED_BUFF = 69
    CLASSIC_FES_PICK_TIER_5 = 70
    CLASSIC_FES_PICK_TIER_6 = 71
    RETURN_PROGRESS = 72
    NEW_PROGRESS = 73
    MCARD_VOUCHER = 74
    MATERIAL_ISSUE_VOUCHER = 75
    CRS_SHOP_COIN_V2 = 76
    HOME_THEME = 77
    SANDBOX_PERM = 78
    SANDBOX_TOKEN = 79
    TEMPLATE_TRAP = 80
    NAME_CARD_SKIN = 81
    EXCLUSIVE_TKT_GACHA = 82
    EXCLUSIVE_TKT_GACHA_10 = 83


class enum__Torappu_RoguelikeGameMonthTaskClass(object):
    NONE = 0
    C = 1
    B = 2
    A = 3


class enum__Torappu_RoguelikeTopicMode(object):
    NONE = 0
    EASY = 1
    NORMAL = 2
    HARD = 3
    NORML_END = 4
    MONTH_TEAM = 5
    CHALLENGE = 6


class enum__Torappu_RoguelikeTopicBankRewardType(object):
    NONE = 0
    UNLOCK_ITEM = 1
    ADD_SHOP_POS = 2
    UNLOCK_WITHDRAW = 3
    UNLOCK_SHOP_BATTLE = 4


class enum__Torappu_ActArchiveTotemType(object):
    LOCATION = 0
    EFFECT = 1
    AFFIX = 2


class enum__Torappu_ActArchiveType(object):
    NONE = 0
    TIMELINE = 1
    MUSIC = 2
    PIC = 3
    AVG = 4
    STORY = 5
    NEWS = 6
    BUFF = 7
    RELIC = 8
    CAPSULE = 9
    TRAP = 10
    CHAT = 11
    LANDMARK = 12
    LOG = 13
    ACTIVITY_ENTRY = 14
    DYNAMIC_MUSIC = 15
    DYNAMIC_PIC = 16
    ENDBOOK = 17
    DYNAMIC_STORY = 18
    TOTEM = 19
    CHAOS = 20
    CHALLENGE_BOOK = 21
    ACHIEVEMENT = 22
    QUEST = 23
    FRAGMENT = 24
    DISASTER = 25


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    ALL = 7


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_RarityRankMask(object):
    NONE = 0
    TIER_1 = 1
    TIER_2 = 2
    TIER_3 = 4
    TIER_4 = 8
    TIER_5 = 16
    TIER_6 = 32
    ALL = 63


class enum__Torappu_ProfessionID(object):
    WARRIOR = 0
    SNIPER = 1
    TANK = 2
    MEDIC = 3
    SUPPORT = 4
    CASTER = 5
    SPECIAL = 6
    TOKEN = 7
    TRAP = 8
    PIONEER = 9


class enum__Torappu_RarityRank(object):
    TIER_1 = 0
    TIER_2 = 1
    TIER_3 = 2
    TIER_4 = 3
    TIER_5 = 4
    TIER_6 = 5
    E_NUM = 6


class enum__Torappu_CustomTicketType(object):
    NONE = 0
    PURIFY = 1


class enum__Torappu_RoguelikeGameRelicCheckType(object):
    NONE = 0
    PROFESSION = 1
    SUB_PROFESSION = 2
    UPGRADE = 3


class enum__Torappu_RoguelikeGameChoiceType(object):
    NONE = 0
    LEAVE = 1
    NEXT = 2
    NEXT_PROB = 3
    TRADE = 4
    TRADE_PROB = 5
    SACRIFICE = 6
    TELEPORT = 7
    EXPEDITION = 8
    WISH = 9
    TRADE_PROB_SHOW = 10
    SACRIFICE_TOTEM = 11


class enum__Torappu_RoguelikeChoiceLeftDecoType(object):
    NONE = 0
    TASK = 1
    TASK_REWARD = 2
    DICE = 3
    VISION = 4


class enum__Torappu_RoguelikeChoiceDisplayType(object):
    NONE = 0
    NORMAL = 1
    ITEM = 2
    TASK = 3


class enum__Torappu_RoguelikeChoiceHintType(object):
    NONE = 0
    ITEM = 1
    SACRIFICE = 2
    SACRIFICE_TOTEM = 3
    EXPEDITION = 4
    VISION = 5
    CHAOS = 6
    FRAGMENT = 7


class enum__Torappu_RoguelikeEventType(object):
    NONE = 0
    BATTLE_NORMAL = 1
    BATTLE_ELITE = 2
    BATTLE_BOSS = 4
    BATTLES = 7
    SHOP = 8
    REST = 16
    INCIDENT = 32
    TREASURE = 64
    ENTERTAINMENT = 128
    UNKNOWN = 256
    WISH = 512
    SACRIFICE = 1024
    EXPEDITION = 2048
    BATTLE_SHOP = 4096
    PORTAL = 8192
    MISSION = 16384
    STORY = 32768
    STORY_HIDDEN = 65536
    ALCHEMY = 131072
    DUEL = 262144
    CHOICES = 388848
    EVENTS = 392952
    ALL = 392959


class enum__Torappu_RoguelikeGameVariationType(object):
    NONE = 0
    MAP = 1
    RES = 2
    BAT = 3


class enum__Torappu_RoguelikeTaskRarity(object):
    NORMAL = 0
    RARE = 1
    SUPER_RARE = 2


class enum__Torappu_RoguelikeRewardExDropTagSrcType(object):
    NONE = 0
    TREASURE = 1
    TOTEM = 2
    EXPLORE_TOOL = 3


class enum__Torappu_TipData_Category(object):
    NONE = 0
    BATTLE = 1
    UI = 2
    BUILDING = 4
    GACHA = 8
    MISC = 16
    ALL = 31


class enum__Torappu_RoguelikeGameItemType(object):
    NONE = 0
    HP = 1
    HPMAX = 2
    GOLD = 3
    POPULATION = 4
    EXP = 5
    SQUAD_CAPACITY = 6
    RECRUIT_TICKET = 7
    UPGRADE_TICKET = 8
    RELIC = 9
    BP_POINT = 10
    GROW_POINT = 11
    BAND = 12
    ACTIVE_TOOL = 13
    CAPSULE = 14
    POOL = 15
    RL_BP = 16
    RL_GP = 17
    KEY_POINT = 18
    SAN_POINT = 19
    DICE_POINT = 20
    DICE_TYPE = 21
    SHIELD = 22
    LOCKED_TREASURE = 23
    CUSTOM_TICKET = 24
    TOTEM = 25
    TOTEM_EFFECT = 26
    FEATURE = 27
    VISION = 28
    CHAOS = 29
    CHAOS_PURIFY = 30
    CHAOS_LEVEL = 31
    EXPLORE_TOOL = 32
    FRAGMENT = 33
    MAX_WEIGHT = 34
    DISASTER = 35
    DISASTER_TYPE = 36
    ABSTRACT_DISASTER = 37


class enum__Torappu_RoguelikeGameItemSubType(object):
    NONE = 0
    CURSE = 1
    TEMP_TICKET = 2
    TOTEM_UPPER = 4
    TOTEM_LOWER = 8


class enum__Torappu_RoguelikeGameItemRarity(object):
    NONE = 0
    BORN = 1
    NORMAL = 2
    RARE = 3
    SUPER_RARE = 4


class enum__Torappu_RoguelikeEndingDetailText_Type(object):
    SHOW_CHOICE = 0
    SHOW_RELIC = 1
    SHOW_CAPSULE = 2
    SHOW_ACTIVE_TOOL = 3
    SHOW_ACCELERATE_CHAR = 4
    SHOW_NORMAL_RECRUIT = 5
    SHOW_DIRECT_RECRUIT = 6
    SHOW_FRIEND_RECRUIT = 7
    SHOW_FREE_RECRUIT = 8
    BUY = 9
    INVEST = 10
    SHOW_STAGE = 11
    SHOW_CONST = 12
    SUM = 13
    SHOW_BOSS_END = 14


class enum__Torappu_RoguelikeExpStyleConfigParam(object):
    BATTLE_END_HP_LOSE_TEXT = 0


class enum__Torappu_SanEffectRank(object):
    SAN_EFFECT_0 = 0
    SAN_EFFECT_1 = 1
    SAN_EFFECT_2 = 2
    SAN_EFFECT_3 = 3


class enum__Torappu_DiceResultClass(object):
    VERYBAD = 0
    BAD = 1
    NORMAL = 2
    GOOD = 3
    BEST = 4
    GREAT = 4


class enum__Torappu_DiceResultShowType(object):
    RAW_TEXT = 0
    MUTATION = 1
    VIRTUE = 2


class enum__Torappu_ChaosEffectRank(object):
    CHAOS_EFFECT_0 = 0
    CHAOS_EFFECT_1 = 1
    CHAOS_EFFECT_2 = 2


class enum__Torappu_RoguelikeTotemColorType(object):
    NONE = 0
    RED = 1
    GREEN = 2
    BLUE = 3
    ALL = 4


class enum__Torappu_RoguelikeTotemPosType(object):
    LOCATION = 0
    EFFECT = 1


class enum__Torappu_RoguelikeTotemBlurNodeType(object):
    NONE = 0
    BATTLE = 1
    NO_BATTLE = 2


class enum__Torappu_RoguelikeVisionModuleData_VisionChoiceCheckType(object):
    LOWER = 0
    UPPER = 1


class enum__Torappu_RoguelikeFragmentType(object):
    NONE = 0
    INSPIRATION = 1
    WISH = 2
    IDEA = 3


class enum__Torappu_AlchemyPoolRarityType(object):
    NONE = -1
    NORMAL = 0
    RARE = 1
    SUPER_RARE = 2


class enum__Torappu_RoguelikeTopicDevNodeType(object):
    BRANCH = 0
    KEY = 1
    NONE = 10


class enum__Torappu_RoguelikeTopicDevTokenDisplayForm(object):
    ABSOLUTE_VAL = 0
    PERCENTAGE = 1


class enum__Torappu_RL02DevelopmentNodeType(object):
    NONE = 0
    SMALL = 1
    NORMAL = 2
    LARGE_RHODES = 3
    LARGE_ABYSSAL = 4
    LARGE_IBERIA = 5


class enum__Torappu_RL02DevelopmentEffectType(object):
    BUFF = 0
    RAW_TEXT_EFFECT = 1
    RAW_TEXT_BAND = 2
    NONE = 10


class enum__Torappu_RL03DevelopmentNodeType(object):
    NONE = 0
    NORMAL = 1
    KEY = 2
    DIFFICULTY = 3


class enum__Torappu_RL03DevelopmentEffectType(object):
    BUFF = 0
    RAW_TEXT_EFFECT = 1
    RAW_TEXT_BAND = 2


class enum__Torappu_RoguelikeCommonDevelopmentNodeType(object):
    NONE = 0
    NORMAL = 1
    KEY = 2
    DIFFICULTY = 3


class enum__Torappu_RoguelikeCommonDevelopmentEffectType(object):
    BUFF = 0
    RAW_TEXT_EFFECT = 1
    RAW_TEXT_BAND = 2


class clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData
    def TopicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData
    def DisplayId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData
    def StartTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData
    def EndTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataAddTopicId(builder, topicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topicId), 0)

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataAddDisplayId(builder, displayId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(displayId), 0)

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataAddStartTs(builder, startTs):
    builder.PrependInt64Slot(2, startTs, 0)

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataAddEndTs(builder, endTs):
    builder.PrependInt64Slot(3, endTs, 0)

def clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicConfig
    def LoadCharCardPlugin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicConfig
    def WebBusType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicConfig
    def MonthChatTrigType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConfig
    def LoadRewardHpDecoPlugin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicConfig
    def LoadRewardExtraInfoPlugin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeTopicConfigStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTopicConfigAddLoadCharCardPlugin(builder, loadCharCardPlugin):
    builder.PrependBoolSlot(0, loadCharCardPlugin, 0)

def clz_Torappu_RoguelikeTopicConfigAddWebBusType(builder, webBusType):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(webBusType), 0)

def clz_Torappu_RoguelikeTopicConfigAddMonthChatTrigType(builder, monthChatTrigType):
    builder.PrependInt32Slot(2, monthChatTrigType, 0)

def clz_Torappu_RoguelikeTopicConfigAddLoadRewardHpDecoPlugin(builder, loadRewardHpDecoPlugin):
    builder.PrependBoolSlot(3, loadRewardHpDecoPlugin, 0)

def clz_Torappu_RoguelikeTopicConfigAddLoadRewardExtraInfoPlugin(builder, loadRewardExtraInfoPlugin):
    builder.PrependBoolSlot(4, loadRewardExtraInfoPlugin, 0)

def clz_Torappu_RoguelikeTopicConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicBasicData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def DisappearTimeOnMainScreen(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def Sort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def ShowMedalId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def MedalGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def FullStoredTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def LineText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def HomeEntryDisplayData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicBasicData_HomeEntryDisplayData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicBasicData
    def HomeEntryDisplayDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def HomeEntryDisplayDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RoguelikeTopicBasicData
    def ModuleTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def ModuleTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def ModuleTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicBasicData
    def ModuleTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RoguelikeTopicBasicData
    def Config(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeTopicBasicDataStart(builder):
    builder.StartObject(12)

def clz_Torappu_RoguelikeTopicBasicDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeTopicBasicDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeTopicBasicDataAddStartTime(builder, startTime):
    builder.PrependInt64Slot(2, startTime, 0)

def clz_Torappu_RoguelikeTopicBasicDataAddDisappearTimeOnMainScreen(builder, disappearTimeOnMainScreen):
    builder.PrependInt64Slot(3, disappearTimeOnMainScreen, 0)

def clz_Torappu_RoguelikeTopicBasicDataAddSort(builder, sort):
    builder.PrependInt32Slot(4, sort, 0)

def clz_Torappu_RoguelikeTopicBasicDataAddShowMedalId(builder, showMedalId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(showMedalId), 0)

def clz_Torappu_RoguelikeTopicBasicDataAddMedalGroupId(builder, medalGroupId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(medalGroupId), 0)

def clz_Torappu_RoguelikeTopicBasicDataAddFullStoredTime(builder, fullStoredTime):
    builder.PrependInt64Slot(7, fullStoredTime, 0)

def clz_Torappu_RoguelikeTopicBasicDataAddLineText(builder, lineText):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(lineText), 0)

def clz_Torappu_RoguelikeTopicBasicDataAddHomeEntryDisplayData(builder, homeEntryDisplayData):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(homeEntryDisplayData), 0)

def clz_Torappu_RoguelikeTopicBasicDataStartHomeEntryDisplayDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicBasicDataAddModuleTypes(builder, moduleTypes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(moduleTypes), 0)

def clz_Torappu_RoguelikeTopicBasicDataStartModuleTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicBasicDataAddConfig(builder, config):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(config), 0)

def clz_Torappu_RoguelikeTopicBasicDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicBasicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicBasicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicBasicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicBasicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicBasicData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicBasicData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicBasicDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicBasicDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicBasicDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicBasicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicConst_PredefinedChar(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicConst_PredefinedChar()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicConst_PredefinedChar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def CharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def CanBeFree(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def UniEquipId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def RecruitType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicConst_PredefinedCharStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeTopicConst_PredefinedCharAddCharId(builder, charId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(charId), 0)

def clz_Torappu_RoguelikeTopicConst_PredefinedCharAddCanBeFree(builder, canBeFree):
    builder.PrependBoolSlot(1, canBeFree, 0)

def clz_Torappu_RoguelikeTopicConst_PredefinedCharAddUniEquipId(builder, uniEquipId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipId), 0)

def clz_Torappu_RoguelikeTopicConst_PredefinedCharAddRecruitType(builder, recruitType):
    builder.PrependInt32Slot(3, recruitType, 0)

def clz_Torappu_RoguelikeTopicConst_PredefinedCharEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicConst_PredefinedChar()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedCharStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedCharAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedCharAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedCharEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicConst
    def MilestoneTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def OuterBuffTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RoguelikeTopicConst
    def RelicTokenRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def RogueSystemUnlockStage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicConst
    def OrdiModeReOpenCoolDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def MonthModeReOpenCoolDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def MonthlyTaskUncompletedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def MonthlyTaskManualRefreshLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def MonthlyTeamUncompletedTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def BpPurchaseSystemUnlockTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def PredefinedChars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicConst_PredefinedChar()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicConst
    def PredefinedCharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicConst
    def PredefinedCharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_RoguelikeTopicConstStart(builder):
    builder.StartObject(11)

def clz_Torappu_RoguelikeTopicConstAddMilestoneTokenRatio(builder, milestoneTokenRatio):
    builder.PrependInt32Slot(0, milestoneTokenRatio, 0)

def clz_Torappu_RoguelikeTopicConstAddOuterBuffTokenRatio(builder, outerBuffTokenRatio):
    builder.PrependFloat32Slot(1, outerBuffTokenRatio, 0.0)

def clz_Torappu_RoguelikeTopicConstAddRelicTokenRatio(builder, relicTokenRatio):
    builder.PrependInt32Slot(2, relicTokenRatio, 0)

def clz_Torappu_RoguelikeTopicConstAddRogueSystemUnlockStage(builder, rogueSystemUnlockStage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rogueSystemUnlockStage), 0)

def clz_Torappu_RoguelikeTopicConstAddOrdiModeReOpenCoolDown(builder, ordiModeReOpenCoolDown):
    builder.PrependInt32Slot(4, ordiModeReOpenCoolDown, 0)

def clz_Torappu_RoguelikeTopicConstAddMonthModeReOpenCoolDown(builder, monthModeReOpenCoolDown):
    builder.PrependInt32Slot(5, monthModeReOpenCoolDown, 0)

def clz_Torappu_RoguelikeTopicConstAddMonthlyTaskUncompletedTime(builder, monthlyTaskUncompletedTime):
    builder.PrependInt32Slot(6, monthlyTaskUncompletedTime, 0)

def clz_Torappu_RoguelikeTopicConstAddMonthlyTaskManualRefreshLimit(builder, monthlyTaskManualRefreshLimit):
    builder.PrependInt32Slot(7, monthlyTaskManualRefreshLimit, 0)

def clz_Torappu_RoguelikeTopicConstAddMonthlyTeamUncompletedTime(builder, monthlyTeamUncompletedTime):
    builder.PrependInt32Slot(8, monthlyTeamUncompletedTime, 0)

def clz_Torappu_RoguelikeTopicConstAddBpPurchaseSystemUnlockTime(builder, bpPurchaseSystemUnlockTime):
    builder.PrependInt64Slot(9, bpPurchaseSystemUnlockTime, 0)

def clz_Torappu_RoguelikeTopicConstAddPredefinedChars(builder, predefinedChars):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(predefinedChars), 0)

def clz_Torappu_RoguelikeTopicConstStartPredefinedCharsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicUpdate
    def UpdateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicUpdate
    def TopicUpdateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicUpdate
    def TopicEndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicUpdateStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeTopicUpdateAddUpdateId(builder, updateId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(updateId), 0)

def clz_Torappu_RoguelikeTopicUpdateAddTopicUpdateTime(builder, topicUpdateTime):
    builder.PrependInt64Slot(1, topicUpdateTime, 0)

def clz_Torappu_RoguelikeTopicUpdateAddTopicEndTime(builder, topicEndTime):
    builder.PrependInt64Slot(2, topicEndTime, 0)

def clz_Torappu_RoguelikeTopicUpdateEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicEnroll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicEnroll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicEnroll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicEnroll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicEnroll
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicEnroll
    def EnrollTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicEnrollStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeTopicEnrollAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RoguelikeTopicEnrollAddEnrollTime(builder, enrollTime):
    builder.PrependInt64Slot(1, enrollTime, 0)

def clz_Torappu_RoguelikeTopicEnrollEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicEnroll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicEnroll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicEnroll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicEnroll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicEnroll
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicEnroll
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicEnroll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicEnrollStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicEnrollAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicEnrollAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicEnrollEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicBP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicBP()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicBP(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicBP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicBP
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBP
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBP
    def TokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBP
    def NextTokenNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBP
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBP
    def ItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBP
    def ItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBP
    def IsGoodPrize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicBP
    def IsGrandPrize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeTopicBPStart(builder):
    builder.StartObject(9)

def clz_Torappu_RoguelikeTopicBPAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeTopicBPAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_RoguelikeTopicBPAddTokenNum(builder, tokenNum):
    builder.PrependInt32Slot(2, tokenNum, 0)

def clz_Torappu_RoguelikeTopicBPAddNextTokenNum(builder, nextTokenNum):
    builder.PrependInt32Slot(3, nextTokenNum, 0)

def clz_Torappu_RoguelikeTopicBPAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeTopicBPAddItemType(builder, itemType):
    builder.PrependInt32Slot(5, itemType, 0)

def clz_Torappu_RoguelikeTopicBPAddItemCount(builder, itemCount):
    builder.PrependInt32Slot(6, itemCount, 0)

def clz_Torappu_RoguelikeTopicBPAddIsGoodPrize(builder, isGoodPrize):
    builder.PrependBoolSlot(7, isGoodPrize, 0)

def clz_Torappu_RoguelikeTopicBPAddIsGrandPrize(builder, isGrandPrize):
    builder.PrependBoolSlot(8, isGrandPrize, 0)

def clz_Torappu_RoguelikeTopicBPEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicMilestoneUpdateData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicMilestoneUpdateData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicMilestoneUpdateData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def UpdateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def MaxBpLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def MaxBpCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMilestoneUpdateData
    def MaxDisplayBpCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataAddUpdateTime(builder, updateTime):
    builder.PrependInt64Slot(0, updateTime, 0)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataAddEndTime(builder, endTime):
    builder.PrependInt64Slot(1, endTime, 0)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataAddMaxBpLevel(builder, maxBpLevel):
    builder.PrependInt32Slot(2, maxBpLevel, 0)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataAddMaxBpCount(builder, maxBpCount):
    builder.PrependInt32Slot(3, maxBpCount, 0)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataAddMaxDisplayBpCount(builder, maxDisplayBpCount):
    builder.PrependInt32Slot(4, maxDisplayBpCount, 0)

def clz_Torappu_RoguelikeTopicMilestoneUpdateDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ItemBundle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ItemBundle()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ItemBundle(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ItemBundle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ItemBundle
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ItemBundle
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ItemBundle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ItemBundleStart(builder):
    builder.StartObject(3)

def clz_Torappu_ItemBundleAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ItemBundleAddCount(builder, count):
    builder.PrependInt32Slot(1, count, 0)

def clz_Torappu_ItemBundleAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def clz_Torappu_ItemBundleEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicBPGrandPrize(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicBPGrandPrize()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicBPGrandPrize(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def GrandPrizeDisplayId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def DisplayUnlockYear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def DisplayUnlockMonth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def AcquireTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def PurchaseTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def DisplayName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def DisplayDiscription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def BpLevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def ItemBundle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def DetailAnnounceTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBPGrandPrize
    def PicIdAftrerUnlock(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicBPGrandPrizeStart(builder):
    builder.StartObject(12)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddGrandPrizeDisplayId(builder, grandPrizeDisplayId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(grandPrizeDisplayId), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddDisplayUnlockYear(builder, displayUnlockYear):
    builder.PrependInt32Slot(2, displayUnlockYear, 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddDisplayUnlockMonth(builder, displayUnlockMonth):
    builder.PrependInt32Slot(3, displayUnlockMonth, 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddAcquireTitle(builder, acquireTitle):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(acquireTitle), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddPurchaseTitle(builder, purchaseTitle):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(purchaseTitle), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddDisplayName(builder, displayName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(displayName), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddDisplayDiscription(builder, displayDiscription):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(displayDiscription), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddBpLevelId(builder, bpLevelId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bpLevelId), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddItemBundle(builder, itemBundle):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(itemBundle), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddDetailAnnounceTime(builder, detailAnnounceTime):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(detailAnnounceTime), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeAddPicIdAftrerUnlock(builder, picIdAftrerUnlock):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(picIdAftrerUnlock), 0)

def clz_Torappu_RoguelikeTopicBPGrandPrizeEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicMonthMission(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicMonthMission()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicMonthMission(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicMonthMission
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicMonthMission
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthMission
    def TaskName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthMission
    def TaskClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMonthMission
    def InnerClassWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMonthMission
    def Template(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthMission
    def ParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeTopicMonthMission
    def ParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicMonthMission
    def ParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeTopicMonthMission
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthMission
    def TokenRewardNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicMonthMissionStart(builder):
    builder.StartObject(8)

def clz_Torappu_RoguelikeTopicMonthMissionAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddTaskName(builder, taskName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskName), 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddTaskClass(builder, taskClass):
    builder.PrependInt32Slot(2, taskClass, 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddInnerClassWeight(builder, innerClassWeight):
    builder.PrependInt32Slot(3, innerClassWeight, 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddTemplate(builder, template):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(template), 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddParamList(builder, paramList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(paramList), 0)

def clz_Torappu_RoguelikeTopicMonthMissionStartParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicMonthMissionAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeTopicMonthMissionAddTokenRewardNum(builder, tokenRewardNum):
    builder.PrependInt32Slot(7, tokenRewardNum, 0)

def clz_Torappu_RoguelikeTopicMonthMissionEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicMonthSquadTeamChar(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicMonthSquadTeamChar()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicMonthSquadTeamChar(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicMonthSquadTeamChar
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicMonthSquadTeamChar
    def TeamCharId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquadTeamChar
    def TeamTmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicMonthSquadTeamCharStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeTopicMonthSquadTeamCharAddTeamCharId(builder, teamCharId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(teamCharId), 0)

def clz_Torappu_RoguelikeTopicMonthSquadTeamCharAddTeamTmplId(builder, teamTmplId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamTmplId), 0)

def clz_Torappu_RoguelikeTopicMonthSquadTeamCharEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicMonthSquad(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicMonthSquad()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicMonthSquad(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicMonthSquad
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicMonthSquad
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamSubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamFlavorDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamMonth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamYear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamChars(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicMonthSquadTeamChar()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamCharsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TeamCharsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def ChatId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TokenRewardNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicMonthSquad
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicMonthSquad
    def TaskDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicMonthSquadStart(builder):
    builder.StartObject(17)

def clz_Torappu_RoguelikeTopicMonthSquadAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamName(builder, teamName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(teamName), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamSubName(builder, teamSubName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(teamSubName), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamFlavorDesc(builder, teamFlavorDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(teamFlavorDesc), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamDes(builder, teamDes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(teamDes), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamColor(builder, teamColor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(teamColor), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamMonth(builder, teamMonth):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(teamMonth), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamYear(builder, teamYear):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(teamYear), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamIndex(builder, teamIndex):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(teamIndex), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTeamChars(builder, teamChars):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(teamChars), 0)

def clz_Torappu_RoguelikeTopicMonthSquadStartTeamCharsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicMonthSquadAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddChatId(builder, chatId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(chatId), 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTokenRewardNum(builder, tokenRewardNum):
    builder.PrependInt32Slot(12, tokenRewardNum, 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_RoguelikeTopicMonthSquadStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicMonthSquadAddStartTime(builder, startTime):
    builder.PrependInt64Slot(14, startTime, 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddEndTime(builder, endTime):
    builder.PrependInt64Slot(15, endTime, 0)

def clz_Torappu_RoguelikeTopicMonthSquadAddTaskDes(builder, taskDes):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(taskDes), 0)

def clz_Torappu_RoguelikeTopicMonthSquadEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicMonthSquad(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicMonthSquad()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicMonthSquad(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicMonthSquad
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicMonthSquad
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicMonthSquad
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicMonthSquad()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicMonthSquadStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicMonthSquadAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicMonthSquadAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicMonthSquadEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicChallengeTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicChallengeTask()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicChallengeTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicChallengeTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicChallengeTask
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallengeTask
    def TaskDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallengeTask
    def CompletionClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallengeTask
    def CompletionParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeTopicChallengeTask
    def CompletionParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicChallengeTask
    def CompletionParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_RoguelikeTopicChallengeTaskStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeTopicChallengeTaskAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_RoguelikeTopicChallengeTaskAddTaskDes(builder, taskDes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskDes), 0)

def clz_Torappu_RoguelikeTopicChallengeTaskAddCompletionClass(builder, completionClass):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(completionClass), 0)

def clz_Torappu_RoguelikeTopicChallengeTaskAddCompletionParams(builder, completionParams):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(completionParams), 0)

def clz_Torappu_RoguelikeTopicChallengeTaskStartCompletionParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicChallengeTaskEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicChallengeTask(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicChallengeTask()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicChallengeTask(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicChallengeTask
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicChallengeTask
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicChallengeTask
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicChallengeTask()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicChallengeTaskStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicChallengeTaskAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicChallengeTaskAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicChallengeTaskEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicChallenge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicChallenge()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicChallenge(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicChallenge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeGroupSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeUnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeUnlockToastDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeDes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeConditionDes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeConditionDesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeConditionDesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeTasks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicChallengeTask()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeTasksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeTasksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RoguelikeTopicChallenge
    def DefaultTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def Rewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ItemBundle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicChallenge
    def RewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicChallenge
    def RewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RoguelikeTopicChallenge
    def ChallengeStoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicChallengeStart(builder):
    builder.StartObject(14)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeId(builder, challengeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(challengeId), 0)

def clz_Torappu_RoguelikeTopicChallengeAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeName(builder, challengeName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(challengeName), 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeGroup(builder, challengeGroup):
    builder.PrependInt32Slot(3, challengeGroup, 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeGroupSortId(builder, challengeGroupSortId):
    builder.PrependInt32Slot(4, challengeGroupSortId, 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeGroupName(builder, challengeGroupName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(challengeGroupName), 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeUnlockDesc(builder, challengeUnlockDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(challengeUnlockDesc), 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeUnlockToastDesc(builder, challengeUnlockToastDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(challengeUnlockToastDesc), 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeDes(builder, challengeDes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(challengeDes), 0)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeConditionDes(builder, challengeConditionDes):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(challengeConditionDes), 0)

def clz_Torappu_RoguelikeTopicChallengeStartChallengeConditionDesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeTasks(builder, challengeTasks):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTasks), 0)

def clz_Torappu_RoguelikeTopicChallengeStartChallengeTasksVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicChallengeAddDefaultTaskId(builder, defaultTaskId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(defaultTaskId), 0)

def clz_Torappu_RoguelikeTopicChallengeAddRewards(builder, rewards):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rewards), 0)

def clz_Torappu_RoguelikeTopicChallengeStartRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicChallengeAddChallengeStoryId(builder, challengeStoryId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(challengeStoryId), 0)

def clz_Torappu_RoguelikeTopicChallengeEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicChallenge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicChallenge()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicChallenge(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicChallenge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicChallenge
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicChallenge
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicChallenge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicChallengeStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicChallengeAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicChallengeAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicChallengeEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement
    def RuleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementAddRuleDesc(builder, ruleDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ruleDesc), 0)

def clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacementEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDifficulty(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDifficulty()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDifficulty(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDifficulty
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDifficulty
    def ModeDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def SubName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def HaveInitialRelicIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDifficulty
    def ScoreFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RoguelikeTopicDifficulty
    def CanUnlockItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDifficulty
    def DoMonthTask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDifficulty
    def RuleDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def RuleDescReplacements(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDifficulty_RuleDescReplacement()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def RuleDescReplacementsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def RuleDescReplacementsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def FailTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def FailImageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def FailForceDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def EquivalentGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def BpValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def BossValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDifficulty
    def AddDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def IsHard(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDifficulty
    def UnlockText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def DisplayIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDifficulty
    def HideEndingStory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeTopicDifficultyStart(builder):
    builder.StartObject(24)

def clz_Torappu_RoguelikeTopicDifficultyAddModeDifficulty(builder, modeDifficulty):
    builder.PrependInt32Slot(0, modeDifficulty, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddGrade(builder, grade):
    builder.PrependInt32Slot(1, grade, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddSubName(builder, subName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subName), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddHaveInitialRelicIcon(builder, haveInitialRelicIcon):
    builder.PrependBoolSlot(5, haveInitialRelicIcon, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddScoreFactor(builder, scoreFactor):
    builder.PrependFloat32Slot(6, scoreFactor, 0.0)

def clz_Torappu_RoguelikeTopicDifficultyAddCanUnlockItem(builder, canUnlockItem):
    builder.PrependBoolSlot(7, canUnlockItem, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddDoMonthTask(builder, doMonthTask):
    builder.PrependBoolSlot(8, doMonthTask, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddRuleDesc(builder, ruleDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(ruleDesc), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddRuleDescReplacements(builder, ruleDescReplacements):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(ruleDescReplacements), 0)

def clz_Torappu_RoguelikeTopicDifficultyStartRuleDescReplacementsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDifficultyAddFailTitle(builder, failTitle):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(failTitle), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddFailImageId(builder, failImageId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(failImageId), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddFailForceDesc(builder, failForceDesc):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(failForceDesc), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddSortId(builder, sortId):
    builder.PrependInt32Slot(14, sortId, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddEquivalentGrade(builder, equivalentGrade):
    builder.PrependInt32Slot(15, equivalentGrade, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddBpValue(builder, bpValue):
    builder.PrependInt32Slot(17, bpValue, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddBossValue(builder, bossValue):
    builder.PrependInt32Slot(18, bossValue, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddAddDesc(builder, addDesc):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(addDesc), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddIsHard(builder, isHard):
    builder.PrependBoolSlot(20, isHard, 0)

def clz_Torappu_RoguelikeTopicDifficultyAddUnlockText(builder, unlockText):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(unlockText), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddDisplayIconId(builder, displayIconId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(displayIconId), 0)

def clz_Torappu_RoguelikeTopicDifficultyAddHideEndingStory(builder, hideEndingStory):
    builder.PrependBoolSlot(23, hideEndingStory, 0)

def clz_Torappu_RoguelikeTopicDifficultyEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicBankReward(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicBankReward()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicBankReward(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicBankReward
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicBankReward
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicBankReward
    def UnlockGoldCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBankReward
    def RewardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicBankReward
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicBankRewardStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeTopicBankRewardAddRewardId(builder, rewardId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)

def clz_Torappu_RoguelikeTopicBankRewardAddUnlockGoldCnt(builder, unlockGoldCnt):
    builder.PrependInt32Slot(1, unlockGoldCnt, 0)

def clz_Torappu_RoguelikeTopicBankRewardAddRewardType(builder, rewardType):
    builder.PrependInt32Slot(2, rewardType, 0)

def clz_Torappu_RoguelikeTopicBankRewardAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeTopicBankRewardEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveRelicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveRelicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveRelicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveRelicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveRelicItemData
    def RelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveRelicItemData
    def RelicSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveRelicItemData
    def RelicGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveRelicItemData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveRelicItemData
    def IsSpRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActArchiveRelicItemData
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveRelicItemDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActArchiveRelicItemDataAddRelicId(builder, relicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicId), 0)

def clz_Torappu_ActArchiveRelicItemDataAddRelicSortId(builder, relicSortId):
    builder.PrependInt32Slot(1, relicSortId, 0)

def clz_Torappu_ActArchiveRelicItemDataAddRelicGroupId(builder, relicGroupId):
    builder.PrependInt32Slot(2, relicGroupId, 0)

def clz_Torappu_ActArchiveRelicItemDataAddOrderId(builder, orderId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(orderId), 0)

def clz_Torappu_ActArchiveRelicItemDataAddIsSpRelic(builder, isSpRelic):
    builder.PrependBoolSlot(4, isSpRelic, 0)

def clz_Torappu_ActArchiveRelicItemDataAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_ActArchiveRelicItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveRelicItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveRelicItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveRelicItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveRelicItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveRelicItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveRelicItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveRelicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveRelicItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveRelicItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveRelicItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveRelicItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveRelicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveRelicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveRelicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveRelicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveRelicData
    def Relic(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveRelicItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveRelicData
    def RelicLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveRelicData
    def RelicIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveRelicDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveRelicDataAddRelic(builder, relic):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relic), 0)

def clz_Torappu_ActArchiveRelicDataStartRelicVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveRelicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveCapsuleItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveCapsuleItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveCapsuleItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveCapsuleItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveCapsuleItemData
    def CapsuleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveCapsuleItemData
    def CapsuleSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveCapsuleItemData
    def EnglishName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveCapsuleItemData
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveCapsuleItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActArchiveCapsuleItemDataAddCapsuleId(builder, capsuleId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(capsuleId), 0)

def clz_Torappu_ActArchiveCapsuleItemDataAddCapsuleSortId(builder, capsuleSortId):
    builder.PrependInt32Slot(1, capsuleSortId, 0)

def clz_Torappu_ActArchiveCapsuleItemDataAddEnglishName(builder, englishName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(englishName), 0)

def clz_Torappu_ActArchiveCapsuleItemDataAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_ActArchiveCapsuleItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveCapsuleItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveCapsuleItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveCapsuleItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveCapsuleItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveCapsuleItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveCapsuleItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveCapsuleItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveCapsuleItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveCapsuleItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveCapsuleItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveCapsuleItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveCapsuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveCapsuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveCapsuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveCapsuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveCapsuleData
    def Capsule(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveCapsuleItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveCapsuleData
    def CapsuleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveCapsuleData
    def CapsuleIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveCapsuleDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveCapsuleDataAddCapsule(builder, capsule):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(capsule), 0)

def clz_Torappu_ActArchiveCapsuleDataStartCapsuleVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveCapsuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTrapItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTrapItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTrapItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTrapItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTrapItemData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTrapItemData
    def TrapSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveTrapItemData
    def OrderId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTrapItemData
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveTrapItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActArchiveTrapItemDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_ActArchiveTrapItemDataAddTrapSortId(builder, trapSortId):
    builder.PrependInt32Slot(1, trapSortId, 0)

def clz_Torappu_ActArchiveTrapItemDataAddOrderId(builder, orderId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(orderId), 0)

def clz_Torappu_ActArchiveTrapItemDataAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_ActArchiveTrapItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveTrapItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveTrapItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveTrapItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveTrapItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveTrapItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveTrapItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveTrapItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveTrapItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveTrapItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveTrapItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveTrapItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTrapData
    def Trap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveTrapItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveTrapData
    def TrapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTrapData
    def TrapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveTrapDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveTrapDataAddTrap(builder, trap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(trap), 0)

def clz_Torappu_ActArchiveTrapDataStartTrapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTrapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChatItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChatItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChatItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChatItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChatItemData
    def ChatFloor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveChatItemData
    def ChatDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChatItemData
    def ChatStoryId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveChatItemDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActArchiveChatItemDataAddChatFloor(builder, chatFloor):
    builder.PrependInt32Slot(0, chatFloor, 0)

def clz_Torappu_ActArchiveChatItemDataAddChatDesc(builder, chatDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chatDesc), 0)

def clz_Torappu_ActArchiveChatItemDataAddChatStoryId(builder, chatStoryId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(chatStoryId), 0)

def clz_Torappu_ActArchiveChatItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChatGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChatGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChatGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChatGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChatGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveChatGroupData
    def NumChat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveChatGroupData
    def ClientChatItemData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActArchiveChatItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveChatGroupData
    def ClientChatItemDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveChatGroupData
    def ClientChatItemDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_ActArchiveChatGroupDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActArchiveChatGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_ActArchiveChatGroupDataAddNumChat(builder, numChat):
    builder.PrependInt32Slot(1, numChat, 0)

def clz_Torappu_ActArchiveChatGroupDataAddClientChatItemData(builder, clientChatItemData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(clientChatItemData), 0)

def clz_Torappu_ActArchiveChatGroupDataStartClientChatItemDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveChatGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveChatGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveChatGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveChatGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveChatGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveChatGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveChatGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChatGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveChatGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveChatGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveChatGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveChatGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChatData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChatData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChatData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChatData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChatData
    def Chat(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveChatGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveChatData
    def ChatLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveChatData
    def ChatIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveChatDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveChatDataAddChat(builder, chat):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chat), 0)

def clz_Torappu_ActArchiveChatDataStartChatVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveChatDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveEndbookItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveEndbookItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveEndbookItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveEndbookItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveEndbookItemData
    def EndBookId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveEndbookItemData
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookItemData
    def IsLast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActArchiveEndbookItemData
    def EndbookName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookItemData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookItemData
    def TextId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveEndbookItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_ActArchiveEndbookItemDataAddEndBookId(builder, endBookId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endBookId), 0)

def clz_Torappu_ActArchiveEndbookItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActArchiveEndbookItemDataAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_ActArchiveEndbookItemDataAddIsLast(builder, isLast):
    builder.PrependBoolSlot(3, isLast, 0)

def clz_Torappu_ActArchiveEndbookItemDataAddEndbookName(builder, endbookName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(endbookName), 0)

def clz_Torappu_ActArchiveEndbookItemDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_ActArchiveEndbookItemDataAddTextId(builder, textId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(textId), 0)

def clz_Torappu_ActArchiveEndbookItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveEndbookGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveEndbookGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveEndbookGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveEndbookGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveEndbookGroupData
    def EndId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def EndingId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveEndbookGroupData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def CgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def BackBlurId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def CardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def HasAvg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActArchiveEndbookGroupData
    def AvgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def ClientEndbookItemDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_ActArchiveEndbookItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveEndbookGroupData
    def ClientEndbookItemDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveEndbookGroupData
    def ClientEndbookItemDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_ActArchiveEndbookGroupDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_ActArchiveEndbookGroupDataAddEndId(builder, endId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddEndingId(builder, endingId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(endingId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddCgId(builder, cgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cgId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddBackBlurId(builder, backBlurId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(backBlurId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddCardId(builder, cardId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(cardId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddHasAvg(builder, hasAvg):
    builder.PrependBoolSlot(7, hasAvg, 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddAvgId(builder, avgId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(avgId), 0)

def clz_Torappu_ActArchiveEndbookGroupDataAddClientEndbookItemDatas(builder, clientEndbookItemDatas):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(clientEndbookItemDatas), 0)

def clz_Torappu_ActArchiveEndbookGroupDataStartClientEndbookItemDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveEndbookGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveEndbookGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveEndbookGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveEndbookGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveEndbookGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveEndbookGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveEndbookGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveEndbookGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveEndbookGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveEndbookGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveEndbookGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveEndbookGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveEndbookData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveEndbookData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveEndbookData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveEndbookData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveEndbookData
    def Endbook(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveEndbookGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveEndbookData
    def EndbookLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveEndbookData
    def EndbookIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveEndbookDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveEndbookDataAddEndbook(builder, endbook):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(endbook), 0)

def clz_Torappu_ActArchiveEndbookDataStartEndbookVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveEndbookDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveBuffItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveBuffItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveBuffItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveBuffItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveBuffItemData
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveBuffItemData
    def BuffGroupIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveBuffItemData
    def InnerSortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveBuffItemData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveBuffItemData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveBuffItemData
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveBuffItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveBuffItemData
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveBuffItemDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_ActArchiveBuffItemDataAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_ActArchiveBuffItemDataAddBuffGroupIndex(builder, buffGroupIndex):
    builder.PrependInt32Slot(1, buffGroupIndex, 0)

def clz_Torappu_ActArchiveBuffItemDataAddInnerSortId(builder, innerSortId):
    builder.PrependInt32Slot(2, innerSortId, 0)

def clz_Torappu_ActArchiveBuffItemDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_ActArchiveBuffItemDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_ActArchiveBuffItemDataAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_ActArchiveBuffItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_ActArchiveBuffItemDataAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def clz_Torappu_ActArchiveBuffItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveBuffItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveBuffItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveBuffItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveBuffItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveBuffItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveBuffItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveBuffItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveBuffItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveBuffItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveBuffItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveBuffItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveBuffData
    def Buff(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveBuffItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveBuffData
    def BuffLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveBuffData
    def BuffIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveBuffDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveBuffDataAddBuff(builder, buff):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buff), 0)

def clz_Torappu_ActArchiveBuffDataStartBuffVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTotemItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTotemItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTotemItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTotemItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTotemItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTotemItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveTotemItemData
    def EnrollConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveTotemItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveTotemItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActArchiveTotemItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveTotemItemDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_ActArchiveTotemItemDataAddEnrollConditionId(builder, enrollConditionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enrollConditionId), 0)

def clz_Torappu_ActArchiveTotemItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_ActArchiveTotemItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveTotemItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveTotemItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveTotemItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveTotemItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveTotemItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveTotemItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveTotemItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveTotemItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveTotemItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveTotemItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveTotemItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveTotemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveTotemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveTotemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveTotemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveTotemData
    def Totem(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveTotemItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveTotemData
    def TotemLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveTotemData
    def TotemIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveTotemDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveTotemDataAddTotem(builder, totem):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(totem), 0)

def clz_Torappu_ActArchiveTotemDataStartTotemVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveTotemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChaosItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChaosItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChaosItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChaosItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChaosItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChaosItemData
    def IsHidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_ActArchiveChaosItemData
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveChaosItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_ActArchiveChaosItemDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_ActArchiveChaosItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_ActArchiveChaosItemDataAddIsHidden(builder, isHidden):
    builder.PrependBoolSlot(1, isHidden, 0)

def clz_Torappu_ActArchiveChaosItemDataAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_ActArchiveChaosItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_ActArchiveChaosItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveChaosItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveChaosItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveChaosItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveChaosItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveChaosItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveChaosItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChaosItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveChaosItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveChaosItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveChaosItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveChaosItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveChaosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveChaosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveChaosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveChaosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveChaosData
    def Chaos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveChaosItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveChaosData
    def ChaosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveChaosData
    def ChaosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveChaosDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveChaosDataAddChaos(builder, chaos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chaos), 0)

def clz_Torappu_ActArchiveChaosDataStartChaosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveChaosDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveFragmentItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveFragmentItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveFragmentItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveFragmentItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveFragmentItemData
    def FragmentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveFragmentItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveFragmentItemData
    def EnrollConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveFragmentItemDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_ActArchiveFragmentItemDataAddFragmentId(builder, fragmentId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentId), 0)

def clz_Torappu_ActArchiveFragmentItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActArchiveFragmentItemDataAddEnrollConditionId(builder, enrollConditionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enrollConditionId), 0)

def clz_Torappu_ActArchiveFragmentItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveFragmentItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveFragmentItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveFragmentItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveFragmentItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveFragmentItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveFragmentItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveFragmentItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveFragmentItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveFragmentItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveFragmentItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveFragmentItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveFragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveFragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveFragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveFragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveFragmentData
    def Fragment(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveFragmentItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveFragmentData
    def FragmentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveFragmentData
    def FragmentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveFragmentDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveFragmentDataAddFragment(builder, fragment):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragment), 0)

def clz_Torappu_ActArchiveFragmentDataStartFragmentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveFragmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveDisasterItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveDisasterItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveDisasterItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveDisasterItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveDisasterItemData
    def DisasterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveDisasterItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_ActArchiveDisasterItemData
    def EnrollConditionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveDisasterItemData
    def PicSmallId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveDisasterItemData
    def PicBigActiveId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_ActArchiveDisasterItemData
    def PicBigInactiveId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_ActArchiveDisasterItemDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_ActArchiveDisasterItemDataAddDisasterId(builder, disasterId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(disasterId), 0)

def clz_Torappu_ActArchiveDisasterItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_ActArchiveDisasterItemDataAddEnrollConditionId(builder, enrollConditionId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(enrollConditionId), 0)

def clz_Torappu_ActArchiveDisasterItemDataAddPicSmallId(builder, picSmallId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(picSmallId), 0)

def clz_Torappu_ActArchiveDisasterItemDataAddPicBigActiveId(builder, picBigActiveId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(picBigActiveId), 0)

def clz_Torappu_ActArchiveDisasterItemDataAddPicBigInactiveId(builder, picBigInactiveId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(picBigInactiveId), 0)

def clz_Torappu_ActArchiveDisasterItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_ActArchiveDisasterItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_ActArchiveDisasterItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_ActArchiveDisasterItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_ActArchiveDisasterItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_ActArchiveDisasterItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_ActArchiveDisasterItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveDisasterItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_ActArchiveDisasterItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_ActArchiveDisasterItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_ActArchiveDisasterItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_ActArchiveDisasterItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_ActArchiveDisasterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_ActArchiveDisasterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_ActArchiveDisasterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_ActArchiveDisasterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_ActArchiveDisasterData
    def Disasters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_ActArchiveDisasterItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_ActArchiveDisasterData
    def DisastersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_ActArchiveDisasterData
    def DisastersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_ActArchiveDisasterDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_ActArchiveDisasterDataAddDisasters(builder, disasters):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(disasters), 0)

def clz_Torappu_ActArchiveDisasterDataStartDisastersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_ActArchiveDisasterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeArchiveComponentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeArchiveComponentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeArchiveComponentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeArchiveComponentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeArchiveComponentData
    def Relic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveRelicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Capsule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveCapsuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Trap(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Chat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChatData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Endbook(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveEndbookData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Buff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Totem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveTotemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Chaos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveChaosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Fragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveFragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveComponentData
    def Disaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_ActArchiveDisasterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeArchiveComponentDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeArchiveComponentDataAddRelic(builder, relic):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relic), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddCapsule(builder, capsule):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(capsule), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddTrap(builder, trap):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trap), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddChat(builder, chat):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chat), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddEndbook(builder, endbook):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(endbook), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddBuff(builder, buff):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buff), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddTotem(builder, totem):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(totem), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddChaos(builder, chaos):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(chaos), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddFragment(builder, fragment):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(fragment), 0)

def clz_Torappu_RoguelikeArchiveComponentDataAddDisaster(builder, disaster):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(disaster), 0)

def clz_Torappu_RoguelikeArchiveComponentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeArchiveUnlockCondDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeArchiveUnlockCondDesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeArchiveUnlockCondDesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def ArchiveType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeArchiveUnlockCondDescStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeArchiveUnlockCondDescAddArchiveType(builder, archiveType):
    builder.PrependInt32Slot(0, archiveType, 0)

def clz_Torappu_RoguelikeArchiveUnlockCondDescAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeArchiveUnlockCondDescEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeArchiveUnlockCondDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDescStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDescAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDescAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDescEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeArchiveEnroll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeArchiveEnroll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeArchiveEnroll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeArchiveEnroll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeArchiveEnroll
    def ArchiveType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeArchiveEnroll
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeArchiveEnrollStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeArchiveEnrollAddArchiveType(builder, archiveType):
    builder.PrependInt32Slot(0, archiveType, 0)

def clz_Torappu_RoguelikeArchiveEnrollAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RoguelikeArchiveEnrollEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeArchiveEnroll(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeArchiveEnroll()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeArchiveEnroll(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeArchiveEnroll
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeArchiveEnroll
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeArchiveEnroll
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeArchiveEnroll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeArchiveEnrollStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeArchiveEnrollAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeArchiveEnrollAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeArchiveEnrollEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeArchiveUnlockCondData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeArchiveUnlockCondData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeArchiveUnlockCondData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def UnlockCondDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeArchiveUnlockCondDesc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def UnlockCondDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def UnlockCondDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def Enroll(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeArchiveEnroll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def EnrollLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeArchiveUnlockCondData
    def EnrollIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RoguelikeArchiveUnlockCondDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeArchiveUnlockCondDataAddUnlockCondDesc(builder, unlockCondDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondDesc), 0)

def clz_Torappu_RoguelikeArchiveUnlockCondDataStartUnlockCondDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeArchiveUnlockCondDataAddEnroll(builder, enroll):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enroll), 0)

def clz_Torappu_RoguelikeArchiveUnlockCondDataStartEnrollVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeArchiveUnlockCondDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def Exp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def PopulationUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def SquadCapacityUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def BattleCharLimitUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def MaxHpUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddExp(builder, exp):
    builder.PrependInt32Slot(0, exp, 0)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddPopulationUp(builder, populationUp):
    builder.PrependInt32Slot(1, populationUp, 0)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddSquadCapacityUp(builder, squadCapacityUp):
    builder.PrependInt32Slot(2, squadCapacityUp, 0)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddBattleCharLimitUp(builder, battleCharLimitUp):
    builder.PrependInt32Slot(3, battleCharLimitUp, 0)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddMaxHpUp(builder, maxHpUp):
    builder.PrependInt32Slot(4, maxHpUp, 0)

def clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def EvolvePhase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def SkillLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def SkillSpecializeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataAddEvolvePhase(builder, evolvePhase):
    builder.PrependInt32Slot(0, evolvePhase, 0)

def clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataAddSkillLevel(builder, skillLevel):
    builder.PrependInt32Slot(1, skillLevel, 0)

def clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataAddSkillSpecializeLevel(builder, skillSpecializeLevel):
    builder.PrependInt32Slot(2, skillSpecializeLevel, 0)

def clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeDataEnd(builder):
    return builder.EndObject()



class dict__int__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__int__stringStart(builder):
    builder.StartObject(2)

def dict__int__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def Levels(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def LevelsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def LevelsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataAddLevels(builder, levels):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(levels), 0)

def clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataStartLevelsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDetailConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDetailConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDetailConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDetailConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDetailConst
    def PlayerLevelTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeTopicDetailConst_PlayerLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def PlayerLevelTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def PlayerLevelTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def CharUpgradeTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeTopicDetailConst_CharUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def CharUpgradeTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def CharUpgradeTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def DifficultyUpgradeRelicDescTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def DifficultyUpgradeRelicDescTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def DifficultyUpgradeRelicDescTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def PredefinedLevelTable(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDetailConst_PredefinedPlayerLevelData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def PredefinedLevelTableLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def PredefinedLevelTableIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def TokenBpId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def TokenOuterBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def PreviewedRewardsAccordingUpdateId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def TipButtonName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def CollectButtonName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def BpSystemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def AutoSetKv(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def BpPurchaseActiveEnroll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def DefaultSacrificeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def DefaultExpeditionSelectDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def GotCharBuffToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def GotSquadBuffToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def LoseCharBuffToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def MonthTeamSystemName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def BattlePassUpdateName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def MonthCharCardTagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def MonthTeamDescTagName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def OuterBuffCompleteText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def OuterProgressTextColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def ChallengeTaskTargetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def ChallengeTaskConditionName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def ChallengeTaskRewardName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def ChallengeTaskModeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def ChallengeTaskName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDetailConst
    def OuterBuffTokenSum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def NeedAllFrontNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDetailConst
    def ShowBlurBack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTopicDetailConst
    def EndingIconBorderDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDetailConst
    def EndingIconBorderCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicDetailConstStart(builder):
    builder.StartObject(33)

def clz_Torappu_RoguelikeTopicDetailConstAddPlayerLevelTable(builder, playerLevelTable):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(playerLevelTable), 0)

def clz_Torappu_RoguelikeTopicDetailConstStartPlayerLevelTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailConstAddCharUpgradeTable(builder, charUpgradeTable):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(charUpgradeTable), 0)

def clz_Torappu_RoguelikeTopicDetailConstStartCharUpgradeTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailConstAddDifficultyUpgradeRelicDescTable(builder, difficultyUpgradeRelicDescTable):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyUpgradeRelicDescTable), 0)

def clz_Torappu_RoguelikeTopicDetailConstStartDifficultyUpgradeRelicDescTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailConstAddPredefinedLevelTable(builder, predefinedLevelTable):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(predefinedLevelTable), 0)

def clz_Torappu_RoguelikeTopicDetailConstStartPredefinedLevelTableVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailConstAddTokenBpId(builder, tokenBpId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(tokenBpId), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddTokenOuterBuffId(builder, tokenOuterBuffId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tokenOuterBuffId), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddPreviewedRewardsAccordingUpdateId(builder, previewedRewardsAccordingUpdateId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(previewedRewardsAccordingUpdateId), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddTipButtonName(builder, tipButtonName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tipButtonName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddCollectButtonName(builder, collectButtonName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(collectButtonName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddBpSystemName(builder, bpSystemName):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bpSystemName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddAutoSetKv(builder, autoSetKv):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(autoSetKv), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddBpPurchaseActiveEnroll(builder, bpPurchaseActiveEnroll):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(bpPurchaseActiveEnroll), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddDefaultSacrificeDesc(builder, defaultSacrificeDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(defaultSacrificeDesc), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddDefaultExpeditionSelectDesc(builder, defaultExpeditionSelectDesc):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(defaultExpeditionSelectDesc), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddGotCharBuffToast(builder, gotCharBuffToast):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(gotCharBuffToast), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddGotSquadBuffToast(builder, gotSquadBuffToast):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(gotSquadBuffToast), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddLoseCharBuffToast(builder, loseCharBuffToast):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(loseCharBuffToast), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddMonthTeamSystemName(builder, monthTeamSystemName):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(monthTeamSystemName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddBattlePassUpdateName(builder, battlePassUpdateName):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(battlePassUpdateName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddMonthCharCardTagName(builder, monthCharCardTagName):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(monthCharCardTagName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddMonthTeamDescTagName(builder, monthTeamDescTagName):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(monthTeamDescTagName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddOuterBuffCompleteText(builder, outerBuffCompleteText):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(outerBuffCompleteText), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddOuterProgressTextColor(builder, outerProgressTextColor):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(outerProgressTextColor), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddChallengeTaskTargetName(builder, challengeTaskTargetName):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTaskTargetName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddChallengeTaskConditionName(builder, challengeTaskConditionName):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTaskConditionName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddChallengeTaskRewardName(builder, challengeTaskRewardName):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTaskRewardName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddChallengeTaskModeName(builder, challengeTaskModeName):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTaskModeName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddChallengeTaskName(builder, challengeTaskName):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(challengeTaskName), 0)

def clz_Torappu_RoguelikeTopicDetailConstAddOuterBuffTokenSum(builder, outerBuffTokenSum):
    builder.PrependInt32Slot(28, outerBuffTokenSum, 0)

def clz_Torappu_RoguelikeTopicDetailConstAddNeedAllFrontNode(builder, needAllFrontNode):
    builder.PrependBoolSlot(29, needAllFrontNode, 0)

def clz_Torappu_RoguelikeTopicDetailConstAddShowBlurBack(builder, showBlurBack):
    builder.PrependBoolSlot(30, showBlurBack, 0)

def clz_Torappu_RoguelikeTopicDetailConstAddEndingIconBorderDifficulty(builder, endingIconBorderDifficulty):
    builder.PrependInt32Slot(31, endingIconBorderDifficulty, 0)

def clz_Torappu_RoguelikeTopicDetailConstAddEndingIconBorderCount(builder, endingIconBorderCount):
    builder.PrependInt32Slot(32, endingIconBorderCount, 0)

def clz_Torappu_RoguelikeTopicDetailConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameInitData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameInitData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameInitData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameInitData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameInitData
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def ModeGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def PredefinedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameInitData
    def PredefinedStyle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameInitData
    def InitialBandRelic(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameInitData
    def InitialBandRelicLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialBandRelicIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialRecruitGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameInitData
    def InitialRecruitGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialRecruitGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialPopulation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialGold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialSquadCapacity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialShield(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialMaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameInitData
    def InitialKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeGameInitDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_RoguelikeGameInitDataAddModeId(builder, modeId):
    builder.PrependInt32Slot(0, modeId, 0)

def clz_Torappu_RoguelikeGameInitDataAddModeGrade(builder, modeGrade):
    builder.PrependInt32Slot(1, modeGrade, 0)

def clz_Torappu_RoguelikeGameInitDataAddPredefinedId(builder, predefinedId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(predefinedId), 0)

def clz_Torappu_RoguelikeGameInitDataAddPredefinedStyle(builder, predefinedStyle):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(predefinedStyle), 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialBandRelic(builder, initialBandRelic):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(initialBandRelic), 0)

def clz_Torappu_RoguelikeGameInitDataStartInitialBandRelicVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameInitDataAddInitialRecruitGroup(builder, initialRecruitGroup):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(initialRecruitGroup), 0)

def clz_Torappu_RoguelikeGameInitDataStartInitialRecruitGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameInitDataAddInitialHp(builder, initialHp):
    builder.PrependInt32Slot(6, initialHp, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialPopulation(builder, initialPopulation):
    builder.PrependInt32Slot(7, initialPopulation, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialGold(builder, initialGold):
    builder.PrependInt32Slot(8, initialGold, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialSquadCapacity(builder, initialSquadCapacity):
    builder.PrependInt32Slot(9, initialSquadCapacity, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialShield(builder, initialShield):
    builder.PrependInt32Slot(10, initialShield, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialMaxHp(builder, initialMaxHp):
    builder.PrependInt32Slot(11, initialMaxHp, 0)

def clz_Torappu_RoguelikeGameInitDataAddInitialKey(builder, initialKey):
    builder.PrependInt32Slot(12, initialKey, 0)

def clz_Torappu_RoguelikeGameInitDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameStageData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def LinkedStageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def LoadingPicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def EliteDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def IsBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def IsElite(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def Difficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def CapsulePool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameStageData
    def CapsuleProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RoguelikeGameStageData
    def VutresProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def VutresProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def VutresProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def VutresProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_RoguelikeGameStageData
    def BoxProb(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def BoxProbAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def BoxProbLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameStageData
    def BoxProbIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_RoguelikeGameStageData
    def SpecialNodeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameStageDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_RoguelikeGameStageDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameStageDataAddLinkedStageId(builder, linkedStageId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(linkedStageId), 0)

def clz_Torappu_RoguelikeGameStageDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_RoguelikeGameStageDataAddCode(builder, code):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)

def clz_Torappu_RoguelikeGameStageDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameStageDataAddLoadingPicId(builder, loadingPicId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(loadingPicId), 0)

def clz_Torappu_RoguelikeGameStageDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameStageDataAddEliteDesc(builder, eliteDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(eliteDesc), 0)

def clz_Torappu_RoguelikeGameStageDataAddIsBoss(builder, isBoss):
    builder.PrependInt32Slot(8, isBoss, 0)

def clz_Torappu_RoguelikeGameStageDataAddIsElite(builder, isElite):
    builder.PrependInt32Slot(9, isElite, 0)

def clz_Torappu_RoguelikeGameStageDataAddDifficulty(builder, difficulty):
    builder.PrependInt32Slot(10, difficulty, 0)

def clz_Torappu_RoguelikeGameStageDataAddCapsulePool(builder, capsulePool):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(capsulePool), 0)

def clz_Torappu_RoguelikeGameStageDataAddCapsuleProb(builder, capsuleProb):
    builder.PrependFloat32Slot(12, capsuleProb, 0.0)

def clz_Torappu_RoguelikeGameStageDataAddVutresProb(builder, vutresProb):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(vutresProb), 0)

def clz_Torappu_RoguelikeGameStageDataStartVutresProbVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def clz_Torappu_RoguelikeGameStageDataAddBoxProb(builder, boxProb):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(boxProb), 0)

def clz_Torappu_RoguelikeGameStageDataStartBoxProbVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def clz_Torappu_RoguelikeGameStageDataAddSpecialNodeId(builder, specialNodeId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(specialNodeId), 0)

def clz_Torappu_RoguelikeGameStageDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameStageData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameStageData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameStageData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameStageData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameStageData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameStageData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameStageDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameStageDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameStageDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameStageDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameZoneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def ClockPerformance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def DisplayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def BuffDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def EndingDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def BackgroundId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def ZoneIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameZoneData
    def IsHiddenZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeGameZoneDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeGameZoneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameZoneDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameZoneDataAddClockPerformance(builder, clockPerformance):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(clockPerformance), 0)

def clz_Torappu_RoguelikeGameZoneDataAddDisplayTime(builder, displayTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(displayTime), 0)

def clz_Torappu_RoguelikeGameZoneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameZoneDataAddBuffDescription(builder, buffDescription):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buffDescription), 0)

def clz_Torappu_RoguelikeGameZoneDataAddEndingDescription(builder, endingDescription):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endingDescription), 0)

def clz_Torappu_RoguelikeGameZoneDataAddBackgroundId(builder, backgroundId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(backgroundId), 0)

def clz_Torappu_RoguelikeGameZoneDataAddZoneIconId(builder, zoneIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(zoneIconId), 0)

def clz_Torappu_RoguelikeGameZoneDataAddIsHiddenZone(builder, isHiddenZone):
    builder.PrependBoolSlot(9, isHiddenZone, 0)

def clz_Torappu_RoguelikeGameZoneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameZoneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameZoneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameZoneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameZoneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameZoneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameZoneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameZoneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameZoneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameZoneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameZoneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeZoneVariationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeZoneVariationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeZoneVariationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeZoneVariationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

def clz_Torappu_RoguelikeZoneVariationDataStart(builder):
    builder.StartObject(0)

def clz_Torappu_RoguelikeZoneVariationDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeZoneVariationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeZoneVariationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeZoneVariationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeZoneVariationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeZoneVariationData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeZoneVariationData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeZoneVariationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeZoneVariationDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeZoneVariationDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeZoneVariationDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeZoneVariationDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameTrapData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameTrapData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameTrapData
    def TrapDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameTrapDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeGameTrapDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeGameTrapDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_RoguelikeGameTrapDataAddTrapDesc(builder, trapDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trapDesc), 0)

def clz_Torappu_RoguelikeGameTrapDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameTrapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameTrapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameTrapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameTrapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameTrapData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameTrapData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameTrapDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameTrapDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameTrapDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameTrapDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameRecruitTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameRecruitTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameRecruitTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameRecruitTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ProfessionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ProfessionListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ProfessionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ProfessionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def RarityList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def RarityListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def RarityListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def RarityListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraEliteNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraFreeRarity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraFreeRarityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraFreeRarityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraFreeRarityIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraCharIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraCharIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRecruitTicketData
    def ExtraCharIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_RoguelikeGameRecruitTicketDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddProfession(builder, profession):
    builder.PrependInt32Slot(1, profession, 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(2, rarity, 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddProfessionList(builder, professionList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(professionList), 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataStartProfessionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddRarityList(builder, rarityList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rarityList), 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataStartRarityListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddExtraEliteNum(builder, extraEliteNum):
    builder.PrependInt32Slot(5, extraEliteNum, 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddExtraFreeRarity(builder, extraFreeRarity):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(extraFreeRarity), 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataStartExtraFreeRarityVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRecruitTicketDataAddExtraCharIds(builder, extraCharIds):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(extraCharIds), 0)

def clz_Torappu_RoguelikeGameRecruitTicketDataStartExtraCharIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRecruitTicketDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameRecruitTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameRecruitTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameRecruitTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameRecruitTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameRecruitTicketData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameRecruitTicketData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameRecruitTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameRecruitTicketDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameRecruitTicketDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameRecruitTicketDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameRecruitTicketDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameUpgradeTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameUpgradeTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameUpgradeTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def Profession(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def ProfessionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def ProfessionListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def ProfessionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def ProfessionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def RarityList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def RarityListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def RarityListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameUpgradeTicketData
    def RarityListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RoguelikeGameUpgradeTicketDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeGameUpgradeTicketDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameUpgradeTicketDataAddProfession(builder, profession):
    builder.PrependInt32Slot(1, profession, 0)

def clz_Torappu_RoguelikeGameUpgradeTicketDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(2, rarity, 0)

def clz_Torappu_RoguelikeGameUpgradeTicketDataAddProfessionList(builder, professionList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(professionList), 0)

def clz_Torappu_RoguelikeGameUpgradeTicketDataStartProfessionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameUpgradeTicketDataAddRarityList(builder, rarityList):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(rarityList), 0)

def clz_Torappu_RoguelikeGameUpgradeTicketDataStartRarityListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameUpgradeTicketDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameUpgradeTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameUpgradeTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameUpgradeTicketDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameUpgradeTicketDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameUpgradeTicketDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameUpgradeTicketDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameCustomTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameCustomTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameCustomTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameCustomTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameCustomTicketData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCustomTicketData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameCustomTicketData
    def DiscardText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameCustomTicketDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeGameCustomTicketDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameCustomTicketDataAddSubType(builder, subType):
    builder.PrependInt32Slot(1, subType, 0)

def clz_Torappu_RoguelikeGameCustomTicketDataAddDiscardText(builder, discardText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(discardText), 0)

def clz_Torappu_RoguelikeGameCustomTicketDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameCustomTicketData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameCustomTicketData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameCustomTicketData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameCustomTicketData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameCustomTicketData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameCustomTicketData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameCustomTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameCustomTicketDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameCustomTicketDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameCustomTicketDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameCustomTicketDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeBuff(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeBuff()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeBuff(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeBuff
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeBuff
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeBuff
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeBuff
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeBuff
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RoguelikeBuffStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeBuffAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_RoguelikeBuffAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_RoguelikeBuffStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeBuffEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameRelicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameRelicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameRelicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameRelicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameRelicData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRelicData
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameRelicData
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRelicData
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RoguelikeGameRelicDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeGameRelicDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameRelicDataAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_RoguelikeGameRelicDataStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRelicDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameRelicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameRelicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameRelicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameRelicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameRelicData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameRelicData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameRelicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameRelicDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameRelicDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameRelicDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameRelicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameRelicCheckParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameRelicCheckParam()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameRelicCheckParam(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameRelicCheckParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameRelicCheckParam
    def ValueProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameRelicCheckParam
    def ValueStrs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameRelicCheckParam
    def ValueStrsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRelicCheckParam
    def ValueStrsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeGameRelicCheckParam
    def ValueInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeGameRelicCheckParamStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeGameRelicCheckParamAddValueProfessionMask(builder, valueProfessionMask):
    builder.PrependInt32Slot(0, valueProfessionMask, 0)

def clz_Torappu_RoguelikeGameRelicCheckParamAddValueStrs(builder, valueStrs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(valueStrs), 0)

def clz_Torappu_RoguelikeGameRelicCheckParamStartValueStrsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRelicCheckParamAddValueInt(builder, valueInt):
    builder.PrependInt32Slot(2, valueInt, 0)

def clz_Torappu_RoguelikeGameRelicCheckParamEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameRelicParamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameRelicParamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameRelicParamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameRelicParamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameRelicParamData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeGameRelicCheckParam()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameRelicParamData
    def CheckCharBoxParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def clz_Torappu_RoguelikeGameRelicParamDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeGameRelicParamDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameRelicParamDataAddCheckCharBoxTypes(builder, checkCharBoxTypes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checkCharBoxTypes), 0)

def clz_Torappu_RoguelikeGameRelicParamDataStartCheckCharBoxTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRelicParamDataAddCheckCharBoxParams(builder, checkCharBoxParams):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(checkCharBoxParams), 0)

def clz_Torappu_RoguelikeGameRelicParamDataStartCheckCharBoxParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameRelicParamDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameRelicParamData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameRelicParamData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameRelicParamData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameRelicParamData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameRelicParamData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameRelicParamData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameRelicParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameRelicParamDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameRelicParamDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameRelicParamDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameRelicParamDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameRecruitGrpData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameRecruitGrpData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameRecruitGrpData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameRecruitGrpData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameRecruitGrpData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRecruitGrpData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRecruitGrpData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRecruitGrpData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameRecruitGrpData
    def UnlockDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameRecruitGrpDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeGameRecruitGrpDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameRecruitGrpDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameRecruitGrpDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameRecruitGrpDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeGameRecruitGrpDataAddUnlockDesc(builder, unlockDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unlockDesc), 0)

def clz_Torappu_RoguelikeGameRecruitGrpDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameRecruitGrpData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameRecruitGrpData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameRecruitGrpData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameRecruitGrpData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameRecruitGrpData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameRecruitGrpData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameRecruitGrpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameRecruitGrpDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameRecruitGrpDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameRecruitGrpDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameRecruitGrpDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChoiceDisplayData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChoiceDisplayData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChoiceDisplayData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChoiceDisplayData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChoiceDisplayData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChoiceDisplayData
    def CostHintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChoiceDisplayData
    def EffectHintType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChoiceDisplayData
    def FuncIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChoiceDisplayData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChoiceDisplayData
    def DifficultyUpgradeRelicGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChoiceDisplayData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeChoiceDisplayDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeChoiceDisplayDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddCostHintType(builder, costHintType):
    builder.PrependInt32Slot(1, costHintType, 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddEffectHintType(builder, effectHintType):
    builder.PrependInt32Slot(2, effectHintType, 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddFuncIconId(builder, funcIconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(funcIconId), 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddDifficultyUpgradeRelicGroupId(builder, difficultyUpgradeRelicGroupId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyUpgradeRelicGroupId), 0)

def clz_Torappu_RoguelikeChoiceDisplayDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_RoguelikeChoiceDisplayDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameChoiceData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def LockedCoverDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameChoiceData
    def LeftDecoType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameChoiceData
    def NextSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def DisplayData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeChoiceDisplayData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameChoiceData
    def ForceShowWhenOnlyLeave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeGameChoiceDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeGameChoiceDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddLockedCoverDesc(builder, lockedCoverDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(lockedCoverDesc), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddType(builder, type):
    builder.PrependInt32Slot(4, type, 0)

def clz_Torappu_RoguelikeGameChoiceDataAddLeftDecoType(builder, leftDecoType):
    builder.PrependInt32Slot(5, leftDecoType, 0)

def clz_Torappu_RoguelikeGameChoiceDataAddNextSceneId(builder, nextSceneId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nextSceneId), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddDisplayData(builder, displayData):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(displayData), 0)

def clz_Torappu_RoguelikeGameChoiceDataAddForceShowWhenOnlyLeave(builder, forceShowWhenOnlyLeave):
    builder.PrependBoolSlot(9, forceShowWhenOnlyLeave, 0)

def clz_Torappu_RoguelikeGameChoiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameChoiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameChoiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameChoiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameChoiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameChoiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameChoiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameChoiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameChoiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameChoiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameChoiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameChoiceSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameChoiceSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameChoiceSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameChoiceSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def Background(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def TitleIcon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def SubTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameChoiceSceneData
    def UseHiddenMusic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RoguelikeGameChoiceSceneDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddBackground(builder, background):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(background), 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddTitleIcon(builder, titleIcon):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(titleIcon), 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddSubTypeId(builder, subTypeId):
    builder.PrependInt32Slot(5, subTypeId, 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataAddUseHiddenMusic(builder, useHiddenMusic):
    builder.PrependBoolSlot(6, useHiddenMusic, 0)

def clz_Torappu_RoguelikeGameChoiceSceneDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameChoiceSceneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameChoiceSceneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameChoiceSceneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameChoiceSceneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameChoiceSceneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameChoiceSceneData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameChoiceSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameChoiceSceneDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameChoiceSceneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameChoiceSceneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameChoiceSceneDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameNodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameNodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameNodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameNodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameNodeTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameNodeTypeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameNodeTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeGameNodeTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameNodeTypeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameNodeTypeDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameNodeSubTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameNodeSubTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameNodeSubTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def SubTypeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameNodeSubTypeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameNodeSubTypeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeGameNodeSubTypeDataAddEventType(builder, eventType):
    builder.PrependInt32Slot(0, eventType, 0)

def clz_Torappu_RoguelikeGameNodeSubTypeDataAddSubTypeId(builder, subTypeId):
    builder.PrependInt32Slot(1, subTypeId, 0)

def clz_Torappu_RoguelikeGameNodeSubTypeDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameNodeSubTypeDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameNodeSubTypeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameNodeSubTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameVariationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameVariationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameVariationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameVariationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameVariationData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameVariationData
    def OuterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def InnerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameVariationData
    def Sound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameVariationDataStart(builder):
    builder.StartObject(8)

def clz_Torappu_RoguelikeGameVariationDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameVariationDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_RoguelikeGameVariationDataAddOuterName(builder, outerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outerName), 0)

def clz_Torappu_RoguelikeGameVariationDataAddInnerName(builder, innerName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(innerName), 0)

def clz_Torappu_RoguelikeGameVariationDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_RoguelikeGameVariationDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeGameVariationDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameVariationDataAddSound(builder, sound):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(sound), 0)

def clz_Torappu_RoguelikeGameVariationDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameVariationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameVariationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameVariationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameVariationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameVariationData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameVariationData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameVariationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameVariationDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameVariationDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameVariationDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameVariationDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameCharBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameCharBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameCharBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameCharBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameCharBuffData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def OuterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def InnerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameCharBuffData
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameCharBuffData
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_RoguelikeGameCharBuffDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeGameCharBuffDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddOuterName(builder, outerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outerName), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddInnerName(builder, innerName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(innerName), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeGameCharBuffDataAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_RoguelikeGameCharBuffDataStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameCharBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameCharBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameCharBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameCharBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameCharBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameCharBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameCharBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameCharBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameCharBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameCharBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameCharBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameCharBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameSquadBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameSquadBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameSquadBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameSquadBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameSquadBuffData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def OuterName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def InnerName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeBuff()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameSquadBuffData
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameSquadBuffData
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_RoguelikeGameSquadBuffDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeGameSquadBuffDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddOuterName(builder, outerName):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outerName), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddInnerName(builder, innerName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(innerName), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_RoguelikeGameSquadBuffDataStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameSquadBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameSquadBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameSquadBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameSquadBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameSquadBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameSquadBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameSquadBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameSquadBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameSquadBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameSquadBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameSquadBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameSquadBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTaskData
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTaskData
    def TaskName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTaskData
    def TaskDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTaskData
    def RewardSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTaskData
    def TaskRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTaskDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTaskDataAddTaskId(builder, taskId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)

def clz_Torappu_RoguelikeTaskDataAddTaskName(builder, taskName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskName), 0)

def clz_Torappu_RoguelikeTaskDataAddTaskDesc(builder, taskDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(taskDesc), 0)

def clz_Torappu_RoguelikeTaskDataAddRewardSceneId(builder, rewardSceneId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rewardSceneId), 0)

def clz_Torappu_RoguelikeTaskDataAddTaskRarity(builder, taskRarity):
    builder.PrependInt32Slot(4, taskRarity, 0)

def clz_Torappu_RoguelikeTaskDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTaskData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTaskData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTaskData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTaskData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTaskData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTaskData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTaskDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTaskDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTaskDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTaskDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameConst(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameConst()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameConst(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameConst
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameConst
    def InitSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def FailSceneName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def HpItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def GoldItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def PopulationItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def SquadCapacityItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def InitialBandShowGradeFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeGameConst
    def BankMaxGold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def BankCostId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def BankDrawCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def BankDrawLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def MimicEnemyIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameConst
    def MimicEnemyIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def MimicEnemyIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def BossIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameConst
    def BossIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def BossIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def GoldChestTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def NormBoxTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def RareBoxTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def BadBoxTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def MaxHpItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ShieldItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def KeyItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ChestKeyCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def ChestKeyItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def KeyColorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def OnceNodeTypeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeGameConst
    def OnceNodeTypeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def OnceNodeTypeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def OnceNodeTypeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def GpScoreRatio(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def OverflowUsageSquadBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def SpecialTrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TrapRewardRelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def UnlockRouteItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def UnlockRouteItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def HideBattleNodeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def HideBattleNodeDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def HideNonBattleNodeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def HideNonBattleNodeDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def CharSelectExpeditionConflictToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ItemDropTagDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_RoguelikeRewardExDropTagSrcType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameConst
    def ItemDropTagDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def ItemDropTagDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnDescCureUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnDescUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnDescCure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionSelectDescFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnDescItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnRewardBlackList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnRewardBlackListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def ExpeditionReturnRewardBlackListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def TravelLeaveToastFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def CharSelectTravelConflictToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TravelReturnDescUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TravelReturnDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TravelReturnDescItem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TraderReturnTitle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TraderReturnDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def GainBuffDiffGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(106))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def DsPredictTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(108))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def DsBuffActiveTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(110))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def TotemDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(112))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def RelicDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(114))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def BuffDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(116))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def RefreshNodeItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(118))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameConst
    def PortalZones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameConst
    def PortalZonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameConst
    def PortalZonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(120))
        return o == 0

    # clz_Torappu_RoguelikeGameConst
    def ExploreExpOnKill(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(122))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameConstStart(builder):
    builder.StartObject(60)

def clz_Torappu_RoguelikeGameConstAddInitSceneName(builder, initSceneName):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(initSceneName), 0)

def clz_Torappu_RoguelikeGameConstAddFailSceneName(builder, failSceneName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(failSceneName), 0)

def clz_Torappu_RoguelikeGameConstAddHpItemId(builder, hpItemId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(hpItemId), 0)

def clz_Torappu_RoguelikeGameConstAddGoldItemId(builder, goldItemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(goldItemId), 0)

def clz_Torappu_RoguelikeGameConstAddPopulationItemId(builder, populationItemId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(populationItemId), 0)

def clz_Torappu_RoguelikeGameConstAddSquadCapacityItemId(builder, squadCapacityItemId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(squadCapacityItemId), 0)

def clz_Torappu_RoguelikeGameConstAddExpItemId(builder, expItemId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(expItemId), 0)

def clz_Torappu_RoguelikeGameConstAddInitialBandShowGradeFlag(builder, initialBandShowGradeFlag):
    builder.PrependBoolSlot(7, initialBandShowGradeFlag, 0)

def clz_Torappu_RoguelikeGameConstAddBankMaxGold(builder, bankMaxGold):
    builder.PrependInt32Slot(8, bankMaxGold, 0)

def clz_Torappu_RoguelikeGameConstAddBankCostId(builder, bankCostId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bankCostId), 0)

def clz_Torappu_RoguelikeGameConstAddBankDrawCount(builder, bankDrawCount):
    builder.PrependInt32Slot(10, bankDrawCount, 0)

def clz_Torappu_RoguelikeGameConstAddBankDrawLimit(builder, bankDrawLimit):
    builder.PrependInt32Slot(11, bankDrawLimit, 0)

def clz_Torappu_RoguelikeGameConstAddMimicEnemyIds(builder, mimicEnemyIds):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(mimicEnemyIds), 0)

def clz_Torappu_RoguelikeGameConstStartMimicEnemyIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddBossIds(builder, bossIds):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(bossIds), 0)

def clz_Torappu_RoguelikeGameConstStartBossIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddGoldChestTrapId(builder, goldChestTrapId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(goldChestTrapId), 0)

def clz_Torappu_RoguelikeGameConstAddNormBoxTrapId(builder, normBoxTrapId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(normBoxTrapId), 0)

def clz_Torappu_RoguelikeGameConstAddRareBoxTrapId(builder, rareBoxTrapId):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(rareBoxTrapId), 0)

def clz_Torappu_RoguelikeGameConstAddBadBoxTrapId(builder, badBoxTrapId):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(badBoxTrapId), 0)

def clz_Torappu_RoguelikeGameConstAddMaxHpItemId(builder, maxHpItemId):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(maxHpItemId), 0)

def clz_Torappu_RoguelikeGameConstAddShieldItemId(builder, shieldItemId):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(shieldItemId), 0)

def clz_Torappu_RoguelikeGameConstAddKeyItemId(builder, keyItemId):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(keyItemId), 0)

def clz_Torappu_RoguelikeGameConstAddChestKeyCnt(builder, chestKeyCnt):
    builder.PrependInt32Slot(21, chestKeyCnt, 0)

def clz_Torappu_RoguelikeGameConstAddChestKeyItemId(builder, chestKeyItemId):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(chestKeyItemId), 0)

def clz_Torappu_RoguelikeGameConstAddKeyColorId(builder, keyColorId):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(keyColorId), 0)

def clz_Torappu_RoguelikeGameConstAddOnceNodeTypeList(builder, onceNodeTypeList):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(onceNodeTypeList), 0)

def clz_Torappu_RoguelikeGameConstStartOnceNodeTypeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddGpScoreRatio(builder, gpScoreRatio):
    builder.PrependInt32Slot(25, gpScoreRatio, 0)

def clz_Torappu_RoguelikeGameConstAddOverflowUsageSquadBuff(builder, overflowUsageSquadBuff):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(overflowUsageSquadBuff), 0)

def clz_Torappu_RoguelikeGameConstAddSpecialTrapId(builder, specialTrapId):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(specialTrapId), 0)

def clz_Torappu_RoguelikeGameConstAddTrapRewardRelicId(builder, trapRewardRelicId):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(trapRewardRelicId), 0)

def clz_Torappu_RoguelikeGameConstAddUnlockRouteItemId(builder, unlockRouteItemId):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(unlockRouteItemId), 0)

def clz_Torappu_RoguelikeGameConstAddUnlockRouteItemCount(builder, unlockRouteItemCount):
    builder.PrependInt32Slot(30, unlockRouteItemCount, 0)

def clz_Torappu_RoguelikeGameConstAddHideBattleNodeName(builder, hideBattleNodeName):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(hideBattleNodeName), 0)

def clz_Torappu_RoguelikeGameConstAddHideBattleNodeDescription(builder, hideBattleNodeDescription):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(hideBattleNodeDescription), 0)

def clz_Torappu_RoguelikeGameConstAddHideNonBattleNodeName(builder, hideNonBattleNodeName):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(hideNonBattleNodeName), 0)

def clz_Torappu_RoguelikeGameConstAddHideNonBattleNodeDescription(builder, hideNonBattleNodeDescription):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(hideNonBattleNodeDescription), 0)

def clz_Torappu_RoguelikeGameConstAddCharSelectExpeditionConflictToast(builder, charSelectExpeditionConflictToast):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(charSelectExpeditionConflictToast), 0)

def clz_Torappu_RoguelikeGameConstAddItemDropTagDict(builder, itemDropTagDict):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(itemDropTagDict), 0)

def clz_Torappu_RoguelikeGameConstStartItemDropTagDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnDescCureUpgrade(builder, expeditionReturnDescCureUpgrade):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnDescCureUpgrade), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnDescUpgrade(builder, expeditionReturnDescUpgrade):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnDescUpgrade), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnDescCure(builder, expeditionReturnDescCure):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnDescCure), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnDesc(builder, expeditionReturnDesc):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnDesc), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionSelectDescFormat(builder, expeditionSelectDescFormat):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionSelectDescFormat), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnDescItem(builder, expeditionReturnDescItem):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnDescItem), 0)

def clz_Torappu_RoguelikeGameConstAddExpeditionReturnRewardBlackList(builder, expeditionReturnRewardBlackList):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(expeditionReturnRewardBlackList), 0)

def clz_Torappu_RoguelikeGameConstStartExpeditionReturnRewardBlackListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddTravelLeaveToastFormat(builder, travelLeaveToastFormat):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(travelLeaveToastFormat), 0)

def clz_Torappu_RoguelikeGameConstAddCharSelectTravelConflictToast(builder, charSelectTravelConflictToast):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(charSelectTravelConflictToast), 0)

def clz_Torappu_RoguelikeGameConstAddTravelReturnDescUpgrade(builder, travelReturnDescUpgrade):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(travelReturnDescUpgrade), 0)

def clz_Torappu_RoguelikeGameConstAddTravelReturnDesc(builder, travelReturnDesc):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(travelReturnDesc), 0)

def clz_Torappu_RoguelikeGameConstAddTravelReturnDescItem(builder, travelReturnDescItem):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(travelReturnDescItem), 0)

def clz_Torappu_RoguelikeGameConstAddTraderReturnTitle(builder, traderReturnTitle):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(traderReturnTitle), 0)

def clz_Torappu_RoguelikeGameConstAddTraderReturnDesc(builder, traderReturnDesc):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(traderReturnDesc), 0)

def clz_Torappu_RoguelikeGameConstAddGainBuffDiffGrade(builder, gainBuffDiffGrade):
    builder.PrependInt32Slot(51, gainBuffDiffGrade, 0)

def clz_Torappu_RoguelikeGameConstAddDsPredictTips(builder, dsPredictTips):
    builder.PrependUOffsetTRelativeSlot(52, flatbuffers.number_types.UOffsetTFlags.py_type(dsPredictTips), 0)

def clz_Torappu_RoguelikeGameConstAddDsBuffActiveTips(builder, dsBuffActiveTips):
    builder.PrependUOffsetTRelativeSlot(53, flatbuffers.number_types.UOffsetTFlags.py_type(dsBuffActiveTips), 0)

def clz_Torappu_RoguelikeGameConstAddTotemDesc(builder, totemDesc):
    builder.PrependUOffsetTRelativeSlot(54, flatbuffers.number_types.UOffsetTFlags.py_type(totemDesc), 0)

def clz_Torappu_RoguelikeGameConstAddRelicDesc(builder, relicDesc):
    builder.PrependUOffsetTRelativeSlot(55, flatbuffers.number_types.UOffsetTFlags.py_type(relicDesc), 0)

def clz_Torappu_RoguelikeGameConstAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(56, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_RoguelikeGameConstAddRefreshNodeItemId(builder, refreshNodeItemId):
    builder.PrependUOffsetTRelativeSlot(57, flatbuffers.number_types.UOffsetTFlags.py_type(refreshNodeItemId), 0)

def clz_Torappu_RoguelikeGameConstAddPortalZones(builder, portalZones):
    builder.PrependUOffsetTRelativeSlot(58, flatbuffers.number_types.UOffsetTFlags.py_type(portalZones), 0)

def clz_Torappu_RoguelikeGameConstStartPortalZonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameConstAddExploreExpOnKill(builder, exploreExpOnKill):
    builder.PrependUOffsetTRelativeSlot(59, flatbuffers.number_types.UOffsetTFlags.py_type(exploreExpOnKill), 0)

def clz_Torappu_RoguelikeGameConstEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameShopDialogGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameShopDialogGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameShopDialogGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameShopDialogGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameShopDialogGroupData
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeGameShopDialogGroupData
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameShopDialogGroupData
    def ContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeGameShopDialogGroupDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeGameShopDialogGroupDataAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def clz_Torappu_RoguelikeGameShopDialogGroupDataStartContentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameShopDialogGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameShopDialogGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameShopDialogGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameShopDialogGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameShopDialogGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameShopDialogGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameShopDialogGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameShopDialogTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameShopDialogTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameShopDialogTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameShopDialogTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameShopDialogTypeData
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameShopDialogGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameShopDialogTypeData
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameShopDialogTypeData
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeGameShopDialogTypeDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeGameShopDialogTypeDataAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def clz_Torappu_RoguelikeGameShopDialogTypeDataStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameShopDialogTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameShopDialogTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameShopDialogTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameShopDialogTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameShopDialogTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameShopDialogTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameShopDialogTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameShopDialogData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameShopDialogData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameShopDialogData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameShopDialogData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameShopDialogData
    def Types(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameShopDialogTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameShopDialogData
    def TypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameShopDialogData
    def TypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeGameShopDialogDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeGameShopDialogDataAddTypes(builder, types):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(types), 0)

def clz_Torappu_RoguelikeGameShopDialogDataStartTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameShopDialogDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicCapsule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicCapsule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicCapsule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicCapsule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicCapsule
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicCapsule
    def MaskType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicCapsule
    def InnerColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicCapsuleStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeTopicCapsuleAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeTopicCapsuleAddMaskType(builder, maskType):
    builder.PrependInt32Slot(1, maskType, 0)

def clz_Torappu_RoguelikeTopicCapsuleAddInnerColor(builder, innerColor):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(innerColor), 0)

def clz_Torappu_RoguelikeTopicCapsuleEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicCapsule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicCapsule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicCapsule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicCapsule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicCapsule
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicCapsule
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicCapsule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicCapsuleStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicCapsuleAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicCapsuleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicCapsuleEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameEndingData_LevelIcon(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameEndingData_LevelIcon()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameEndingData_LevelIcon(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameEndingData_LevelIcon
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameEndingData_LevelIcon
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameEndingData_LevelIcon
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameEndingData_LevelIconStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeGameEndingData_LevelIconAddLevel(builder, level):
    builder.PrependInt32Slot(0, level, 0)

def clz_Torappu_RoguelikeGameEndingData_LevelIconAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameEndingData_LevelIconEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameEndingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameEndingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameEndingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameEndingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameEndingData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def FamilyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameEndingData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def BgId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def Icons(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeGameEndingData_LevelIcon()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def IconsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeGameEndingData
    def IconsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeGameEndingData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameEndingData
    def ChangeEndingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameEndingData
    def BossIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameEndingDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_RoguelikeGameEndingDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameEndingDataAddFamilyId(builder, familyId):
    builder.PrependInt32Slot(1, familyId, 0)

def clz_Torappu_RoguelikeGameEndingDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameEndingDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeGameEndingDataAddBgId(builder, bgId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bgId), 0)

def clz_Torappu_RoguelikeGameEndingDataAddIcons(builder, icons):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(icons), 0)

def clz_Torappu_RoguelikeGameEndingDataStartIconsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeGameEndingDataAddPriority(builder, priority):
    builder.PrependInt32Slot(6, priority, 0)

def clz_Torappu_RoguelikeGameEndingDataAddChangeEndingDesc(builder, changeEndingDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(changeEndingDesc), 0)

def clz_Torappu_RoguelikeGameEndingDataAddBossIconId(builder, bossIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bossIconId), 0)

def clz_Torappu_RoguelikeGameEndingDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameEndingData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameEndingData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameEndingData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameEndingData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameEndingData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameEndingData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameEndingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameEndingDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameEndingDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameEndingDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameEndingDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeBattleSummeryDescriptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeBattleSummeryDescriptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeBattleSummeryDescriptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def RandomDescriptionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def RandomDescriptionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def RandomDescriptionListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeBattleSummeryDescriptionDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeBattleSummeryDescriptionDataAddRandomDescriptionList(builder, randomDescriptionList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(randomDescriptionList), 0)

def clz_Torappu_RoguelikeBattleSummeryDescriptionDataStartRandomDescriptionListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeBattleSummeryDescriptionDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeBattleSummeryDescriptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionDataStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_TipData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TipData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TipData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TipData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TipData
    def Tip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TipData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_TipData
    def Category(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_TipDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_TipDataAddTip(builder, tip):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tip), 0)

def clz_Torappu_TipDataAddWeight(builder, weight):
    builder.PrependFloat32Slot(1, weight, 0.0)

def clz_Torappu_TipDataAddCategory(builder, category):
    builder.PrependInt32Slot(2, category, 0)

def clz_Torappu_TipDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameItemData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def ObtainApproach(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameItemData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameItemData
    def SubType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameItemData
    def Rarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameItemData
    def CanSacrifice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeGameItemData
    def UnlockCondDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameItemDataStart(builder):
    builder.StartObject(13)

def clz_Torappu_RoguelikeGameItemDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeGameItemDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameItemDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeGameItemDataAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_RoguelikeGameItemDataAddObtainApproach(builder, obtainApproach):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(obtainApproach), 0)

def clz_Torappu_RoguelikeGameItemDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeGameItemDataAddType(builder, type):
    builder.PrependInt32Slot(6, type, 0)

def clz_Torappu_RoguelikeGameItemDataAddSubType(builder, subType):
    builder.PrependInt32Slot(7, subType, 0)

def clz_Torappu_RoguelikeGameItemDataAddRarity(builder, rarity):
    builder.PrependInt32Slot(8, rarity, 0)

def clz_Torappu_RoguelikeGameItemDataAddValue(builder, value):
    builder.PrependInt32Slot(9, value, 0)

def clz_Torappu_RoguelikeGameItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(10, sortId, 0)

def clz_Torappu_RoguelikeGameItemDataAddCanSacrifice(builder, canSacrifice):
    builder.PrependBoolSlot(11, canSacrifice, 0)

def clz_Torappu_RoguelikeGameItemDataAddUnlockCondDesc(builder, unlockCondDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(unlockCondDesc), 0)

def clz_Torappu_RoguelikeGameItemDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameItemData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameItemData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameItemDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameItemDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameItemDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeBandRefData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeBandRefData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeBandRefData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeBandRefData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeBandRefData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeBandRefData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeBandRefData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeBandRefData
    def BandLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeBandRefData
    def NormalBandId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeBandRefDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeBandRefDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeBandRefDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeBandRefDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeBandRefDataAddBandLevel(builder, bandLevel):
    builder.PrependInt32Slot(3, bandLevel, 0)

def clz_Torappu_RoguelikeBandRefDataAddNormalBandId(builder, normalBandId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(normalBandId), 0)

def clz_Torappu_RoguelikeBandRefDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeBandRefData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeBandRefData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeBandRefData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeBandRefData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeBandRefData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeBandRefData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeBandRefData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeBandRefDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeBandRefDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeBandRefDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeBandRefDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeEndingDetailText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeEndingDetailText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeEndingDetailText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeEndingDetailText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeEndingDetailText
    def TextId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeEndingDetailText
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeEndingDetailText
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeEndingDetailText
    def ShowType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeEndingDetailText
    def ChoiceSceneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeEndingDetailText
    def ParamList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeEndingDetailText
    def ParamListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeEndingDetailText
    def ParamListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeEndingDetailText
    def OtherPara1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeEndingDetailTextStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeEndingDetailTextAddTextId(builder, textId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(textId), 0)

def clz_Torappu_RoguelikeEndingDetailTextAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def clz_Torappu_RoguelikeEndingDetailTextAddEventType(builder, eventType):
    builder.PrependInt32Slot(2, eventType, 0)

def clz_Torappu_RoguelikeEndingDetailTextAddShowType(builder, showType):
    builder.PrependInt32Slot(3, showType, 0)

def clz_Torappu_RoguelikeEndingDetailTextAddChoiceSceneId(builder, choiceSceneId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(choiceSceneId), 0)

def clz_Torappu_RoguelikeEndingDetailTextAddParamList(builder, paramList):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(paramList), 0)

def clz_Torappu_RoguelikeEndingDetailTextStartParamListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeEndingDetailTextAddOtherPara1(builder, otherPara1):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(otherPara1), 0)

def clz_Torappu_RoguelikeEndingDetailTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeEndingRelicDetailText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeEndingRelicDetailText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeEndingRelicDetailText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeEndingRelicDetailText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeEndingRelicDetailText
    def RelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeEndingRelicDetailText
    def SummaryEventText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeEndingRelicDetailTextStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeEndingRelicDetailTextAddRelicId(builder, relicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicId), 0)

def clz_Torappu_RoguelikeEndingRelicDetailTextAddSummaryEventText(builder, summaryEventText):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEventText), 0)

def clz_Torappu_RoguelikeEndingRelicDetailTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameTreasureData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameTreasureData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameTreasureData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameTreasureData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameTreasureData
    def TreasureId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameTreasureData
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameTreasureData
    def SubIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeGameTreasureData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameTreasureData
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameTreasureDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeGameTreasureDataAddTreasureId(builder, treasureId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(treasureId), 0)

def clz_Torappu_RoguelikeGameTreasureDataAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_RoguelikeGameTreasureDataAddSubIndex(builder, subIndex):
    builder.PrependInt32Slot(2, subIndex, 0)

def clz_Torappu_RoguelikeGameTreasureDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeGameTreasureDataAddUsage(builder, usage):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(usage), 0)

def clz_Torappu_RoguelikeGameTreasureDataEnd(builder):
    return builder.EndObject()



class dict__string__list_clz_Torappu_RoguelikeGameTreasureData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_RoguelikeGameTreasureData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_RoguelikeGameTreasureData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_RoguelikeGameTreasureData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_RoguelikeGameTreasureData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_RoguelikeGameTreasureData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeGameTreasureData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_RoguelikeGameTreasureData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_RoguelikeGameTreasureData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_RoguelikeGameTreasureDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_RoguelikeGameTreasureDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_RoguelikeGameTreasureDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_RoguelikeGameTreasureDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_RoguelikeGameTreasureDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDifficultyUpgradeRelicData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDifficultyUpgradeRelicData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDifficultyUpgradeRelicData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDifficultyUpgradeRelicData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDifficultyUpgradeRelicData
    def RelicId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDifficultyUpgradeRelicData
    def EquivalentGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeDifficultyUpgradeRelicDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicDataAddRelicId(builder, relicId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicId), 0)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicDataAddEquivalentGrade(builder, equivalentGrade):
    builder.PrependInt32Slot(1, equivalentGrade, 0)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def RelicData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeDifficultyUpgradeRelicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def RelicDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def RelicDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataAddRelicData(builder, relicData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(relicData), 0)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataStartRelicDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikePredefinedStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikePredefinedStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikePredefinedStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikePredefinedStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikePredefinedStyleData
    def StyleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikePredefinedStyleData
    def StyleConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikePredefinedStyleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikePredefinedStyleDataAddStyleId(builder, styleId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(styleId), 0)

def clz_Torappu_RoguelikePredefinedStyleDataAddStyleConfig(builder, styleConfig):
    builder.PrependInt32Slot(1, styleConfig, 0)

def clz_Torappu_RoguelikePredefinedStyleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikePredefinedStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikePredefinedStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikePredefinedStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikePredefinedStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikePredefinedStyleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikePredefinedStyleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikePredefinedStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikePredefinedStyleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikePredefinedStyleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikePredefinedStyleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikePredefinedStyleDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_RoguelikeExpStyleConfigParam__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_RoguelikeExpStyleConfigParam__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_RoguelikeExpStyleConfigParam__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_RoguelikeExpStyleConfigParam__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_RoguelikeExpStyleConfigParam__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_RoguelikeExpStyleConfigParam__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_RoguelikeExpStyleConfigParam__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_RoguelikeExpStyleConfigParam__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_RoguelikeExpStyleConfigParam__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_RoguelikeExpStyleConfigParam__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikePredefinedExpStyleConfigData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikePredefinedExpStyleConfigData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikePredefinedExpStyleConfigData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikePredefinedExpStyleConfigData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikePredefinedExpStyleConfigData
    def ParamDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_RoguelikeExpStyleConfigParam__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikePredefinedExpStyleConfigData
    def ParamDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikePredefinedExpStyleConfigData
    def ParamDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikePredefinedExpStyleConfigDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikePredefinedExpStyleConfigDataAddParamDict(builder, paramDict):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(paramDict), 0)

def clz_Torappu_RoguelikePredefinedExpStyleConfigDataStartParamDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikePredefinedExpStyleConfigDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikePredefinedConstStyleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikePredefinedConstStyleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikePredefinedConstStyleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikePredefinedConstStyleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikePredefinedConstStyleData
    def ExpStyleConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikePredefinedExpStyleConfigData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikePredefinedConstStyleDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikePredefinedConstStyleDataAddExpStyleConfig(builder, expStyleConfig):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(expStyleConfig), 0)

def clz_Torappu_RoguelikePredefinedConstStyleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeGameExploreToolData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeGameExploreToolData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeGameExploreToolData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeGameExploreToolData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeGameExploreToolData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameExploreToolData
    def TrapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeGameExploreToolData
    def TrapDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeGameExploreToolDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeGameExploreToolDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeGameExploreToolDataAddTrapId(builder, trapId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trapId), 0)

def clz_Torappu_RoguelikeGameExploreToolDataAddTrapDesc(builder, trapDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(trapDesc), 0)

def clz_Torappu_RoguelikeGameExploreToolDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeGameExploreToolData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeGameExploreToolData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeGameExploreToolData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeGameExploreToolData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeGameExploreToolData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeGameExploreToolData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameExploreToolData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeGameExploreToolDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeGameExploreToolDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeGameExploreToolDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeGameExploreToolDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeRollNodeGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeRollNodeGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeRollNodeGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeRollNodeGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeRollNodeGroupData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeRollNodeGroupDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeRollNodeGroupDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(0, nodeType, 0)

def clz_Torappu_RoguelikeRollNodeGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeRollNodeGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeRollNodeGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeRollNodeGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeRollNodeGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeRollNodeGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeRollNodeGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeRollNodeGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeRollNodeGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeRollNodeGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeRollNodeGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeRollNodeGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeRollNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeRollNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeRollNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeRollNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeRollNodeData
    def ZoneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeRollNodeData
    def Groups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeRollNodeGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeRollNodeData
    def GroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeRollNodeData
    def GroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RoguelikeRollNodeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeRollNodeDataAddZoneId(builder, zoneId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(zoneId), 0)

def clz_Torappu_RoguelikeRollNodeDataAddGroups(builder, groups):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groups), 0)

def clz_Torappu_RoguelikeRollNodeDataStartGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeRollNodeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeRollNodeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeRollNodeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeRollNodeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeRollNodeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeRollNodeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeRollNodeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeRollNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeRollNodeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeRollNodeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeRollNodeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeRollNodeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDetail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDetail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDetail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDetail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDetail
    def Updates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicUpdate()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def UpdatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def UpdatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Enrolls(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicEnroll()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def EnrollsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def EnrollsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Milestones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicBP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def MilestonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def MilestonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def MilestoneUpdates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicMilestoneUpdateData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def MilestoneUpdatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def MilestoneUpdatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def GrandPrizes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicBPGrandPrize()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def GrandPrizesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def GrandPrizesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def MonthMission(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicMonthMission()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def MonthMissionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def MonthMissionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def MonthSquad(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicMonthSquad()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def MonthSquadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def MonthSquadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Challenges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicChallenge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ChallengesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ChallengesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Difficulties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDifficulty()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def DifficultiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def DifficultiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def BankRewards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicBankReward()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def BankRewardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def BankRewardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def ArchiveComp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeArchiveComponentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ArchiveUnlockCond(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeArchiveUnlockCondData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def DetailConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDetailConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def Init(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeGameInitData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def InitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def InitIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Stages(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameStageData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def StagesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def StagesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Zones(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameZoneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ZonesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ZonesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Variation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeZoneVariationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def VariationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def VariationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Traps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameTrapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def TrapsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def TrapsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitTickets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameRecruitTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitTicketsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitTicketsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def UpgradeTickets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameUpgradeTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def UpgradeTicketsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def UpgradeTicketsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def CustomTickets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameCustomTicketData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def CustomTicketsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def CustomTicketsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Relics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameRelicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def RelicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def RelicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def RelicParams(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameRelicParamData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def RelicParamsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def RelicParamsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitGrps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameRecruitGrpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitGrpsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def RecruitGrpsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Choices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameChoiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ChoicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ChoicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def ChoiceScenes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameChoiceSceneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ChoiceScenesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ChoiceScenesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def NodeTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_RoguelikeEventType__clz_Torappu_RoguelikeGameNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def NodeTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def NodeTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def SubTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeGameNodeSubTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def SubTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def SubTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def VariationData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameVariationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def VariationDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def VariationDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def CharBuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameCharBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def CharBuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def CharBuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def SquadBuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameSquadBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def SquadBuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def SquadBuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def TaskData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTaskData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def TaskDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def TaskDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def GameConst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ShopDialogData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeGameShopDialogData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def CapsuleDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicCapsule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def CapsuleDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def CapsuleDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Endings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameEndingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def EndingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def EndingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def BattleSummeryDescriptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_RoguelikeTopicMode__clz_Torappu_RoguelikeBattleSummeryDescriptionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def BattleSummeryDescriptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def BattleSummeryDescriptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def BattleLoadingTips(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TipData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def BattleLoadingTipsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def BattleLoadingTipsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def BandRef(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeBandRefData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def BandRefLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def BandRefIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def EndingDetailList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeEndingDetailText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def EndingDetailListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def EndingDetailListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def EndingRelicDetailList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeEndingRelicDetailText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def EndingRelicDetailListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def EndingRelicDetailListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Treasures(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_RoguelikeGameTreasureData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def TreasuresLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def TreasuresIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def DifficultyUpgradeRelicGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeDifficultyUpgradeRelicGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def DifficultyUpgradeRelicGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def DifficultyUpgradeRelicGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def Styles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikePredefinedStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def StylesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def StylesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def StyleConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikePredefinedConstStyleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ExploreTools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeGameExploreToolData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def ExploreToolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def ExploreToolsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        return o == 0

    # clz_Torappu_RoguelikeTopicDetail
    def RollNodeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeRollNodeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDetail
    def RollNodeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDetail
    def RollNodeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        return o == 0

def clz_Torappu_RoguelikeTopicDetailStart(builder):
    builder.StartObject(48)

def clz_Torappu_RoguelikeTopicDetailAddUpdates(builder, updates):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(updates), 0)

def clz_Torappu_RoguelikeTopicDetailStartUpdatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddEnrolls(builder, enrolls):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(enrolls), 0)

def clz_Torappu_RoguelikeTopicDetailStartEnrollsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddMilestones(builder, milestones):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(milestones), 0)

def clz_Torappu_RoguelikeTopicDetailStartMilestonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddMilestoneUpdates(builder, milestoneUpdates):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(milestoneUpdates), 0)

def clz_Torappu_RoguelikeTopicDetailStartMilestoneUpdatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddGrandPrizes(builder, grandPrizes):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(grandPrizes), 0)

def clz_Torappu_RoguelikeTopicDetailStartGrandPrizesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddMonthMission(builder, monthMission):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(monthMission), 0)

def clz_Torappu_RoguelikeTopicDetailStartMonthMissionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddMonthSquad(builder, monthSquad):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(monthSquad), 0)

def clz_Torappu_RoguelikeTopicDetailStartMonthSquadVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddChallenges(builder, challenges):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(challenges), 0)

def clz_Torappu_RoguelikeTopicDetailStartChallengesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddDifficulties(builder, difficulties):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(difficulties), 0)

def clz_Torappu_RoguelikeTopicDetailStartDifficultiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddBankRewards(builder, bankRewards):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(bankRewards), 0)

def clz_Torappu_RoguelikeTopicDetailStartBankRewardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddArchiveComp(builder, archiveComp):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(archiveComp), 0)

def clz_Torappu_RoguelikeTopicDetailAddArchiveUnlockCond(builder, archiveUnlockCond):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(archiveUnlockCond), 0)

def clz_Torappu_RoguelikeTopicDetailAddDetailConst(builder, detailConst):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(detailConst), 0)

def clz_Torappu_RoguelikeTopicDetailAddInit(builder, init):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(init), 0)

def clz_Torappu_RoguelikeTopicDetailStartInitVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddStages(builder, stages):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(stages), 0)

def clz_Torappu_RoguelikeTopicDetailStartStagesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddZones(builder, zones):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(zones), 0)

def clz_Torappu_RoguelikeTopicDetailStartZonesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddVariation(builder, variation):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(variation), 0)

def clz_Torappu_RoguelikeTopicDetailStartVariationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddTraps(builder, traps):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(traps), 0)

def clz_Torappu_RoguelikeTopicDetailStartTrapsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddRecruitTickets(builder, recruitTickets):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(recruitTickets), 0)

def clz_Torappu_RoguelikeTopicDetailStartRecruitTicketsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddUpgradeTickets(builder, upgradeTickets):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeTickets), 0)

def clz_Torappu_RoguelikeTopicDetailStartUpgradeTicketsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddCustomTickets(builder, customTickets):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(customTickets), 0)

def clz_Torappu_RoguelikeTopicDetailStartCustomTicketsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddRelics(builder, relics):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(relics), 0)

def clz_Torappu_RoguelikeTopicDetailStartRelicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddRelicParams(builder, relicParams):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(relicParams), 0)

def clz_Torappu_RoguelikeTopicDetailStartRelicParamsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddRecruitGrps(builder, recruitGrps):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(recruitGrps), 0)

def clz_Torappu_RoguelikeTopicDetailStartRecruitGrpsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddChoices(builder, choices):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(choices), 0)

def clz_Torappu_RoguelikeTopicDetailStartChoicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddChoiceScenes(builder, choiceScenes):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(choiceScenes), 0)

def clz_Torappu_RoguelikeTopicDetailStartChoiceScenesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddNodeTypeData(builder, nodeTypeData):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(nodeTypeData), 0)

def clz_Torappu_RoguelikeTopicDetailStartNodeTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddSubTypeData(builder, subTypeData):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(subTypeData), 0)

def clz_Torappu_RoguelikeTopicDetailStartSubTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddVariationData(builder, variationData):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(variationData), 0)

def clz_Torappu_RoguelikeTopicDetailStartVariationDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddCharBuffData(builder, charBuffData):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(charBuffData), 0)

def clz_Torappu_RoguelikeTopicDetailStartCharBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddSquadBuffData(builder, squadBuffData):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(squadBuffData), 0)

def clz_Torappu_RoguelikeTopicDetailStartSquadBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddTaskData(builder, taskData):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(taskData), 0)

def clz_Torappu_RoguelikeTopicDetailStartTaskDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddGameConst(builder, gameConst):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(gameConst), 0)

def clz_Torappu_RoguelikeTopicDetailAddShopDialogData(builder, shopDialogData):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(shopDialogData), 0)

def clz_Torappu_RoguelikeTopicDetailAddCapsuleDict(builder, capsuleDict):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(capsuleDict), 0)

def clz_Torappu_RoguelikeTopicDetailStartCapsuleDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddEndings(builder, endings):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(endings), 0)

def clz_Torappu_RoguelikeTopicDetailStartEndingsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddBattleSummeryDescriptions(builder, battleSummeryDescriptions):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(battleSummeryDescriptions), 0)

def clz_Torappu_RoguelikeTopicDetailStartBattleSummeryDescriptionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddBattleLoadingTips(builder, battleLoadingTips):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(battleLoadingTips), 0)

def clz_Torappu_RoguelikeTopicDetailStartBattleLoadingTipsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def clz_Torappu_RoguelikeTopicDetailStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddBandRef(builder, bandRef):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(bandRef), 0)

def clz_Torappu_RoguelikeTopicDetailStartBandRefVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddEndingDetailList(builder, endingDetailList):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(endingDetailList), 0)

def clz_Torappu_RoguelikeTopicDetailStartEndingDetailListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddEndingRelicDetailList(builder, endingRelicDetailList):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(endingRelicDetailList), 0)

def clz_Torappu_RoguelikeTopicDetailStartEndingRelicDetailListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddTreasures(builder, treasures):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(treasures), 0)

def clz_Torappu_RoguelikeTopicDetailStartTreasuresVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddDifficultyUpgradeRelicGroups(builder, difficultyUpgradeRelicGroups):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(difficultyUpgradeRelicGroups), 0)

def clz_Torappu_RoguelikeTopicDetailStartDifficultyUpgradeRelicGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddStyles(builder, styles):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(styles), 0)

def clz_Torappu_RoguelikeTopicDetailStartStylesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddStyleConfig(builder, styleConfig):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(styleConfig), 0)

def clz_Torappu_RoguelikeTopicDetailAddExploreTools(builder, exploreTools):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(exploreTools), 0)

def clz_Torappu_RoguelikeTopicDetailStartExploreToolsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailAddRollNodeData(builder, rollNodeData):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(rollNodeData), 0)

def clz_Torappu_RoguelikeTopicDetailStartRollNodeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDetailEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicDetail(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicDetail()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicDetail(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicDetail
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicDetail
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicDetail
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicDetailStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicDetailAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicDetailAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicDetailEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeSanRangeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeSanRangeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeSanRangeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeSanRangeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeSanRangeData
    def SanMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeSanRangeData
    def DiceGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeSanRangeData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeSanRangeData
    def SanDungeonEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeSanRangeData
    def SanEffectRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeSanRangeData
    def SanEndingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeSanRangeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RoguelikeSanRangeDataAddSanMax(builder, sanMax):
    builder.PrependInt32Slot(0, sanMax, 0)

def clz_Torappu_RoguelikeSanRangeDataAddDiceGroupId(builder, diceGroupId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(diceGroupId), 0)

def clz_Torappu_RoguelikeSanRangeDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeSanRangeDataAddSanDungeonEffect(builder, sanDungeonEffect):
    builder.PrependInt32Slot(3, sanDungeonEffect, 0)

def clz_Torappu_RoguelikeSanRangeDataAddSanEffectRank(builder, sanEffectRank):
    builder.PrependInt32Slot(4, sanEffectRank, 0)

def clz_Torappu_RoguelikeSanRangeDataAddSanEndingDesc(builder, sanEndingDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(sanEndingDesc), 0)

def clz_Torappu_RoguelikeSanRangeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeSanCheckConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeSanCheckConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeSanCheckConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeSanCheckConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeSanCheckConsts
    def SanDecreaseToast(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeSanCheckConstsStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeSanCheckConstsAddSanDecreaseToast(builder, sanDecreaseToast):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sanDecreaseToast), 0)

def clz_Torappu_RoguelikeSanCheckConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeSanCheckModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeSanCheckModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeSanCheckModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeSanCheckModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeSanCheckModuleData
    def SanRanges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeSanRangeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeSanCheckModuleData
    def SanRangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeSanCheckModuleData
    def SanRangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeSanCheckModuleData
    def ModuleConsts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeSanCheckConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeSanCheckModuleDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeSanCheckModuleDataAddSanRanges(builder, sanRanges):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(sanRanges), 0)

def clz_Torappu_RoguelikeSanCheckModuleDataStartSanRangesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeSanCheckModuleDataAddModuleConsts(builder, moduleConsts):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(moduleConsts), 0)

def clz_Torappu_RoguelikeSanCheckModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDiceData
    def DiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceData
    def IsUpgradeDice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDiceData
    def UpgradeDiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceData
    def DiceFaceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDiceData
    def BattleDiceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeDiceDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RoguelikeDiceDataAddDiceId(builder, diceId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(diceId), 0)

def clz_Torappu_RoguelikeDiceDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_RoguelikeDiceDataAddIsUpgradeDice(builder, isUpgradeDice):
    builder.PrependInt32Slot(2, isUpgradeDice, 0)

def clz_Torappu_RoguelikeDiceDataAddUpgradeDiceId(builder, upgradeDiceId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeDiceId), 0)

def clz_Torappu_RoguelikeDiceDataAddDiceFaceCount(builder, diceFaceCount):
    builder.PrependInt32Slot(4, diceFaceCount, 0)

def clz_Torappu_RoguelikeDiceDataAddBattleDiceId(builder, battleDiceId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(battleDiceId), 0)

def clz_Torappu_RoguelikeDiceDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeDiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeDiceData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeDiceData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeDiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeDiceData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeDiceData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeDiceDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeDiceDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeDiceDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeDiceDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDiceRuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDiceRuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDiceRuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDiceRuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDiceRuleData
    def DicePointMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDiceRuleData
    def DiceResultClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDiceRuleData
    def DiceGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleData
    def DiceEventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleData
    def ResultDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleData
    def ShowType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDiceRuleData
    def CanReroll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeDiceRuleData
    def DiceEndingScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleData
    def DiceEndingDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleData
    def Sound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeDiceRuleDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeDiceRuleDataAddDicePointMax(builder, dicePointMax):
    builder.PrependInt32Slot(0, dicePointMax, 0)

def clz_Torappu_RoguelikeDiceRuleDataAddDiceResultClass(builder, diceResultClass):
    builder.PrependInt32Slot(1, diceResultClass, 0)

def clz_Torappu_RoguelikeDiceRuleDataAddDiceGroupId(builder, diceGroupId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(diceGroupId), 0)

def clz_Torappu_RoguelikeDiceRuleDataAddDiceEventId(builder, diceEventId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(diceEventId), 0)

def clz_Torappu_RoguelikeDiceRuleDataAddResultDesc(builder, resultDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resultDesc), 0)

def clz_Torappu_RoguelikeDiceRuleDataAddShowType(builder, showType):
    builder.PrependInt32Slot(5, showType, 0)

def clz_Torappu_RoguelikeDiceRuleDataAddCanReroll(builder, canReroll):
    builder.PrependBoolSlot(6, canReroll, 0)

def clz_Torappu_RoguelikeDiceRuleDataAddDiceEndingScene(builder, diceEndingScene):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(diceEndingScene), 0)

def clz_Torappu_RoguelikeDiceRuleDataAddDiceEndingDesc(builder, diceEndingDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(diceEndingDesc), 0)

def clz_Torappu_RoguelikeDiceRuleDataAddSound(builder, sound):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sound), 0)

def clz_Torappu_RoguelikeDiceRuleDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeDiceRuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeDiceRuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeDiceRuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeDiceRuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeDiceRuleData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeDiceRuleData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDiceRuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeDiceRuleDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeDiceRuleDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeDiceRuleDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeDiceRuleDataEnd(builder):
    return builder.EndObject()



class dict__string__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__string__stringStart(builder):
    builder.StartObject(2)

def dict__string__stringAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDiceRuleGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDiceRuleGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDiceRuleGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDiceRuleGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDiceRuleGroupData
    def RuleGroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDiceRuleGroupData
    def MinGoodNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeDiceRuleGroupDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeDiceRuleGroupDataAddRuleGroupId(builder, ruleGroupId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(ruleGroupId), 0)

def clz_Torappu_RoguelikeDiceRuleGroupDataAddMinGoodNum(builder, minGoodNum):
    builder.PrependInt32Slot(1, minGoodNum, 0)

def clz_Torappu_RoguelikeDiceRuleGroupDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeDiceRuleGroupData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeDiceRuleGroupData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeDiceRuleGroupData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeDiceRuleGroupData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeDiceRuleGroupData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeDiceRuleGroupData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDiceRuleGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeDiceRuleGroupDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDicePredefineData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDicePredefineData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDicePredefineData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDicePredefineData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDicePredefineData
    def ModeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDicePredefineData
    def ModeGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDicePredefineData
    def PredefinedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDicePredefineData
    def InitialDiceCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeDicePredefineDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeDicePredefineDataAddModeId(builder, modeId):
    builder.PrependInt32Slot(0, modeId, 0)

def clz_Torappu_RoguelikeDicePredefineDataAddModeGrade(builder, modeGrade):
    builder.PrependInt32Slot(1, modeGrade, 0)

def clz_Torappu_RoguelikeDicePredefineDataAddPredefinedId(builder, predefinedId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(predefinedId), 0)

def clz_Torappu_RoguelikeDicePredefineDataAddInitialDiceCount(builder, initialDiceCount):
    builder.PrependInt32Slot(3, initialDiceCount, 0)

def clz_Torappu_RoguelikeDicePredefineDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDiceModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDiceModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDiceModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDiceModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDiceModuleData
    def Dice(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeDiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceEvents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeDiceRuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceEventsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceEventsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceChoices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceChoicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceChoicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceRuleGroups(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeDiceRuleGroupData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceRuleGroupsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DiceRuleGroupsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DicePredefines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeDicePredefineData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDiceModuleData
    def DicePredefinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDiceModuleData
    def DicePredefinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_RoguelikeDiceModuleDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeDiceModuleDataAddDice(builder, dice):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dice), 0)

def clz_Torappu_RoguelikeDiceModuleDataStartDiceVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDiceModuleDataAddDiceEvents(builder, diceEvents):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(diceEvents), 0)

def clz_Torappu_RoguelikeDiceModuleDataStartDiceEventsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDiceModuleDataAddDiceChoices(builder, diceChoices):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(diceChoices), 0)

def clz_Torappu_RoguelikeDiceModuleDataStartDiceChoicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDiceModuleDataAddDiceRuleGroups(builder, diceRuleGroups):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(diceRuleGroups), 0)

def clz_Torappu_RoguelikeDiceModuleDataStartDiceRuleGroupsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDiceModuleDataAddDicePredefines(builder, dicePredefines):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(dicePredefines), 0)

def clz_Torappu_RoguelikeDiceModuleDataStartDicePredefinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDiceModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChaosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChaosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChaosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChaosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChaosData
    def ChaosId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChaosData
    def NextChaosId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def PrevChaosId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def Sound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeChaosDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeChaosDataAddChaosId(builder, chaosId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chaosId), 0)

def clz_Torappu_RoguelikeChaosDataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_RoguelikeChaosDataAddNextChaosId(builder, nextChaosId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nextChaosId), 0)

def clz_Torappu_RoguelikeChaosDataAddPrevChaosId(builder, prevChaosId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(prevChaosId), 0)

def clz_Torappu_RoguelikeChaosDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeChaosDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeChaosDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_RoguelikeChaosDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeChaosDataAddSound(builder, sound):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sound), 0)

def clz_Torappu_RoguelikeChaosDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(9, sortId, 0)

def clz_Torappu_RoguelikeChaosDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeChaosData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeChaosData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeChaosData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeChaosData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeChaosData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeChaosData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeChaosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeChaosDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeChaosDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeChaosDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeChaosDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChaosRangeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChaosRangeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChaosRangeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChaosRangeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChaosRangeData
    def ChaosMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChaosRangeData
    def ChaosDungeonEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeChaosRangeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeChaosRangeDataAddChaosMax(builder, chaosMax):
    builder.PrependInt32Slot(0, chaosMax, 0)

def clz_Torappu_RoguelikeChaosRangeDataAddChaosDungeonEffect(builder, chaosDungeonEffect):
    builder.PrependInt32Slot(1, chaosDungeonEffect, 0)

def clz_Torappu_RoguelikeChaosRangeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChaosPredefineLevelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChaosPredefineLevelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChaosPredefineLevelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def ChaosLevelBeginNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def ChaosLevelEndNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeChaosPredefineLevelInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeChaosPredefineLevelInfoAddChaosLevelBeginNum(builder, chaosLevelBeginNum):
    builder.PrependInt32Slot(0, chaosLevelBeginNum, 0)

def clz_Torappu_RoguelikeChaosPredefineLevelInfoAddChaosLevelEndNum(builder, chaosLevelEndNum):
    builder.PrependInt32Slot(1, chaosLevelEndNum, 0)

def clz_Torappu_RoguelikeChaosPredefineLevelInfoEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeChaosPredefineLevelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoEnd(builder):
    return builder.EndObject()



class dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoStart(builder):
    builder.StartObject(2)

def dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChaosModuleConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChaosModuleConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChaosModuleConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChaosModuleConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChaosModuleConsts
    def MaxChaosLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChaosModuleConsts
    def MaxChaosSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeChaosModuleConsts
    def ChaosNotMaxDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosModuleConsts
    def ChaosMaxDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeChaosModuleConsts
    def ChaosPredictDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeChaosModuleConstsStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeChaosModuleConstsAddMaxChaosLevel(builder, maxChaosLevel):
    builder.PrependInt32Slot(0, maxChaosLevel, 0)

def clz_Torappu_RoguelikeChaosModuleConstsAddMaxChaosSlot(builder, maxChaosSlot):
    builder.PrependInt32Slot(1, maxChaosSlot, 0)

def clz_Torappu_RoguelikeChaosModuleConstsAddChaosNotMaxDescription(builder, chaosNotMaxDescription):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(chaosNotMaxDescription), 0)

def clz_Torappu_RoguelikeChaosModuleConstsAddChaosMaxDescription(builder, chaosMaxDescription):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chaosMaxDescription), 0)

def clz_Torappu_RoguelikeChaosModuleConstsAddChaosPredictDescription(builder, chaosPredictDescription):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(chaosPredictDescription), 0)

def clz_Torappu_RoguelikeChaosModuleConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeChaosModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeChaosModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeChaosModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeChaosModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeChaosData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosRanges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeChaosRangeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosRangesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeChaosModuleData
    def ChaosRangesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeChaosModuleData
    def LevelInfoDict(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_dict__int__clz_Torappu_RoguelikeChaosPredefineLevelInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeChaosModuleData
    def LevelInfoDictLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeChaosModuleData
    def LevelInfoDictIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeChaosModuleData
    def ModuleConsts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeChaosModuleConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeChaosModuleDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeChaosModuleDataAddChaosDatas(builder, chaosDatas):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(chaosDatas), 0)

def clz_Torappu_RoguelikeChaosModuleDataStartChaosDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeChaosModuleDataAddChaosRanges(builder, chaosRanges):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(chaosRanges), 0)

def clz_Torappu_RoguelikeChaosModuleDataStartChaosRangesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeChaosModuleDataAddLevelInfoDict(builder, levelInfoDict):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(levelInfoDict), 0)

def clz_Torappu_RoguelikeChaosModuleDataStartLevelInfoDictVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeChaosModuleDataAddModuleConsts(builder, moduleConsts):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(moduleConsts), 0)

def clz_Torappu_RoguelikeChaosModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTotemLinkedNodeTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTotemLinkedNodeTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTotemLinkedNodeTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def EffectiveNodeTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def EffectiveNodeTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def EffectiveNodeTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def EffectiveNodeTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def BlurNodeTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def BlurNodeTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def BlurNodeTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTotemLinkedNodeTypeData
    def BlurNodeTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataAddEffectiveNodeTypes(builder, effectiveNodeTypes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(effectiveNodeTypes), 0)

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataStartEffectiveNodeTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataAddBlurNodeTypes(builder, blurNodeTypes):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blurNodeTypes), 0)

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataStartBlurNodeTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTotemLinkedNodeTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTotemBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTotemBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTotemBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTotemBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTotemBuffData
    def TotemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTotemBuffData
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTotemBuffData
    def Rhythm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def NormalDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def SynergyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def ArchiveDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def CombineGroupName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def BgIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def IsManual(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTotemBuffData
    def LinkedNodeTypeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemLinkedNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTotemBuffData
    def DistanceMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTotemBuffData
    def DistanceMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTotemBuffData
    def VertPassable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTotemBuffData
    def ExpandLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTotemBuffData
    def OnlyForVert(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeTotemBuffData
    def PortalLinkedNodeTypeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemLinkedNodeTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeTotemBuffDataStart(builder):
    builder.StartObject(17)

def clz_Torappu_RoguelikeTotemBuffDataAddTotemId(builder, totemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(totemId), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddColor(builder, color):
    builder.PrependInt32Slot(1, color, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddPos(builder, pos):
    builder.PrependInt32Slot(2, pos, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddRhythm(builder, rhythm):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rhythm), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddNormalDesc(builder, normalDesc):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(normalDesc), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddSynergyDesc(builder, synergyDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(synergyDesc), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddArchiveDesc(builder, archiveDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(archiveDesc), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddCombineGroupName(builder, combineGroupName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(combineGroupName), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddBgIconId(builder, bgIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(bgIconId), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddIsManual(builder, isManual):
    builder.PrependBoolSlot(9, isManual, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddLinkedNodeTypeData(builder, linkedNodeTypeData):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(linkedNodeTypeData), 0)

def clz_Torappu_RoguelikeTotemBuffDataAddDistanceMin(builder, distanceMin):
    builder.PrependInt32Slot(11, distanceMin, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddDistanceMax(builder, distanceMax):
    builder.PrependInt32Slot(12, distanceMax, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddVertPassable(builder, vertPassable):
    builder.PrependBoolSlot(13, vertPassable, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddExpandLength(builder, expandLength):
    builder.PrependInt32Slot(14, expandLength, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddOnlyForVert(builder, onlyForVert):
    builder.PrependBoolSlot(15, onlyForVert, 0)

def clz_Torappu_RoguelikeTotemBuffDataAddPortalLinkedNodeTypeData(builder, portalLinkedNodeTypeData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(portalLinkedNodeTypeData), 0)

def clz_Torappu_RoguelikeTotemBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTotemBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTotemBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTotemBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTotemBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTotemBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTotemBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTotemBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTotemBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTotemBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTotemBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTotemSubBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTotemSubBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTotemSubBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTotemSubBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTotemSubBuffData
    def SubBuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemSubBuffData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemSubBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemSubBuffData
    def CombinedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemSubBuffData
    def Info(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTotemSubBuffDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTotemSubBuffDataAddSubBuffId(builder, subBuffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(subBuffId), 0)

def clz_Torappu_RoguelikeTotemSubBuffDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeTotemSubBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeTotemSubBuffDataAddCombinedDesc(builder, combinedDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(combinedDesc), 0)

def clz_Torappu_RoguelikeTotemSubBuffDataAddInfo(builder, info):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(info), 0)

def clz_Torappu_RoguelikeTotemSubBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTotemSubBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTotemSubBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTotemSubBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTotemSubBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTotemSubBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTotemSubBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemSubBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTotemSubBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTotemSubBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTotemSubBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTotemSubBuffDataEnd(builder):
    return builder.EndObject()



class dict__enum__Torappu_RoguelikeTotemColorType__string(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__enum__Torappu_RoguelikeTotemColorType__string()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__enum__Torappu_RoguelikeTotemColorType__string(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__enum__Torappu_RoguelikeTotemColorType__string
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__enum__Torappu_RoguelikeTotemColorType__string
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__enum__Torappu_RoguelikeTotemColorType__string
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def dict__enum__Torappu_RoguelikeTotemColorType__stringStart(builder):
    builder.StartObject(2)

def dict__enum__Torappu_RoguelikeTotemColorType__stringAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__enum__Torappu_RoguelikeTotemColorType__stringAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__enum__Torappu_RoguelikeTotemColorType__stringEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTotemModuleConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTotemModuleConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTotemModuleConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTotemModuleConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTotemModuleConsts
    def TotemPredictDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemModuleConsts
    def ColorCombineDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__enum__Torappu_RoguelikeTotemColorType__string()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTotemModuleConsts
    def ColorCombineDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTotemModuleConsts
    def ColorCombineDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeTotemModuleConsts
    def BossCombineDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemModuleConsts
    def BattleNoPredictDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTotemModuleConsts
    def ShopNoGoodsDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTotemModuleConstsStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTotemModuleConstsAddTotemPredictDescription(builder, totemPredictDescription):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(totemPredictDescription), 0)

def clz_Torappu_RoguelikeTotemModuleConstsAddColorCombineDesc(builder, colorCombineDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(colorCombineDesc), 0)

def clz_Torappu_RoguelikeTotemModuleConstsStartColorCombineDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTotemModuleConstsAddBossCombineDesc(builder, bossCombineDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bossCombineDesc), 0)

def clz_Torappu_RoguelikeTotemModuleConstsAddBattleNoPredictDescription(builder, battleNoPredictDescription):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(battleNoPredictDescription), 0)

def clz_Torappu_RoguelikeTotemModuleConstsAddShopNoGoodsDescription(builder, shopNoGoodsDescription):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(shopNoGoodsDescription), 0)

def clz_Torappu_RoguelikeTotemModuleConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTotemBuffModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTotemBuffModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTotemBuffModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTotemBuffModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def TotemBuffDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTotemBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def TotemBuffDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def TotemBuffDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def SubBuffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTotemSubBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def SubBuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def SubBuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeTotemBuffModuleData
    def ModuleConsts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemModuleConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeTotemBuffModuleDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeTotemBuffModuleDataAddTotemBuffDatas(builder, totemBuffDatas):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(totemBuffDatas), 0)

def clz_Torappu_RoguelikeTotemBuffModuleDataStartTotemBuffDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTotemBuffModuleDataAddSubBuffs(builder, subBuffs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subBuffs), 0)

def clz_Torappu_RoguelikeTotemBuffModuleDataStartSubBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTotemBuffModuleDataAddModuleConsts(builder, moduleConsts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(moduleConsts), 0)

def clz_Torappu_RoguelikeTotemBuffModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeVisionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeVisionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeVisionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeVisionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeVisionData
    def SightNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeVisionData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeVisionData
    def CanForesee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RoguelikeVisionData
    def DividedDis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeVisionData
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionData
    def Clr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionData
    def Desc1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionData
    def Desc2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionData
    def Icon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeVisionDataStart(builder):
    builder.StartObject(9)

def clz_Torappu_RoguelikeVisionDataAddSightNum(builder, sightNum):
    builder.PrependInt32Slot(0, sightNum, 0)

def clz_Torappu_RoguelikeVisionDataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_RoguelikeVisionDataAddCanForesee(builder, canForesee):
    builder.PrependBoolSlot(2, canForesee, 0)

def clz_Torappu_RoguelikeVisionDataAddDividedDis(builder, dividedDis):
    builder.PrependInt32Slot(3, dividedDis, 0)

def clz_Torappu_RoguelikeVisionDataAddStatus(builder, status):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(status), 0)

def clz_Torappu_RoguelikeVisionDataAddClr(builder, clr):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(clr), 0)

def clz_Torappu_RoguelikeVisionDataAddDesc1(builder, desc1):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(desc1), 0)

def clz_Torappu_RoguelikeVisionDataAddDesc2(builder, desc2):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(desc2), 0)

def clz_Torappu_RoguelikeVisionDataAddIcon(builder, icon):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(icon), 0)

def clz_Torappu_RoguelikeVisionDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_RoguelikeVisionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_RoguelikeVisionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_RoguelikeVisionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_RoguelikeVisionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_RoguelikeVisionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_RoguelikeVisionData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeVisionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_RoguelikeVisionDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_RoguelikeVisionDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_RoguelikeVisionDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_RoguelikeVisionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigAddValue(builder, value):
    builder.PrependInt32Slot(0, value, 0)

def clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfigEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeVisionModuleConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeVisionModuleConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeVisionModuleConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeVisionModuleConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeVisionModuleConsts
    def MaxVision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeVisionModuleConsts
    def TotemBottomDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionModuleConsts
    def ChestBottomDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeVisionModuleConsts
    def GoodsBottomDescription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeVisionModuleConstsStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeVisionModuleConstsAddMaxVision(builder, maxVision):
    builder.PrependInt32Slot(0, maxVision, 0)

def clz_Torappu_RoguelikeVisionModuleConstsAddTotemBottomDescription(builder, totemBottomDescription):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(totemBottomDescription), 0)

def clz_Torappu_RoguelikeVisionModuleConstsAddChestBottomDescription(builder, chestBottomDescription):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(chestBottomDescription), 0)

def clz_Torappu_RoguelikeVisionModuleConstsAddGoodsBottomDescription(builder, goodsBottomDescription):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(goodsBottomDescription), 0)

def clz_Torappu_RoguelikeVisionModuleConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeVisionModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeVisionModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeVisionModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeVisionModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionDatas(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeVisionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionDatasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionDatasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionChoices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeVisionModuleData_VisionChoiceConfig()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionChoicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeVisionModuleData
    def VisionChoicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeVisionModuleData
    def ModuleConsts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeVisionModuleConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeVisionModuleDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeVisionModuleDataAddVisionDatas(builder, visionDatas):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(visionDatas), 0)

def clz_Torappu_RoguelikeVisionModuleDataStartVisionDatasVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeVisionModuleDataAddVisionChoices(builder, visionChoices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(visionChoices), 0)

def clz_Torappu_RoguelikeVisionModuleDataStartVisionChoicesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeVisionModuleDataAddModuleConsts(builder, moduleConsts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(moduleConsts), 0)

def clz_Torappu_RoguelikeVisionModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeFragmentDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeFragmentDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeFragmentDataAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def clz_Torappu_RoguelikeFragmentDataAddValue(builder, value):
    builder.PrependInt32Slot(2, value, 0)

def clz_Torappu_RoguelikeFragmentDataAddWeight(builder, weight):
    builder.PrependInt32Slot(3, weight, 0)

def clz_Torappu_RoguelikeFragmentDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeFragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeFragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeFragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeFragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeFragmentData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeFragmentData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeFragmentDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeFragmentDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeFragmentDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeFragmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentTypeData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentTypeData
    def TypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentTypeData
    def TypeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentTypeData
    def TypeIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeFragmentTypeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeFragmentTypeDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_RoguelikeFragmentTypeDataAddTypeName(builder, typeName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(typeName), 0)

def clz_Torappu_RoguelikeFragmentTypeDataAddTypeDesc(builder, typeDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(typeDesc), 0)

def clz_Torappu_RoguelikeFragmentTypeDataAddTypeIconId(builder, typeIconId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(typeIconId), 0)

def clz_Torappu_RoguelikeFragmentTypeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeFragmentTypeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeFragmentTypeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeFragmentTypeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeFragmentTypeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeFragmentTypeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeFragmentTypeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeFragmentTypeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeFragmentTypeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeFragmentTypeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeFragmentTypeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentModuleConsts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentModuleConsts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentModuleConsts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentModuleConsts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def WeightStatusSafeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def WeightStatusLimitDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def WeightStatusOverweightDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def CharWeightSlot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def LimitWeightThresholdValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def OverWeightThresholdValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def MaxAlchemyField(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def MaxAlchemyCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def FragmentBagWeightLimitTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def FragmentBagWeightOverWeightTips(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentModuleConsts
    def WeightUpgradeToastFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeFragmentModuleConstsStart(builder):
    builder.StartObject(11)

def clz_Torappu_RoguelikeFragmentModuleConstsAddWeightStatusSafeDesc(builder, weightStatusSafeDesc):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weightStatusSafeDesc), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddWeightStatusLimitDesc(builder, weightStatusLimitDesc):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(weightStatusLimitDesc), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddWeightStatusOverweightDesc(builder, weightStatusOverweightDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(weightStatusOverweightDesc), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddCharWeightSlot(builder, charWeightSlot):
    builder.PrependInt32Slot(3, charWeightSlot, 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddLimitWeightThresholdValue(builder, limitWeightThresholdValue):
    builder.PrependInt32Slot(4, limitWeightThresholdValue, 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddOverWeightThresholdValue(builder, overWeightThresholdValue):
    builder.PrependInt32Slot(5, overWeightThresholdValue, 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddMaxAlchemyField(builder, maxAlchemyField):
    builder.PrependInt32Slot(6, maxAlchemyField, 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddMaxAlchemyCount(builder, maxAlchemyCount):
    builder.PrependInt32Slot(7, maxAlchemyCount, 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddFragmentBagWeightLimitTips(builder, fragmentBagWeightLimitTips):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentBagWeightLimitTips), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddFragmentBagWeightOverWeightTips(builder, fragmentBagWeightOverWeightTips):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentBagWeightOverWeightTips), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsAddWeightUpgradeToastFormat(builder, weightUpgradeToastFormat):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(weightUpgradeToastFormat), 0)

def clz_Torappu_RoguelikeFragmentModuleConstsEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentBuffData
    def ItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeFragmentBuffData
    def MaskType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeFragmentBuffData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeFragmentBuffDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeFragmentBuffDataAddItemId(builder, itemId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(itemId), 0)

def clz_Torappu_RoguelikeFragmentBuffDataAddMaskType(builder, maskType):
    builder.PrependInt32Slot(1, maskType, 0)

def clz_Torappu_RoguelikeFragmentBuffDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeFragmentBuffDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeFragmentBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeFragmentBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeFragmentBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeFragmentBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeFragmentBuffData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeFragmentBuffData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeFragmentBuffDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeFragmentBuffDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeFragmentBuffDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeFragmentBuffDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeAlchemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeAlchemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeAlchemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeAlchemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeAlchemyData
    def FragmentTypeList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeAlchemyData
    def FragmentTypeListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeAlchemyData
    def FragmentTypeListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeAlchemyData
    def FragmentTypeListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeAlchemyData
    def FragmentSquareSum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeAlchemyData
    def PoolRarity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeAlchemyData
    def RelicProp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RoguelikeAlchemyData
    def ShieldProp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RoguelikeAlchemyData
    def PopulationProp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_RoguelikeAlchemyDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RoguelikeAlchemyDataAddFragmentTypeList(builder, fragmentTypeList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentTypeList), 0)

def clz_Torappu_RoguelikeAlchemyDataStartFragmentTypeListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeAlchemyDataAddFragmentSquareSum(builder, fragmentSquareSum):
    builder.PrependInt32Slot(1, fragmentSquareSum, 0)

def clz_Torappu_RoguelikeAlchemyDataAddPoolRarity(builder, poolRarity):
    builder.PrependInt32Slot(2, poolRarity, 0)

def clz_Torappu_RoguelikeAlchemyDataAddRelicProp(builder, relicProp):
    builder.PrependFloat32Slot(3, relicProp, 0.0)

def clz_Torappu_RoguelikeAlchemyDataAddShieldProp(builder, shieldProp):
    builder.PrependFloat32Slot(4, shieldProp, 0.0)

def clz_Torappu_RoguelikeAlchemyDataAddPopulationProp(builder, populationProp):
    builder.PrependFloat32Slot(5, populationProp, 0.0)

def clz_Torappu_RoguelikeAlchemyDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeAlchemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeAlchemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeAlchemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeAlchemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeAlchemyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeAlchemyData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeAlchemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeAlchemyDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeAlchemyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeAlchemyDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeAlchemyDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeAlchemyFormulationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeAlchemyFormulationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeAlchemyFormulationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeAlchemyFormulationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def FragmentIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def FragmentIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def FragmentIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def RewardId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def RewardCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeAlchemyFormulationData
    def RewardItemType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeAlchemyFormulationDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeAlchemyFormulationDataAddFragmentIds(builder, fragmentIds):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentIds), 0)

def clz_Torappu_RoguelikeAlchemyFormulationDataStartFragmentIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeAlchemyFormulationDataAddRewardId(builder, rewardId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rewardId), 0)

def clz_Torappu_RoguelikeAlchemyFormulationDataAddRewardCount(builder, rewardCount):
    builder.PrependInt32Slot(2, rewardCount, 0)

def clz_Torappu_RoguelikeAlchemyFormulationDataAddRewardItemType(builder, rewardItemType):
    builder.PrependInt32Slot(3, rewardItemType, 0)

def clz_Torappu_RoguelikeAlchemyFormulationDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeAlchemyFormulationData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeAlchemyFormulationData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeAlchemyFormulationData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeAlchemyFormulationData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeAlchemyFormulationData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeAlchemyFormulationData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeAlchemyFormulationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeAlchemyFormulationDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeAlchemyFormulationDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeAlchemyFormulationDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeAlchemyFormulationDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentLevelRelatedData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentLevelRelatedData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentLevelRelatedData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentLevelRelatedData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentLevelRelatedData
    def WeightUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeFragmentLevelRelatedDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeFragmentLevelRelatedDataAddWeightUp(builder, weightUp):
    builder.PrependInt32Slot(0, weightUp, 0)

def clz_Torappu_RoguelikeFragmentLevelRelatedDataEnd(builder):
    return builder.EndObject()



class dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentLevelRelatedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedDataStart(builder):
    builder.StartObject(2)

def dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedDataAddKey(builder, key):
    builder.PrependInt32Slot(0, key, 0)

def dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeFragmentModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeFragmentModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeFragmentModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeFragmentModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeFragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentTypeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeFragmentTypeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentTypeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentTypeDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def ModuleConsts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentModuleConsts()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentBuffData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeFragmentBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentBuffDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentBuffDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeAlchemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyFormulaData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeAlchemyFormulationData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyFormulaDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def AlchemyFormulaDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentLevelData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__int__clz_Torappu_RoguelikeFragmentLevelRelatedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentLevelDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeFragmentModuleData
    def FragmentLevelDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_RoguelikeFragmentModuleDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikeFragmentModuleDataAddFragmentData(builder, fragmentData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartFragmentDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataAddFragmentTypeData(builder, fragmentTypeData):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentTypeData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartFragmentTypeDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataAddModuleConsts(builder, moduleConsts):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(moduleConsts), 0)

def clz_Torappu_RoguelikeFragmentModuleDataAddFragmentBuffData(builder, fragmentBuffData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentBuffData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartFragmentBuffDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataAddAlchemyData(builder, alchemyData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(alchemyData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartAlchemyDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataAddAlchemyFormulaData(builder, alchemyFormulaData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(alchemyFormulaData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartAlchemyFormulaDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataAddFragmentLevelData(builder, fragmentLevelData):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fragmentLevelData), 0)

def clz_Torappu_RoguelikeFragmentModuleDataStartFragmentLevelDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeFragmentModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDisasterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDisasterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDisasterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDisasterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDisasterData
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def IconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def ToastIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeDisasterData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def LevelName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def FunctionDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeDisasterData
    def Sound(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeDisasterDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeDisasterDataAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_RoguelikeDisasterDataAddIconId(builder, iconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iconId), 0)

def clz_Torappu_RoguelikeDisasterDataAddToastIconId(builder, toastIconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(toastIconId), 0)

def clz_Torappu_RoguelikeDisasterDataAddLevel(builder, level):
    builder.PrependInt32Slot(3, level, 0)

def clz_Torappu_RoguelikeDisasterDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_RoguelikeDisasterDataAddLevelName(builder, levelName):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(levelName), 0)

def clz_Torappu_RoguelikeDisasterDataAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def clz_Torappu_RoguelikeDisasterDataAddFunctionDesc(builder, functionDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(functionDesc), 0)

def clz_Torappu_RoguelikeDisasterDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeDisasterDataAddSound(builder, sound):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sound), 0)

def clz_Torappu_RoguelikeDisasterDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeDisasterData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeDisasterData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeDisasterData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeDisasterData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeDisasterData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeDisasterData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDisasterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeDisasterDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeDisasterDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeDisasterDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeDisasterDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeDisasterModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeDisasterModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeDisasterModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeDisasterModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeDisasterModuleData
    def DisasterData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeDisasterData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeDisasterModuleData
    def DisasterDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeDisasterModuleData
    def DisasterDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeDisasterModuleDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeDisasterModuleDataAddDisasterData(builder, disasterData):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(disasterData), 0)

def clz_Torappu_RoguelikeDisasterModuleDataStartDisasterDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeDisasterModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikePermNodeUpgradeItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikePermNodeUpgradeItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikePermNodeUpgradeItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def UpgradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def NodeLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def CostItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def CostItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikePermNodeUpgradeItemData
    def NodeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikePermNodeUpgradeItemDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddUpgradeId(builder, upgradeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeId), 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddNodeLevel(builder, nodeLevel):
    builder.PrependInt32Slot(2, nodeLevel, 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddCostItemId(builder, costItemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(costItemId), 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddCostItemCount(builder, costItemCount):
    builder.PrependInt32Slot(4, costItemCount, 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataAddNodeName(builder, nodeName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(nodeName), 0)

def clz_Torappu_RoguelikePermNodeUpgradeItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTempNodeUpgradeItemData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTempNodeUpgradeItemData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTempNodeUpgradeItemData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def UpgradeId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def CostItemId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def CostItemCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTempNodeUpgradeItemData
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddUpgradeId(builder, upgradeId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(upgradeId), 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddCostItemId(builder, costItemId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(costItemId), 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddCostItemCount(builder, costItemCount):
    builder.PrependInt32Slot(4, costItemCount, 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataAddDesc(builder, desc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)

def clz_Torappu_RoguelikeTempNodeUpgradeItemDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeNodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeNodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeNodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeNodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeNodeUpgradeData
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeNodeUpgradeData
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeNodeUpgradeData
    def PermItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikePermNodeUpgradeItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeNodeUpgradeData
    def PermItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeNodeUpgradeData
    def PermItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeNodeUpgradeData
    def TempItemList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTempNodeUpgradeItemData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeNodeUpgradeData
    def TempItemListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeNodeUpgradeData
    def TempItemListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_RoguelikeNodeUpgradeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeNodeUpgradeDataAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(0, nodeType, 0)

def clz_Torappu_RoguelikeNodeUpgradeDataAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_RoguelikeNodeUpgradeDataAddPermItemList(builder, permItemList):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(permItemList), 0)

def clz_Torappu_RoguelikeNodeUpgradeDataStartPermItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeNodeUpgradeDataAddTempItemList(builder, tempItemList):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tempItemList), 0)

def clz_Torappu_RoguelikeNodeUpgradeDataStartTempItemListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeNodeUpgradeDataEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeNodeUpgradeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeNodeUpgradeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeNodeUpgradeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeNodeUpgradeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeNodeUpgradeData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeNodeUpgradeData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeNodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeNodeUpgradeDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeNodeUpgradeDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeNodeUpgradeDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeNodeUpgradeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeNodeUpgradeModuleData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeNodeUpgradeModuleData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeNodeUpgradeModuleData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeNodeUpgradeModuleData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeNodeUpgradeModuleData
    def NodeUpgradeDataMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeNodeUpgradeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeNodeUpgradeModuleData
    def NodeUpgradeDataMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeNodeUpgradeModuleData
    def NodeUpgradeDataMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_RoguelikeNodeUpgradeModuleDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_RoguelikeNodeUpgradeModuleDataAddNodeUpgradeDataMap(builder, nodeUpgradeDataMap):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpgradeDataMap), 0)

def clz_Torappu_RoguelikeNodeUpgradeModuleDataStartNodeUpgradeDataMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeNodeUpgradeModuleDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeModule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeModule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeModule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeModule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeModule
    def ModuleTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # clz_Torappu_RoguelikeModule
    def ModuleTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # clz_Torappu_RoguelikeModule
    def ModuleTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeModule
    def ModuleTypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeModule
    def SanCheck(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeSanCheckModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def Dice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDiceModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def Chaos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeChaosModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def TotemBuff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTotemBuffModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def Vision(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeVisionModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def Fragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeFragmentModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def Disaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeDisasterModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeModule
    def NodeUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeNodeUpgradeModuleData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeModuleStart(builder):
    builder.StartObject(9)

def clz_Torappu_RoguelikeModuleAddModuleTypes(builder, moduleTypes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(moduleTypes), 0)

def clz_Torappu_RoguelikeModuleStartModuleTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeModuleAddSanCheck(builder, sanCheck):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sanCheck), 0)

def clz_Torappu_RoguelikeModuleAddDice(builder, dice):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dice), 0)

def clz_Torappu_RoguelikeModuleAddChaos(builder, chaos):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(chaos), 0)

def clz_Torappu_RoguelikeModuleAddTotemBuff(builder, totemBuff):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(totemBuff), 0)

def clz_Torappu_RoguelikeModuleAddVision(builder, vision):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(vision), 0)

def clz_Torappu_RoguelikeModuleAddFragment(builder, fragment):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(fragment), 0)

def clz_Torappu_RoguelikeModuleAddDisaster(builder, disaster):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(disaster), 0)

def clz_Torappu_RoguelikeModuleAddNodeUpgrade(builder, nodeUpgrade):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(nodeUpgrade), 0)

def clz_Torappu_RoguelikeModuleEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeModule(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeModule()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeModule(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeModule
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeModule
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeModule
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeModule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeModuleStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeModuleAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeModuleAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeModuleEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDisplayItem(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDisplayItem()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDisplayItem(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDisplayItem
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDisplayItem
    def DisplayType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDisplayItem
    def DisplayNum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDisplayItem
    def DisplayForm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDisplayItem
    def TokenDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDisplayItem
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeTopicDisplayItemStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTopicDisplayItemAddDisplayType(builder, displayType):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(displayType), 0)

def clz_Torappu_RoguelikeTopicDisplayItemAddDisplayNum(builder, displayNum):
    builder.PrependInt32Slot(1, displayNum, 0)

def clz_Torappu_RoguelikeTopicDisplayItemAddDisplayForm(builder, displayForm):
    builder.PrependInt32Slot(2, displayForm, 0)

def clz_Torappu_RoguelikeTopicDisplayItemAddTokenDesc(builder, tokenDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenDesc), 0)

def clz_Torappu_RoguelikeTopicDisplayItemAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_RoguelikeTopicDisplayItemEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDev(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDev()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDev(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDev
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDev
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDev
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def NextNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeTopicDev
    def NextNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def NextNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeTopicDev
    def FrontNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeTopicDev
    def FrontNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def FrontNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RoguelikeTopicDev
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDev
    def BuffIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDev
    def BuffTypeName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeTopicDev
    def BuffDisplayInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDisplayItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicDev
    def BuffDisplayInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicDev
    def BuffDisplayInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def clz_Torappu_RoguelikeTopicDevStart(builder):
    builder.StartObject(10)

def clz_Torappu_RoguelikeTopicDevAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RoguelikeTopicDevAddSortId(builder, sortId):
    builder.PrependInt32Slot(1, sortId, 0)

def clz_Torappu_RoguelikeTopicDevAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(2, nodeType, 0)

def clz_Torappu_RoguelikeTopicDevAddNextNodeId(builder, nextNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeId), 0)

def clz_Torappu_RoguelikeTopicDevStartNextNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDevAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_RoguelikeTopicDevStartFrontNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDevAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(5, tokenCost, 0)

def clz_Torappu_RoguelikeTopicDevAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_RoguelikeTopicDevAddBuffIconId(builder, buffIconId):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buffIconId), 0)

def clz_Torappu_RoguelikeTopicDevAddBuffTypeName(builder, buffTypeName):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffTypeName), 0)

def clz_Torappu_RoguelikeTopicDevAddBuffDisplayInfo(builder, buffDisplayInfo):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(buffDisplayInfo), 0)

def clz_Torappu_RoguelikeTopicDevStartBuffDisplayInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicDevEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicDev(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicDev()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicDev(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicDev
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicDev
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicDev
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicDevStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicDevAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicDevAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicDevEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicDevToken(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicDevToken()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicDevToken(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicDevToken
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicDevToken
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDevToken
    def DisplayForm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeTopicDevToken
    def TokenDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeTopicDevTokenStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeTopicDevTokenAddSortId(builder, sortId):
    builder.PrependInt32Slot(0, sortId, 0)

def clz_Torappu_RoguelikeTopicDevTokenAddDisplayForm(builder, displayForm):
    builder.PrependInt32Slot(1, displayForm, 0)

def clz_Torappu_RoguelikeTopicDevTokenAddTokenDesc(builder, tokenDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tokenDesc), 0)

def clz_Torappu_RoguelikeTopicDevTokenEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeTopicDevToken(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeTopicDevToken()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeTopicDevToken(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeTopicDevToken
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeTopicDevToken
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeTopicDevToken
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicDevToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeTopicDevTokenStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeTopicDevTokenAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeTopicDevTokenAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeTopicDevTokenEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL01EndingText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL01EndingText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL01EndingText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL01EndingText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL01EndingText
    def SummaryVariation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryDefeatBoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryAccidentMeet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryCapsule(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryActiveTool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryDifficultyZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryDifficultyEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummarySupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryNormalRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryDirectRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryFriendRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryFreeRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMonthRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryCompleteEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryEachZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryPerfectBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMeetBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMeetEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMeetShop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryMeetTreasure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryBuy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryInvest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryGet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummarySafeHouse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL01EndingText
    def SummaryFailEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL01EndingTextStart(builder):
    builder.StartObject(33)

def clz_Torappu_RL01EndingTextAddSummaryVariation(builder, summaryVariation):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVariation), 0)

def clz_Torappu_RL01EndingTextAddSummaryDefeatBoss(builder, summaryDefeatBoss):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDefeatBoss), 0)

def clz_Torappu_RL01EndingTextAddSummaryAccidentMeet(builder, summaryAccidentMeet):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(summaryAccidentMeet), 0)

def clz_Torappu_RL01EndingTextAddSummaryCapsule(builder, summaryCapsule):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCapsule), 0)

def clz_Torappu_RL01EndingTextAddSummaryActiveTool(builder, summaryActiveTool):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(summaryActiveTool), 0)

def clz_Torappu_RL01EndingTextAddSummaryActor(builder, summaryActor):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(summaryActor), 0)

def clz_Torappu_RL01EndingTextAddSummaryTop(builder, summaryTop):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(summaryTop), 0)

def clz_Torappu_RL01EndingTextAddSummaryZone(builder, summaryZone):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(summaryZone), 0)

def clz_Torappu_RL01EndingTextAddSummaryEnding(builder, summaryEnding):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEnding), 0)

def clz_Torappu_RL01EndingTextAddSummaryDifficultyZone(builder, summaryDifficultyZone):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyZone), 0)

def clz_Torappu_RL01EndingTextAddSummaryDifficultyEnding(builder, summaryDifficultyEnding):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyEnding), 0)

def clz_Torappu_RL01EndingTextAddSummaryMode(builder, summaryMode):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMode), 0)

def clz_Torappu_RL01EndingTextAddSummaryGroup(builder, summaryGroup):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGroup), 0)

def clz_Torappu_RL01EndingTextAddSummarySupport(builder, summarySupport):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(summarySupport), 0)

def clz_Torappu_RL01EndingTextAddSummaryNormalRecruit(builder, summaryNormalRecruit):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(summaryNormalRecruit), 0)

def clz_Torappu_RL01EndingTextAddSummaryDirectRecruit(builder, summaryDirectRecruit):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDirectRecruit), 0)

def clz_Torappu_RL01EndingTextAddSummaryFriendRecruit(builder, summaryFriendRecruit):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFriendRecruit), 0)

def clz_Torappu_RL01EndingTextAddSummaryFreeRecruit(builder, summaryFreeRecruit):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFreeRecruit), 0)

def clz_Torappu_RL01EndingTextAddSummaryMonthRecruit(builder, summaryMonthRecruit):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMonthRecruit), 0)

def clz_Torappu_RL01EndingTextAddSummaryUpgrade(builder, summaryUpgrade):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUpgrade), 0)

def clz_Torappu_RL01EndingTextAddSummaryCompleteEnding(builder, summaryCompleteEnding):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCompleteEnding), 0)

def clz_Torappu_RL01EndingTextAddSummaryEachZone(builder, summaryEachZone):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEachZone), 0)

def clz_Torappu_RL01EndingTextAddSummaryPerfectBattle(builder, summaryPerfectBattle):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPerfectBattle), 0)

def clz_Torappu_RL01EndingTextAddSummaryMeetBattle(builder, summaryMeetBattle):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetBattle), 0)

def clz_Torappu_RL01EndingTextAddSummaryMeetEvent(builder, summaryMeetEvent):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetEvent), 0)

def clz_Torappu_RL01EndingTextAddSummaryMeetShop(builder, summaryMeetShop):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetShop), 0)

def clz_Torappu_RL01EndingTextAddSummaryMeetTreasure(builder, summaryMeetTreasure):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetTreasure), 0)

def clz_Torappu_RL01EndingTextAddSummaryBuy(builder, summaryBuy):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(summaryBuy), 0)

def clz_Torappu_RL01EndingTextAddSummaryInvest(builder, summaryInvest):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(summaryInvest), 0)

def clz_Torappu_RL01EndingTextAddSummaryGet(builder, summaryGet):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGet), 0)

def clz_Torappu_RL01EndingTextAddSummaryRelic(builder, summaryRelic):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(summaryRelic), 0)

def clz_Torappu_RL01EndingTextAddSummarySafeHouse(builder, summarySafeHouse):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(summarySafeHouse), 0)

def clz_Torappu_RL01EndingTextAddSummaryFailEnd(builder, summaryFailEnd):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFailEnd), 0)

def clz_Torappu_RL01EndingTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL01CustomizeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL01CustomizeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL01CustomizeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL01CustomizeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL01CustomizeData
    def Developments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL01CustomizeData
    def DevelopmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL01CustomizeData
    def DevelopmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RL01CustomizeData
    def DevelopmentTokens(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDevToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL01CustomizeData
    def DevelopmentTokensLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL01CustomizeData
    def DevelopmentTokensIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RL01CustomizeData
    def EndingText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL01EndingText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RL01CustomizeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RL01CustomizeDataAddDevelopments(builder, developments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(developments), 0)

def clz_Torappu_RL01CustomizeDataStartDevelopmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL01CustomizeDataAddDevelopmentTokens(builder, developmentTokens):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(developmentTokens), 0)

def clz_Torappu_RL01CustomizeDataStartDevelopmentTokensVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL01CustomizeDataAddEndingText(builder, endingText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endingText), 0)

def clz_Torappu_RL01CustomizeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL02Development(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL02Development()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL02Development(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL02Development
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL02Development
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02Development
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02Development
    def FrontNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL02Development
    def FrontNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02Development
    def FrontNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RL02Development
    def NextNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL02Development
    def NextNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02Development
    def NextNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RL02Development
    def PositionP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02Development
    def PositionR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02Development
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02Development
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02Development
    def BuffIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02Development
    def EffectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02Development
    def RawDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02Development
    def BuffDisplayInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDisplayItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL02Development
    def BuffDisplayInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02Development
    def BuffDisplayInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RL02Development
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL02DevelopmentStart(builder):
    builder.StartObject(13)

def clz_Torappu_RL02DevelopmentAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RL02DevelopmentAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_RL02DevelopmentAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_RL02DevelopmentStartFrontNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02DevelopmentAddNextNodeId(builder, nextNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeId), 0)

def clz_Torappu_RL02DevelopmentStartNextNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02DevelopmentAddPositionP(builder, positionP):
    builder.PrependInt32Slot(4, positionP, 0)

def clz_Torappu_RL02DevelopmentAddPositionR(builder, positionR):
    builder.PrependInt32Slot(5, positionR, 0)

def clz_Torappu_RL02DevelopmentAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(6, tokenCost, 0)

def clz_Torappu_RL02DevelopmentAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_RL02DevelopmentAddBuffIconId(builder, buffIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffIconId), 0)

def clz_Torappu_RL02DevelopmentAddEffectType(builder, effectType):
    builder.PrependInt32Slot(9, effectType, 0)

def clz_Torappu_RL02DevelopmentAddRawDesc(builder, rawDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(rawDesc), 0)

def clz_Torappu_RL02DevelopmentAddBuffDisplayInfo(builder, buffDisplayInfo):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(buffDisplayInfo), 0)

def clz_Torappu_RL02DevelopmentStartBuffDisplayInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02DevelopmentAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RL02DevelopmentEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RL02Development(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RL02Development()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RL02Development(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RL02Development
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RL02Development
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RL02Development
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL02Development()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RL02DevelopmentStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RL02DevelopmentAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RL02DevelopmentAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RL02DevelopmentEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL02DevRawTextBuffGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL02DevRawTextBuffGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL02DevRawTextBuffGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL02DevRawTextBuffGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL02DevRawTextBuffGroup
    def NodeIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL02DevRawTextBuffGroup
    def NodeIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02DevRawTextBuffGroup
    def NodeIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RL02DevRawTextBuffGroup
    def UseLevelMark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RL02DevRawTextBuffGroup
    def GroupIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02DevRawTextBuffGroup
    def UseUpBreak(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RL02DevRawTextBuffGroup
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RL02DevRawTextBuffGroupStart(builder):
    builder.StartObject(5)

def clz_Torappu_RL02DevRawTextBuffGroupAddNodeIdList(builder, nodeIdList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeIdList), 0)

def clz_Torappu_RL02DevRawTextBuffGroupStartNodeIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02DevRawTextBuffGroupAddUseLevelMark(builder, useLevelMark):
    builder.PrependBoolSlot(1, useLevelMark, 0)

def clz_Torappu_RL02DevRawTextBuffGroupAddGroupIconId(builder, groupIconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupIconId), 0)

def clz_Torappu_RL02DevRawTextBuffGroupAddUseUpBreak(builder, useUpBreak):
    builder.PrependBoolSlot(3, useUpBreak, 0)

def clz_Torappu_RL02DevRawTextBuffGroupAddSortId(builder, sortId):
    builder.PrependInt32Slot(4, sortId, 0)

def clz_Torappu_RL02DevRawTextBuffGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL02DevelopmentLine(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL02DevelopmentLine()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL02DevelopmentLine(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL02DevelopmentLine
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL02DevelopmentLine
    def FromNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02DevelopmentLine
    def ToNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02DevelopmentLine
    def FromNodeP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02DevelopmentLine
    def FromNodeR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02DevelopmentLine
    def ToNodeP(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02DevelopmentLine
    def ToNodeR(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02DevelopmentLine
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL02DevelopmentLineStart(builder):
    builder.StartObject(7)

def clz_Torappu_RL02DevelopmentLineAddFromNode(builder, fromNode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(fromNode), 0)

def clz_Torappu_RL02DevelopmentLineAddToNode(builder, toNode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(toNode), 0)

def clz_Torappu_RL02DevelopmentLineAddFromNodeP(builder, fromNodeP):
    builder.PrependInt32Slot(2, fromNodeP, 0)

def clz_Torappu_RL02DevelopmentLineAddFromNodeR(builder, fromNodeR):
    builder.PrependInt32Slot(3, fromNodeR, 0)

def clz_Torappu_RL02DevelopmentLineAddToNodeP(builder, toNodeP):
    builder.PrependInt32Slot(4, toNodeP, 0)

def clz_Torappu_RL02DevelopmentLineAddToNodeR(builder, toNodeR):
    builder.PrependInt32Slot(5, toNodeR, 0)

def clz_Torappu_RL02DevelopmentLineAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RL02DevelopmentLineEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL02EndingText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL02EndingText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL02EndingText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL02EndingText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL02EndingText
    def SummaryMutation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryDice(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryDiceResultGood(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryDiceResultNormal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryDiceResultBad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryDiceResultDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryCommuDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryHiddenDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryKnightDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryGoldDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryPracticeDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryCommuEmptyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryCommuNotEmptyDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryHiddenPassedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryHiddenNotPassedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryKnightPassedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryKnightNotPassedDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryGoldThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02EndingText
    def SummaryGoldHighDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryGoldLowDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryPracticeThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL02EndingText
    def SummaryPracticeHighDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL02EndingText
    def SummaryPracticeLowDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL02EndingTextStart(builder):
    builder.StartObject(23)

def clz_Torappu_RL02EndingTextAddSummaryMutation(builder, summaryMutation):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMutation), 0)

def clz_Torappu_RL02EndingTextAddSummaryDice(builder, summaryDice):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDice), 0)

def clz_Torappu_RL02EndingTextAddSummaryDiceResultGood(builder, summaryDiceResultGood):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDiceResultGood), 0)

def clz_Torappu_RL02EndingTextAddSummaryDiceResultNormal(builder, summaryDiceResultNormal):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDiceResultNormal), 0)

def clz_Torappu_RL02EndingTextAddSummaryDiceResultBad(builder, summaryDiceResultBad):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDiceResultBad), 0)

def clz_Torappu_RL02EndingTextAddSummaryDiceResultDesc(builder, summaryDiceResultDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDiceResultDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryCommuDesc(builder, summaryCommuDesc):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCommuDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryHiddenDesc(builder, summaryHiddenDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(summaryHiddenDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryKnightDesc(builder, summaryKnightDesc):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(summaryKnightDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryGoldDesc(builder, summaryGoldDesc):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGoldDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryPracticeDesc(builder, summaryPracticeDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPracticeDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryCommuEmptyDesc(builder, summaryCommuEmptyDesc):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCommuEmptyDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryCommuNotEmptyDesc(builder, summaryCommuNotEmptyDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCommuNotEmptyDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryHiddenPassedDesc(builder, summaryHiddenPassedDesc):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(summaryHiddenPassedDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryHiddenNotPassedDesc(builder, summaryHiddenNotPassedDesc):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(summaryHiddenNotPassedDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryKnightPassedDesc(builder, summaryKnightPassedDesc):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(summaryKnightPassedDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryKnightNotPassedDesc(builder, summaryKnightNotPassedDesc):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(summaryKnightNotPassedDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryGoldThreshold(builder, summaryGoldThreshold):
    builder.PrependInt32Slot(17, summaryGoldThreshold, 0)

def clz_Torappu_RL02EndingTextAddSummaryGoldHighDesc(builder, summaryGoldHighDesc):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGoldHighDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryGoldLowDesc(builder, summaryGoldLowDesc):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGoldLowDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryPracticeThreshold(builder, summaryPracticeThreshold):
    builder.PrependInt32Slot(20, summaryPracticeThreshold, 0)

def clz_Torappu_RL02EndingTextAddSummaryPracticeHighDesc(builder, summaryPracticeHighDesc):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPracticeHighDesc), 0)

def clz_Torappu_RL02EndingTextAddSummaryPracticeLowDesc(builder, summaryPracticeLowDesc):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPracticeLowDesc), 0)

def clz_Torappu_RL02EndingTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL02CustomizeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL02CustomizeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL02CustomizeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL02CustomizeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL02CustomizeData
    def Developments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RL02Development()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL02CustomizeData
    def DevelopmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentTokens(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDevToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL02CustomizeData
    def DevelopmentTokensLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentTokensIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentRawTextGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL02DevRawTextBuffGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL02CustomizeData
    def DevelopmentRawTextGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentRawTextGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentLines(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL02DevelopmentLine()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL02CustomizeData
    def DevelopmentLinesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL02CustomizeData
    def DevelopmentLinesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RL02CustomizeData
    def EndingText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL02EndingText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RL02CustomizeDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_RL02CustomizeDataAddDevelopments(builder, developments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(developments), 0)

def clz_Torappu_RL02CustomizeDataStartDevelopmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02CustomizeDataAddDevelopmentTokens(builder, developmentTokens):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(developmentTokens), 0)

def clz_Torappu_RL02CustomizeDataStartDevelopmentTokensVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02CustomizeDataAddDevelopmentRawTextGroup(builder, developmentRawTextGroup):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(developmentRawTextGroup), 0)

def clz_Torappu_RL02CustomizeDataStartDevelopmentRawTextGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02CustomizeDataAddDevelopmentLines(builder, developmentLines):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(developmentLines), 0)

def clz_Torappu_RL02CustomizeDataStartDevelopmentLinesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL02CustomizeDataAddEndingText(builder, endingText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(endingText), 0)

def clz_Torappu_RL02CustomizeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03Development(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03Development()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03Development(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03Development
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03Development
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03Development
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03Development
    def FrontNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03Development
    def FrontNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03Development
    def FrontNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RL03Development
    def NextNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03Development
    def NextNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03Development
    def NextNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RL03Development
    def PositionRow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03Development
    def PositionOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03Development
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03Development
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03Development
    def BuffIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03Development
    def EffectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03Development
    def RawDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03Development
    def RawDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03Development
    def RawDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_RL03Development
    def BuffDisplayInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDisplayItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03Development
    def BuffDisplayInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03Development
    def BuffDisplayInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_RL03Development
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03Development
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL03DevelopmentStart(builder):
    builder.StartObject(14)

def clz_Torappu_RL03DevelopmentAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RL03DevelopmentAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_RL03DevelopmentAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_RL03DevelopmentStartFrontNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevelopmentAddNextNodeId(builder, nextNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeId), 0)

def clz_Torappu_RL03DevelopmentStartNextNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevelopmentAddPositionRow(builder, positionRow):
    builder.PrependInt32Slot(4, positionRow, 0)

def clz_Torappu_RL03DevelopmentAddPositionOrder(builder, positionOrder):
    builder.PrependInt32Slot(5, positionOrder, 0)

def clz_Torappu_RL03DevelopmentAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(6, tokenCost, 0)

def clz_Torappu_RL03DevelopmentAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_RL03DevelopmentAddBuffIconId(builder, buffIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(buffIconId), 0)

def clz_Torappu_RL03DevelopmentAddEffectType(builder, effectType):
    builder.PrependInt32Slot(9, effectType, 0)

def clz_Torappu_RL03DevelopmentAddRawDesc(builder, rawDesc):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(rawDesc), 0)

def clz_Torappu_RL03DevelopmentStartRawDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevelopmentAddBuffDisplayInfo(builder, buffDisplayInfo):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(buffDisplayInfo), 0)

def clz_Torappu_RL03DevelopmentStartBuffDisplayInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevelopmentAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_RL03DevelopmentAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RL03DevelopmentEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RL03Development(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RL03Development()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RL03Development(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RL03Development
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RL03Development
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RL03Development
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL03Development()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RL03DevelopmentStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RL03DevelopmentAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RL03DevelopmentAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RL03DevelopmentEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03DevRawTextBuffGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03DevRawTextBuffGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03DevRawTextBuffGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03DevRawTextBuffGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03DevRawTextBuffGroup
    def NodeIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03DevRawTextBuffGroup
    def NodeIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03DevRawTextBuffGroup
    def NodeIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RL03DevRawTextBuffGroup
    def UseLevelMark(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RL03DevRawTextBuffGroup
    def GroupIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03DevRawTextBuffGroup
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RL03DevRawTextBuffGroupStart(builder):
    builder.StartObject(4)

def clz_Torappu_RL03DevRawTextBuffGroupAddNodeIdList(builder, nodeIdList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeIdList), 0)

def clz_Torappu_RL03DevRawTextBuffGroupStartNodeIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevRawTextBuffGroupAddUseLevelMark(builder, useLevelMark):
    builder.PrependBoolSlot(1, useLevelMark, 0)

def clz_Torappu_RL03DevRawTextBuffGroupAddGroupIconId(builder, groupIconId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(groupIconId), 0)

def clz_Torappu_RL03DevRawTextBuffGroupAddSortId(builder, sortId):
    builder.PrependInt32Slot(3, sortId, 0)

def clz_Torappu_RL03DevRawTextBuffGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03DevDifficultyNodePairInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03DevDifficultyNodePairInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03DevDifficultyNodePairInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03DevDifficultyNodePairInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03DevDifficultyNodePairInfo
    def FrontNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03DevDifficultyNodePairInfo
    def NextNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL03DevDifficultyNodePairInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_RL03DevDifficultyNodePairInfoAddFrontNode(builder, frontNode):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(frontNode), 0)

def clz_Torappu_RL03DevDifficultyNodePairInfoAddNextNode(builder, nextNode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nextNode), 0)

def clz_Torappu_RL03DevDifficultyNodePairInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03DevDifficultyNodeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03DevDifficultyNodeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03DevDifficultyNodeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03DevDifficultyNodeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03DevDifficultyNodeInfo
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03DevDifficultyNodeInfo
    def NodeMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL03DevDifficultyNodePairInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03DevDifficultyNodeInfo
    def NodeMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03DevDifficultyNodeInfo
    def NodeMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RL03DevDifficultyNodeInfo
    def EnableGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RL03DevDifficultyNodeInfoStart(builder):
    builder.StartObject(3)

def clz_Torappu_RL03DevDifficultyNodeInfoAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RL03DevDifficultyNodeInfoAddNodeMap(builder, nodeMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeMap), 0)

def clz_Torappu_RL03DevDifficultyNodeInfoStartNodeMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DevDifficultyNodeInfoAddEnableGrade(builder, enableGrade):
    builder.PrependInt32Slot(2, enableGrade, 0)

def clz_Torappu_RL03DevDifficultyNodeInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RL03DevDifficultyNodeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RL03DevDifficultyNodeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RL03DevDifficultyNodeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RL03DevDifficultyNodeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RL03DevDifficultyNodeInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RL03DevDifficultyNodeInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL03DevDifficultyNodeInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RL03DevDifficultyNodeInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RL03DevDifficultyNodeInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RL03DevDifficultyNodeInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RL03DevDifficultyNodeInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03EndingText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03EndingText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03EndingText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03EndingText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03EndingText
    def SummaryGetTotem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDemoPointUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDemoPointDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDemoGradeUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDemoGradeDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryVisionPointUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryVisionPointDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryVisionGradeUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryVisionGradeDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetTrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryFightWin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryFightFail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryExchangeTotem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryExchangeRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetSecretpath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryUseTotem(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryVisionGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDifficultyZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDifficultyEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummarySupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryNormalRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryDirectRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryFriendRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryFreeRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMonthRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryCompleteEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryEachZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryPerfectBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetShop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryMeetTreasure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryBuy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryInvest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryGet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummarySafeHouse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03EndingText
    def SummaryFailEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL03EndingTextStart(builder):
    builder.StartObject(45)

def clz_Torappu_RL03EndingTextAddSummaryGetTotem(builder, summaryGetTotem):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGetTotem), 0)

def clz_Torappu_RL03EndingTextAddSummaryDemoPointUp(builder, summaryDemoPointUp):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDemoPointUp), 0)

def clz_Torappu_RL03EndingTextAddSummaryDemoPointDown(builder, summaryDemoPointDown):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDemoPointDown), 0)

def clz_Torappu_RL03EndingTextAddSummaryDemoGradeUp(builder, summaryDemoGradeUp):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDemoGradeUp), 0)

def clz_Torappu_RL03EndingTextAddSummaryDemoGradeDown(builder, summaryDemoGradeDown):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDemoGradeDown), 0)

def clz_Torappu_RL03EndingTextAddSummaryVisionPointUp(builder, summaryVisionPointUp):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVisionPointUp), 0)

def clz_Torappu_RL03EndingTextAddSummaryVisionPointDown(builder, summaryVisionPointDown):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVisionPointDown), 0)

def clz_Torappu_RL03EndingTextAddSummaryVisionGradeUp(builder, summaryVisionGradeUp):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVisionGradeUp), 0)

def clz_Torappu_RL03EndingTextAddSummaryVisionGradeDown(builder, summaryVisionGradeDown):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVisionGradeDown), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetTrade(builder, summaryMeetTrade):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetTrade), 0)

def clz_Torappu_RL03EndingTextAddSummaryFightWin(builder, summaryFightWin):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFightWin), 0)

def clz_Torappu_RL03EndingTextAddSummaryFightFail(builder, summaryFightFail):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFightFail), 0)

def clz_Torappu_RL03EndingTextAddSummaryExchangeTotem(builder, summaryExchangeTotem):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(summaryExchangeTotem), 0)

def clz_Torappu_RL03EndingTextAddSummaryExchangeRelic(builder, summaryExchangeRelic):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(summaryExchangeRelic), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetSecretpath(builder, summaryMeetSecretpath):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetSecretpath), 0)

def clz_Torappu_RL03EndingTextAddSummaryUseTotem(builder, summaryUseTotem):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUseTotem), 0)

def clz_Torappu_RL03EndingTextAddSummaryVisionGrade(builder, summaryVisionGrade):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(summaryVisionGrade), 0)

def clz_Torappu_RL03EndingTextAddSummaryActor(builder, summaryActor):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(summaryActor), 0)

def clz_Torappu_RL03EndingTextAddSummaryTop(builder, summaryTop):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(summaryTop), 0)

def clz_Torappu_RL03EndingTextAddSummaryZone(builder, summaryZone):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(summaryZone), 0)

def clz_Torappu_RL03EndingTextAddSummaryEnding(builder, summaryEnding):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEnding), 0)

def clz_Torappu_RL03EndingTextAddSummaryDifficultyZone(builder, summaryDifficultyZone):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyZone), 0)

def clz_Torappu_RL03EndingTextAddSummaryDifficultyEnding(builder, summaryDifficultyEnding):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyEnding), 0)

def clz_Torappu_RL03EndingTextAddSummaryMode(builder, summaryMode):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMode), 0)

def clz_Torappu_RL03EndingTextAddSummaryGroup(builder, summaryGroup):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGroup), 0)

def clz_Torappu_RL03EndingTextAddSummarySupport(builder, summarySupport):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(summarySupport), 0)

def clz_Torappu_RL03EndingTextAddSummaryNormalRecruit(builder, summaryNormalRecruit):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(summaryNormalRecruit), 0)

def clz_Torappu_RL03EndingTextAddSummaryDirectRecruit(builder, summaryDirectRecruit):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDirectRecruit), 0)

def clz_Torappu_RL03EndingTextAddSummaryFriendRecruit(builder, summaryFriendRecruit):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFriendRecruit), 0)

def clz_Torappu_RL03EndingTextAddSummaryFreeRecruit(builder, summaryFreeRecruit):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFreeRecruit), 0)

def clz_Torappu_RL03EndingTextAddSummaryMonthRecruit(builder, summaryMonthRecruit):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMonthRecruit), 0)

def clz_Torappu_RL03EndingTextAddSummaryUpgrade(builder, summaryUpgrade):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUpgrade), 0)

def clz_Torappu_RL03EndingTextAddSummaryCompleteEnding(builder, summaryCompleteEnding):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCompleteEnding), 0)

def clz_Torappu_RL03EndingTextAddSummaryEachZone(builder, summaryEachZone):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEachZone), 0)

def clz_Torappu_RL03EndingTextAddSummaryPerfectBattle(builder, summaryPerfectBattle):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPerfectBattle), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetBattle(builder, summaryMeetBattle):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetBattle), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetEvent(builder, summaryMeetEvent):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetEvent), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetShop(builder, summaryMeetShop):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetShop), 0)

def clz_Torappu_RL03EndingTextAddSummaryMeetTreasure(builder, summaryMeetTreasure):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetTreasure), 0)

def clz_Torappu_RL03EndingTextAddSummaryBuy(builder, summaryBuy):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(summaryBuy), 0)

def clz_Torappu_RL03EndingTextAddSummaryInvest(builder, summaryInvest):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(summaryInvest), 0)

def clz_Torappu_RL03EndingTextAddSummaryGet(builder, summaryGet):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGet), 0)

def clz_Torappu_RL03EndingTextAddSummaryRelic(builder, summaryRelic):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(summaryRelic), 0)

def clz_Torappu_RL03EndingTextAddSummarySafeHouse(builder, summarySafeHouse):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(summarySafeHouse), 0)

def clz_Torappu_RL03EndingTextAddSummaryFailEnd(builder, summaryFailEnd):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFailEnd), 0)

def clz_Torappu_RL03EndingTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03DifficultyExt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03DifficultyExt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03DifficultyExt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03DifficultyExt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03DifficultyExt
    def ModeDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03DifficultyExt
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL03DifficultyExt
    def TotemProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RL03DifficultyExt
    def RelicDevLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL03DifficultyExt
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03DifficultyExt
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03DifficultyExt
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_RL03DifficultyExt
    def BuffDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL03DifficultyExt
    def BuffDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03DifficultyExt
    def BuffDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_RL03DifficultyExtStart(builder):
    builder.StartObject(6)

def clz_Torappu_RL03DifficultyExtAddModeDifficulty(builder, modeDifficulty):
    builder.PrependInt32Slot(0, modeDifficulty, 0)

def clz_Torappu_RL03DifficultyExtAddGrade(builder, grade):
    builder.PrependInt32Slot(1, grade, 0)

def clz_Torappu_RL03DifficultyExtAddTotemProb(builder, totemProb):
    builder.PrependFloat32Slot(2, totemProb, 0.0)

def clz_Torappu_RL03DifficultyExtAddRelicDevLevel(builder, relicDevLevel):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(relicDevLevel), 0)

def clz_Torappu_RL03DifficultyExtAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_RL03DifficultyExtStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DifficultyExtAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_RL03DifficultyExtStartBuffDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03DifficultyExtEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL03CustomizeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL03CustomizeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL03CustomizeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL03CustomizeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL03CustomizeData
    def Developments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RL03Development()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsTokens(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDevToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsTokensLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsTokensIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentRawTextGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL03DevRawTextBuffGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def DevelopmentRawTextGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentRawTextGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsDifficultyNodeInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RL03DevDifficultyNodeInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsDifficultyNodeInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03CustomizeData
    def DevelopmentsDifficultyNodeInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RL03CustomizeData
    def EndingText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL03EndingText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def Difficulties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL03DifficultyExt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL03CustomizeData
    def DifficultiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL03CustomizeData
    def DifficultiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_RL03CustomizeDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RL03CustomizeDataAddDevelopments(builder, developments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(developments), 0)

def clz_Torappu_RL03CustomizeDataStartDevelopmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03CustomizeDataAddDevelopmentsTokens(builder, developmentsTokens):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(developmentsTokens), 0)

def clz_Torappu_RL03CustomizeDataStartDevelopmentsTokensVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03CustomizeDataAddDevelopmentRawTextGroup(builder, developmentRawTextGroup):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(developmentRawTextGroup), 0)

def clz_Torappu_RL03CustomizeDataStartDevelopmentRawTextGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03CustomizeDataAddDevelopmentsDifficultyNodeInfos(builder, developmentsDifficultyNodeInfos):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(developmentsDifficultyNodeInfos), 0)

def clz_Torappu_RL03CustomizeDataStartDevelopmentsDifficultyNodeInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03CustomizeDataAddEndingText(builder, endingText):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(endingText), 0)

def clz_Torappu_RL03CustomizeDataAddDifficulties(builder, difficulties):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(difficulties), 0)

def clz_Torappu_RL03CustomizeDataStartDifficultiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL03CustomizeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeCommonDevelopment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeCommonDevelopment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeCommonDevelopment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeCommonDevelopment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeCommonDevelopment
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def NodeType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def FrontNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeCommonDevelopment
    def FrontNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def FrontNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def NextNodeId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeCommonDevelopment
    def NextNodeIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def NextNodeIdIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def PositionRow(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def PositionOrder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def TokenCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def BuffName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def ActiveIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def InactiveIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def BottomIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def EffectType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def RawDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeCommonDevelopment
    def RawDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def RawDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def BuffDisplayInfo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeTopicDisplayItem()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def BuffDisplayInfoLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def BuffDisplayInfoIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopment
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevelopment
    def EnrollId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeCommonDevelopmentStart(builder):
    builder.StartObject(16)

def clz_Torappu_RoguelikeCommonDevelopmentAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddNodeType(builder, nodeType):
    builder.PrependInt32Slot(1, nodeType, 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddFrontNodeId(builder, frontNodeId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodeId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentStartFrontNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentAddNextNodeId(builder, nextNodeId):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nextNodeId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentStartNextNodeIdVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentAddPositionRow(builder, positionRow):
    builder.PrependInt32Slot(4, positionRow, 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddPositionOrder(builder, positionOrder):
    builder.PrependInt32Slot(5, positionOrder, 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddTokenCost(builder, tokenCost):
    builder.PrependInt32Slot(6, tokenCost, 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddBuffName(builder, buffName):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buffName), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddActiveIconId(builder, activeIconId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(activeIconId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddInactiveIconId(builder, inactiveIconId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(inactiveIconId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddBottomIconId(builder, bottomIconId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(bottomIconId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddEffectType(builder, effectType):
    builder.PrependInt32Slot(11, effectType, 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddRawDesc(builder, rawDesc):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(rawDesc), 0)

def clz_Torappu_RoguelikeCommonDevelopmentStartRawDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentAddBuffDisplayInfo(builder, buffDisplayInfo):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(buffDisplayInfo), 0)

def clz_Torappu_RoguelikeCommonDevelopmentStartBuffDisplayInfoVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentAddGroupId(builder, groupId):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(groupId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentAddEnrollId(builder, enrollId):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(enrollId), 0)

def clz_Torappu_RoguelikeCommonDevelopmentEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeCommonDevelopment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeCommonDevelopment()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeCommonDevelopment(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeCommonDevelopment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeCommonDevelopment
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeCommonDevelopment
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeCommonDevelopment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeCommonDevelopmentStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeCommonDevelopmentAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeCommonDevelopmentAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeCommonDevelopmentEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeCommonDevRawTextBuffGroup(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeCommonDevRawTextBuffGroup()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeCommonDevRawTextBuffGroup(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def NodeIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def NodeIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def NodeIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def GroupIconId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevRawTextBuffGroup
    def SortId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupStart(builder):
    builder.StartObject(3)

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupAddNodeIdList(builder, nodeIdList):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeIdList), 0)

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupStartNodeIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupAddGroupIconId(builder, groupIconId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(groupIconId), 0)

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupAddSortId(builder, sortId):
    builder.PrependInt32Slot(2, sortId, 0)

def clz_Torappu_RoguelikeCommonDevRawTextBuffGroupEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo
    def FrontNodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo
    def FrontNodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo
    def FrontNodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo
    def NextNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfoAddFrontNodes(builder, frontNodes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(frontNodes), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfoStartFrontNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfoAddNextNode(builder, nextNode):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nextNode), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeCommonDevDifficultyNodeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def BuffId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def NodeMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeCommonDevDifficultyNodePairInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def NodeMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def NodeMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def EnableGrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def EnableDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def LightId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def DecoId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoStart(builder):
    builder.StartObject(6)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddBuffId(builder, buffId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(buffId), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddNodeMap(builder, nodeMap):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeMap), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoStartNodeMapVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddEnableGrade(builder, enableGrade):
    builder.PrependInt32Slot(2, enableGrade, 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddEnableDesc(builder, enableDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(enableDesc), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddLightId(builder, lightId):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lightId), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddDecoId(builder, decoId):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(decoId), 0)

def clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoEnd(builder):
    return builder.EndObject()



class dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeCommonDevelopmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeCommonDevelopmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeCommonDevelopmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeCommonDevelopmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def Developments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeCommonDevelopment()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsTokens(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDevToken()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsTokensLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsTokensIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentRawTextGroup(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RoguelikeCommonDevRawTextBuffGroup()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentRawTextGroupLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentRawTextGroupIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsDifficultyNodeInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeCommonDevDifficultyNodeInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsDifficultyNodeInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeCommonDevelopmentData
    def DevelopmentsDifficultyNodeInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_RoguelikeCommonDevelopmentDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeCommonDevelopmentDataAddDevelopments(builder, developments):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(developments), 0)

def clz_Torappu_RoguelikeCommonDevelopmentDataStartDevelopmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentDataAddDevelopmentsTokens(builder, developmentsTokens):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(developmentsTokens), 0)

def clz_Torappu_RoguelikeCommonDevelopmentDataStartDevelopmentsTokensVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentDataAddDevelopmentRawTextGroup(builder, developmentRawTextGroup):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(developmentRawTextGroup), 0)

def clz_Torappu_RoguelikeCommonDevelopmentDataStartDevelopmentRawTextGroupVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentDataAddDevelopmentsDifficultyNodeInfos(builder, developmentsDifficultyNodeInfos):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(developmentsDifficultyNodeInfos), 0)

def clz_Torappu_RoguelikeCommonDevelopmentDataStartDevelopmentsDifficultyNodeInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeCommonDevelopmentDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL04DifficultyExt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL04DifficultyExt()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL04DifficultyExt(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL04DifficultyExt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL04DifficultyExt
    def ModeDifficulty(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL04DifficultyExt
    def Grade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RL04DifficultyExt
    def LeftDisasterDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04DifficultyExt
    def LeftOverweightDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04DifficultyExt
    def RelicDevLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04DifficultyExt
    def WeightStatusLimitDesc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04DifficultyExt
    def Buffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL04DifficultyExt
    def BuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL04DifficultyExt
    def BuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_RL04DifficultyExt
    def BuffDesc(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_RL04DifficultyExt
    def BuffDescLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL04DifficultyExt
    def BuffDescIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def clz_Torappu_RL04DifficultyExtStart(builder):
    builder.StartObject(8)

def clz_Torappu_RL04DifficultyExtAddModeDifficulty(builder, modeDifficulty):
    builder.PrependInt32Slot(0, modeDifficulty, 0)

def clz_Torappu_RL04DifficultyExtAddGrade(builder, grade):
    builder.PrependInt32Slot(1, grade, 0)

def clz_Torappu_RL04DifficultyExtAddLeftDisasterDesc(builder, leftDisasterDesc):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(leftDisasterDesc), 0)

def clz_Torappu_RL04DifficultyExtAddLeftOverweightDesc(builder, leftOverweightDesc):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(leftOverweightDesc), 0)

def clz_Torappu_RL04DifficultyExtAddRelicDevLevel(builder, relicDevLevel):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(relicDevLevel), 0)

def clz_Torappu_RL04DifficultyExtAddWeightStatusLimitDesc(builder, weightStatusLimitDesc):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(weightStatusLimitDesc), 0)

def clz_Torappu_RL04DifficultyExtAddBuffs(builder, buffs):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(buffs), 0)

def clz_Torappu_RL04DifficultyExtStartBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL04DifficultyExtAddBuffDesc(builder, buffDesc):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(buffDesc), 0)

def clz_Torappu_RL04DifficultyExtStartBuffDescVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL04DifficultyExtEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL04EndingText(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL04EndingText()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL04EndingText(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL04EndingText
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL04EndingText
    def SummaryGetFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryUseIdea(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryUseFood(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDropFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetDisaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryLeaveDisaster(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryEnterAlchemy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryAlchemyOthers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryAlchemyFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryWeightOverweight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryWeightLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryWeightSafe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDuelWin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDuelTie(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDuelLose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryPermUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryTempUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummarySellFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetTrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetSecretpath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryExchangeRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryFightWin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryFightFail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDifficultyZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDifficultyEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummarySupport(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryNormalRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryDirectRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryFriendRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryFreeRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMonthRecruit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryUpgrade(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryCompleteEnding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryEachZone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryPerfectBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetBattle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetShop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(90))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryMeetTreasure(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(92))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryBuy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(94))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryInvest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(96))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryGet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(98))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryRelic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(100))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummarySafeHouse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(102))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_RL04EndingText
    def SummaryFailEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(104))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_RL04EndingTextStart(builder):
    builder.StartObject(51)

def clz_Torappu_RL04EndingTextAddSummaryGetFragment(builder, summaryGetFragment):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGetFragment), 0)

def clz_Torappu_RL04EndingTextAddSummaryUseIdea(builder, summaryUseIdea):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUseIdea), 0)

def clz_Torappu_RL04EndingTextAddSummaryUseFood(builder, summaryUseFood):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUseFood), 0)

def clz_Torappu_RL04EndingTextAddSummaryDropFragment(builder, summaryDropFragment):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDropFragment), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetDisaster(builder, summaryMeetDisaster):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetDisaster), 0)

def clz_Torappu_RL04EndingTextAddSummaryLeaveDisaster(builder, summaryLeaveDisaster):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(summaryLeaveDisaster), 0)

def clz_Torappu_RL04EndingTextAddSummaryEnterAlchemy(builder, summaryEnterAlchemy):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEnterAlchemy), 0)

def clz_Torappu_RL04EndingTextAddSummaryAlchemyOthers(builder, summaryAlchemyOthers):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(summaryAlchemyOthers), 0)

def clz_Torappu_RL04EndingTextAddSummaryAlchemyFragment(builder, summaryAlchemyFragment):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(summaryAlchemyFragment), 0)

def clz_Torappu_RL04EndingTextAddSummaryWeightOverweight(builder, summaryWeightOverweight):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(summaryWeightOverweight), 0)

def clz_Torappu_RL04EndingTextAddSummaryWeightLimit(builder, summaryWeightLimit):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(summaryWeightLimit), 0)

def clz_Torappu_RL04EndingTextAddSummaryWeightSafe(builder, summaryWeightSafe):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(summaryWeightSafe), 0)

def clz_Torappu_RL04EndingTextAddSummaryDuelWin(builder, summaryDuelWin):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDuelWin), 0)

def clz_Torappu_RL04EndingTextAddSummaryDuelTie(builder, summaryDuelTie):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDuelTie), 0)

def clz_Torappu_RL04EndingTextAddSummaryDuelLose(builder, summaryDuelLose):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDuelLose), 0)

def clz_Torappu_RL04EndingTextAddSummaryPermUpgrade(builder, summaryPermUpgrade):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPermUpgrade), 0)

def clz_Torappu_RL04EndingTextAddSummaryTempUpgrade(builder, summaryTempUpgrade):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(summaryTempUpgrade), 0)

def clz_Torappu_RL04EndingTextAddSummarySellFragment(builder, summarySellFragment):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(summarySellFragment), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetTrade(builder, summaryMeetTrade):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetTrade), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetSecretpath(builder, summaryMeetSecretpath):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetSecretpath), 0)

def clz_Torappu_RL04EndingTextAddSummaryExchangeRelic(builder, summaryExchangeRelic):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(summaryExchangeRelic), 0)

def clz_Torappu_RL04EndingTextAddSummaryFightWin(builder, summaryFightWin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFightWin), 0)

def clz_Torappu_RL04EndingTextAddSummaryFightFail(builder, summaryFightFail):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFightFail), 0)

def clz_Torappu_RL04EndingTextAddSummaryActor(builder, summaryActor):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(summaryActor), 0)

def clz_Torappu_RL04EndingTextAddSummaryTop(builder, summaryTop):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(summaryTop), 0)

def clz_Torappu_RL04EndingTextAddSummaryZone(builder, summaryZone):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(summaryZone), 0)

def clz_Torappu_RL04EndingTextAddSummaryEnding(builder, summaryEnding):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEnding), 0)

def clz_Torappu_RL04EndingTextAddSummaryDifficultyZone(builder, summaryDifficultyZone):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyZone), 0)

def clz_Torappu_RL04EndingTextAddSummaryDifficultyEnding(builder, summaryDifficultyEnding):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDifficultyEnding), 0)

def clz_Torappu_RL04EndingTextAddSummaryMode(builder, summaryMode):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMode), 0)

def clz_Torappu_RL04EndingTextAddSummarySupport(builder, summarySupport):
    builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(summarySupport), 0)

def clz_Torappu_RL04EndingTextAddSummaryGroup(builder, summaryGroup):
    builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGroup), 0)

def clz_Torappu_RL04EndingTextAddSummaryNormalRecruit(builder, summaryNormalRecruit):
    builder.PrependUOffsetTRelativeSlot(32, flatbuffers.number_types.UOffsetTFlags.py_type(summaryNormalRecruit), 0)

def clz_Torappu_RL04EndingTextAddSummaryDirectRecruit(builder, summaryDirectRecruit):
    builder.PrependUOffsetTRelativeSlot(33, flatbuffers.number_types.UOffsetTFlags.py_type(summaryDirectRecruit), 0)

def clz_Torappu_RL04EndingTextAddSummaryFriendRecruit(builder, summaryFriendRecruit):
    builder.PrependUOffsetTRelativeSlot(34, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFriendRecruit), 0)

def clz_Torappu_RL04EndingTextAddSummaryFreeRecruit(builder, summaryFreeRecruit):
    builder.PrependUOffsetTRelativeSlot(35, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFreeRecruit), 0)

def clz_Torappu_RL04EndingTextAddSummaryMonthRecruit(builder, summaryMonthRecruit):
    builder.PrependUOffsetTRelativeSlot(36, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMonthRecruit), 0)

def clz_Torappu_RL04EndingTextAddSummaryUpgrade(builder, summaryUpgrade):
    builder.PrependUOffsetTRelativeSlot(37, flatbuffers.number_types.UOffsetTFlags.py_type(summaryUpgrade), 0)

def clz_Torappu_RL04EndingTextAddSummaryCompleteEnding(builder, summaryCompleteEnding):
    builder.PrependUOffsetTRelativeSlot(38, flatbuffers.number_types.UOffsetTFlags.py_type(summaryCompleteEnding), 0)

def clz_Torappu_RL04EndingTextAddSummaryEachZone(builder, summaryEachZone):
    builder.PrependUOffsetTRelativeSlot(39, flatbuffers.number_types.UOffsetTFlags.py_type(summaryEachZone), 0)

def clz_Torappu_RL04EndingTextAddSummaryPerfectBattle(builder, summaryPerfectBattle):
    builder.PrependUOffsetTRelativeSlot(40, flatbuffers.number_types.UOffsetTFlags.py_type(summaryPerfectBattle), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetBattle(builder, summaryMeetBattle):
    builder.PrependUOffsetTRelativeSlot(41, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetBattle), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetEvent(builder, summaryMeetEvent):
    builder.PrependUOffsetTRelativeSlot(42, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetEvent), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetShop(builder, summaryMeetShop):
    builder.PrependUOffsetTRelativeSlot(43, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetShop), 0)

def clz_Torappu_RL04EndingTextAddSummaryMeetTreasure(builder, summaryMeetTreasure):
    builder.PrependUOffsetTRelativeSlot(44, flatbuffers.number_types.UOffsetTFlags.py_type(summaryMeetTreasure), 0)

def clz_Torappu_RL04EndingTextAddSummaryBuy(builder, summaryBuy):
    builder.PrependUOffsetTRelativeSlot(45, flatbuffers.number_types.UOffsetTFlags.py_type(summaryBuy), 0)

def clz_Torappu_RL04EndingTextAddSummaryInvest(builder, summaryInvest):
    builder.PrependUOffsetTRelativeSlot(46, flatbuffers.number_types.UOffsetTFlags.py_type(summaryInvest), 0)

def clz_Torappu_RL04EndingTextAddSummaryGet(builder, summaryGet):
    builder.PrependUOffsetTRelativeSlot(47, flatbuffers.number_types.UOffsetTFlags.py_type(summaryGet), 0)

def clz_Torappu_RL04EndingTextAddSummaryRelic(builder, summaryRelic):
    builder.PrependUOffsetTRelativeSlot(48, flatbuffers.number_types.UOffsetTFlags.py_type(summaryRelic), 0)

def clz_Torappu_RL04EndingTextAddSummarySafeHouse(builder, summarySafeHouse):
    builder.PrependUOffsetTRelativeSlot(49, flatbuffers.number_types.UOffsetTFlags.py_type(summarySafeHouse), 0)

def clz_Torappu_RL04EndingTextAddSummaryFailEnd(builder, summaryFailEnd):
    builder.PrependUOffsetTRelativeSlot(50, flatbuffers.number_types.UOffsetTFlags.py_type(summaryFailEnd), 0)

def clz_Torappu_RL04EndingTextEnd(builder):
    return builder.EndObject()



class clz_Torappu_RL04CustomizeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RL04CustomizeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RL04CustomizeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RL04CustomizeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RL04CustomizeData
    def CommonDevelopment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeCommonDevelopmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL04CustomizeData
    def Difficulties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RL04DifficultyExt()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RL04CustomizeData
    def DifficultiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RL04CustomizeData
    def DifficultiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_RL04CustomizeData
    def EndingText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL04EndingText()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RL04CustomizeDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_RL04CustomizeDataAddCommonDevelopment(builder, commonDevelopment):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(commonDevelopment), 0)

def clz_Torappu_RL04CustomizeDataAddDifficulties(builder, difficulties):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(difficulties), 0)

def clz_Torappu_RL04CustomizeDataStartDifficultiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RL04CustomizeDataAddEndingText(builder, endingText):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endingText), 0)

def clz_Torappu_RL04CustomizeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicCustomizeData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicCustomizeData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicCustomizeData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicCustomizeData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicCustomizeData
    def Rogue1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL01CustomizeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicCustomizeData
    def Rogue2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL02CustomizeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicCustomizeData
    def Rogue3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL03CustomizeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicCustomizeData
    def Rogue4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RL04CustomizeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeTopicCustomizeDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_RoguelikeTopicCustomizeDataAddRogue1(builder, rogue1):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rogue1), 0)

def clz_Torappu_RoguelikeTopicCustomizeDataAddRogue2(builder, rogue2):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rogue2), 0)

def clz_Torappu_RoguelikeTopicCustomizeDataAddRogue3(builder, rogue3):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rogue3), 0)

def clz_Torappu_RoguelikeTopicCustomizeDataAddRogue4(builder, rogue4):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rogue4), 0)

def clz_Torappu_RoguelikeTopicCustomizeDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_RoguelikeTopicTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RoguelikeTopicTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RoguelikeTopicTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RoguelikeTopicTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RoguelikeTopicTable
    def Topics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicBasicData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicTable
    def TopicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicTable
    def TopicsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_RoguelikeTopicTable
    def Constant(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicConst()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicTable
    def Details(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeTopicDetail()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicTable
    def DetailsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicTable
    def DetailsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_RoguelikeTopicTable
    def Modules(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_RoguelikeModule()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RoguelikeTopicTable
    def ModulesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RoguelikeTopicTable
    def ModulesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_RoguelikeTopicTable
    def CustomizeData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_RoguelikeTopicCustomizeData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_RoguelikeTopicTableStart(builder):
    builder.StartObject(5)

def clz_Torappu_RoguelikeTopicTableAddTopics(builder, topics):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topics), 0)

def clz_Torappu_RoguelikeTopicTableStartTopicsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicTableAddConstant(builder, constant):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(constant), 0)

def clz_Torappu_RoguelikeTopicTableAddDetails(builder, details):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(details), 0)

def clz_Torappu_RoguelikeTopicTableStartDetailsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicTableAddModules(builder, modules):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(modules), 0)

def clz_Torappu_RoguelikeTopicTableStartModulesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RoguelikeTopicTableAddCustomizeData(builder, customizeData):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(customizeData), 0)

def clz_Torappu_RoguelikeTopicTableEnd(builder):
    return builder.EndObject()

ROOT_TYPE = clz_Torappu_RoguelikeTopicTable
